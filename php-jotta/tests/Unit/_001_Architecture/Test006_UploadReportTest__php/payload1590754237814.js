window.__NUXT__=function(e,t,p,a,n,s,o,c,r,i,l,h,d,u,g,m,y,$,x,_,R,k,f,T,S,C,j,E){return i.path="/",i.name="repository",i.type=a,i.children=[{path:"/ceidg-api",name:"ceidg-api",type:a,children:[{path:"/ceidg-api/src",name:"src",type:a,children:[{path:"/ceidg-api/src/Contracts",name:l,type:a,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:a,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:a,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:a,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:h,type:a,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:g}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:c,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:m,type:e,exclude:[{}],stacks:{language:c,icon:y}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:n,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/ceidg-api/composer.json",name:$,type:e,exclude:[{}],stacks:{language:x,icon:_}},{path:"/ceidg-api/phpunit.xml.dist",name:R,type:e,exclude:[{}],stacks:{language:"xml",icon:k}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:a,children:[{path:"/php-jotta/src",name:"src",type:a,children:[{path:"/php-jotta/src/Client",name:"Client",type:a,children:[{path:"/php-jotta/src/Client/Contracts",name:l,type:a,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:a,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:a,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:f,type:a,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:a,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:h,type:a,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:a,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:f,type:a,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:T,name:S,type:e,exclude:[{}],stacks:{language:t,icon:p},content:C}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:a,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:a,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:p}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:g}},{path:"/php-jotta/.travis.yml",name:m,type:e,exclude:[{}],stacks:{language:c,icon:y}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/composer.json",name:$,type:e,exclude:[{}],stacks:{language:x,icon:_}},{path:"/php-jotta/phpunit.xml.dist",name:R,type:e,exclude:[{}],stacks:{language:"xml",icon:k}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:a,children:[{path:"/varia/js",name:"js",type:a,children:[{path:"/varia/js/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:"javascript",icon:"logos:javascript"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/SOME.md",name:"SOME.md",type:e,exclude:[{}],stacks:{language:n,icon:s}}],i.exclude=[{}],i.yaml={},j.path=T,j.name=S,j.type=e,j.exclude=[{}],j.stacks={language:t,icon:p},j.content=C,{layout:"default",data:[{tree:i,pathNode:j,pathMatch:E}],fetch:[],error:o,state:{auth:{token:o,visitor:o,word:o},layout:{loading:{icon:o,name:o},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:i,pathMatch:E,pathNode:j}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill",null,"YAML","README.md",{},"Contracts","tests",".coveralls.yml","yaml","simple-icons:coveralls",".travis.yml","logos:travis-ci","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","Test006_UploadReportTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Support\\OperationReport;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test006_UploadReportTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::__construct\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::stop\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::getReport\n     */\n    public function test001_upload_report_time()\n    {\n        $report = new OperationReport();\n\n        $reflection = new \\ReflectionClass($report);\n        $property = $reflection->getProperty('start');\n        $property->setAccessible(true);\n\n        $this->assertTrue($property->getValue($report) < microtime(true));\n\n        sleep(2);\n        $report->stop();\n\n        $report = $report->getReport();\n\n        $this->assertIsArray($report);\n        $this->assertIsFloat($report['duration']);\n        $this->assertTrue($report['duration'] > 1 && $report['duration'] < 3);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::folderTroublesome\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::fileNoFolder\n     * @covers  \\Vegfund\\Jotta\\Support\\OperationReport::stop\n     */\n    public function test003_upload_report_folders_troublesome()\n    {\n        $folders = [\n            'folder1' => [\n                'file1' => [\n                    'path' => 'path/folder1/file1',\n                    'size' => 2000,\n                ],\n                'file2' => [\n                    'path' => 'path/folder1/file2',\n                    'size' => 3000,\n                ],\n            ],\n        ];\n\n        $uploadReport = new OperationReport();\n\n        foreach ($folders as $path => $folder) {\n            $files = array_map(function ($item) {\n                $mock = \\Mockery::mock(JFileInfo::class);\n                $mock->shouldReceive('getSize')->andReturn($item['size']);\n                $mock->shouldReceive('getRealPath')->andReturn($item['path']);\n\n                return $mock;\n            }, $folder);\n\n            $uploadReport->folderTroublesome($path, $files);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        $this->assertIsArray($report['folders']['troublesome']);\n        $this->assertCount(1, $report['folders']['troublesome']);\n\n        $this->assertIsArray($report['files']['no_folder']);\n        $this->assertCount(2, $report['files']['no_folder']);\n\n        $this->assertSame(5000, $report['sizes']['no_folder']);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::folderCreated\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::folderExisting\n     */\n    public function test003_upload_report_folders_by_types()\n    {\n        $folders = [\n            'path/folder1' => 'existing',\n            'path/folder2' => 'existing',\n            'path/folder3' => 'existing',\n            'path/folder4' => 'created',\n            'path/folder5' => 'created',\n        ];\n\n        $uploadReport = new OperationReport();\n\n        foreach ($folders as $path => $type) {\n            $funcName = 'folder'.ucfirst($type);\n            $uploadReport->{$funcName}($path);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        $this->assertCount(3, $report['folders']['existing']);\n        $this->assertCount(2, $report['folders']['created']);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::file\n     */\n    public function test005_upload_report_files_overwrite()\n    {\n        $overwriteTypes = [\n            Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT => 'uploaded_newer_or_different',\n            Jotta::FILE_OVERWRITE_IF_NEWER              => 'uploaded_newer',\n            Jotta::FILE_OVERWRITE_IF_DIFFERENT          => 'uploaded_different',\n            Jotta::FILE_OVERWRITE_NEVER                 => 'ignored',\n            Jotta::FILE_OVERWRITE_ALWAYS                => 'uploaded_forcibly',\n        ];\n\n        $overwriteTypesKeys = array_keys($overwriteTypes);\n\n        $generatedFiles = [];\n\n        $uploadReport = new OperationReport();\n\n        $expectedSizes = [\n            'uploaded_newer_or_different' => 0,\n            'uploaded_newer'              => 0,\n            'uploaded_different'          => 0,\n            'ignored'                     => 0,\n            'uploaded_forcibly'           => 0,\n        ];\n\n        for ($i = 0; $i < 80; $i++) {\n            $mock = \\Mockery::mock(JFileInfo::class);\n            $size = rand(1, 999999);\n            $path = 'path/to/'.Str::random(12).'txt';\n            $mock->shouldReceive('getSize')->andReturn($size);\n            $mock->shouldReceive('getRealPath')->andReturn($path);\n\n            $overwriteType = $overwriteTypesKeys[array_rand($overwriteTypesKeys)];\n\n            $generatedFiles[] = [\n                'mock'           => $mock,\n                'size'           => $size,\n                'path'           => $path,\n                'overwrite_type' => $overwriteTypes[$overwriteType],\n            ];\n\n            $expectedSizes[$overwriteTypes[$overwriteType]] += $size;\n\n            $uploadReport->file(true, $mock, $overwriteType);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        foreach ($expectedSizes as $scope => $size) {\n            $this->assertSame($size, $report['sizes'][$scope]);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::fileFresh\n     */\n    public function test007_upload_files_fresh()\n    {\n        $expectedSize = 0;\n        $expectedCount = rand(50, 100);\n\n        $uploadReport = new OperationReport();\n\n        for ($i = 0; $i < $expectedCount; $i++) {\n            $mock = \\Mockery::mock(JFileInfo::class);\n            $size = rand(1, 999999);\n            $path = 'path/to/'.Str::random(12).'txt';\n            $mock->shouldReceive('getSize')->andReturn($size);\n            $mock->shouldReceive('getRealPath')->andReturn($path);\n\n            $expectedSize += $size;\n\n            $uploadReport->fileFresh($mock);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        $this->assertSame($expectedCount, count($report['files']['uploaded_fresh']));\n        $this->assertSame($expectedSize, $report['sizes']['uploaded_fresh']);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::file\n     */\n    public function test007a_upload_files_fresh_variant()\n    {\n        $expectedSize = 0;\n        $expectedCount = rand(50, 100);\n\n        $uploadReport = new OperationReport();\n\n        for ($i = 0; $i < $expectedCount; $i++) {\n            $mock = \\Mockery::mock(JFileInfo::class);\n            $size = rand(1, 999999);\n            $path = 'path/to/'.Str::random(12).'txt';\n            $mock->shouldReceive('getSize')->andReturn($size);\n            $mock->shouldReceive('getRealPath')->andReturn($path);\n\n            $expectedSize += $size;\n\n            $uploadReport->file(false, $mock, Jotta::FILE_OVERWRITE_ALWAYS);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        $this->assertSame($expectedCount, count($report['files']['uploaded_fresh']));\n        $this->assertSame($expectedSize, $report['sizes']['uploaded_fresh']);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\OperationReport::fileTroublesome\n     */\n    public function test007_upload_files_troublesome()\n    {\n        $expectedSize = 0;\n        $expectedCount = rand(50, 100);\n\n        $uploadReport = new OperationReport();\n\n        for ($i = 0; $i < $expectedCount; $i++) {\n            $mock = \\Mockery::mock(JFileInfo::class);\n            $size = rand(1, 999999);\n            $path = 'path/to/'.Str::random(12).'txt';\n            $mock->shouldReceive('getSize')->andReturn($size);\n            $mock->shouldReceive('getRealPath')->andReturn($path);\n\n            $expectedSize += $size;\n\n            $uploadReport->fileTroublesome($mock);\n        }\n\n        $uploadReport->stop();\n        $report = $uploadReport->getReport();\n\n        $this->assertSame($expectedCount, count($report['files']['troublesome']));\n        $this->assertSame($expectedSize, $report['sizes']['troublesome']);\n    }\n}\n",{},"php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest__php")