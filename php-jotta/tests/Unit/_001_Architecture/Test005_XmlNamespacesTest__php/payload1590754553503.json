{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User;\nuse Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test005_XmlNamespacesTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::file\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::currentRevision\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test001_current_revision()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->file();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n\n        $currentRevision = $serialized->getCurrentRevision();\n\n        $this->assertIsInt($currentRevision->getNumber());\n        $this->assertIsInt($currentRevision->getSize());\n        $this->assertIsString($currentRevision->getState());\n        $this->assertIsString($currentRevision->getMd5());\n        $this->assertSame(32, strlen($currentRevision->getMd5()));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::device\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test003_device()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->device();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Device::class, $serialized);\n        $this->assertIsArray($serialized->getMountPoints());\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getName());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007a_file()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'  => $md5,\n            'size' => $size,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertFalse($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007b_file_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'     => $md5,\n            'size'    => $size,\n            'deleted' => time() - 120,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::folder\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::getPath\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::isDeleted\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test009_folder()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->folder(['deleted' => time()]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Folder::class, $serialized);\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertIsString($serialized->getPath());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::metadata()\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test011_metadata()\n    {\n        $body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <folder name=\"Somefolder\" time=\"2020-03-16-T13:59:17Z\" host=\"**obfuscated**\">\n                    <path xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</path>\n                    <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</abspath>\n                    <folders>\n                        <folder name=\"Ideas\">\n                            <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync/Somefolder</abspath>\n                        </folder>\n                    </folders>\n                    <files>\n                    </files>\n                    <metadata first=\"\" max=\"\" total=\"8\" num_folders=\"1\" num_files=\"7\"/>\n                </folder>';\n\n        $folder = XmlResponseSerializer::parse($body, 'auto');\n        $this->assertInstanceOf(Metadata::class, $folder->getMetadata());\n        $metadata = $folder->getMetadata();\n\n        $this->assertSame(1, (int) $metadata->getAttribute('num_folders'));\n        $this->assertSame(7, (int) $metadata->getAttribute('num_files'));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::mountPoint\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test013_mount_point()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'folders' => [\n                ['name' => 'folder1'],\n                ['name' => 'folder2'],\n            ],\n            'files' => [\n                ['name' => 'file1.txt'],\n                ['name' => 'file2.txt'],\n            ],\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(MountPoint::class, $serialized);\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getPath());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::user\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::xmlDeserialize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test015_user()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->user();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(User::class, $serialized);\n        $this->assertIsInt($serialized->getUsage());\n        $this->assertIsInt($serialized->getMaxDevices());\n        $this->assertIsBool($serialized->getEnableFoldershare());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::__call\n     */\n    public function test017_method_not_exists()\n    {\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        try {\n            $mock->nonexisting();\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::castPrimitives()\n     *\n     * @throws \\ReflectionException\n     */\n    public function test019_cast_primitives()\n    {\n        $method = new \\ReflectionMethod(ResponseNamespace::class, 'castPrimitives');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        $datetime = new \\DateTime();\n\n        $casted = $method->invoke($mock, $datetime->format('Y-m-d-\\TH:i:sO'), 'datetime');\n        $this->assertInstanceOf(\\DateTime::class, $casted);\n        $this->assertSame($datetime->getTimestamp(), $casted->getTimestamp());\n\n        $primitives = [\n            [\n                'value'    => 1,\n                'cast'     => 'string',\n                'expected' => '1',\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'float',\n                'expected' => (float) 1,\n            ],\n            [\n                'value'    => 'true',\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 'false',\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n            [\n                'value'    => 0,\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n        ];\n\n        foreach ($primitives as $primitive) {\n            $casted = $method->invoke($mock, $primitive['value'], $primitive['cast']);\n            $this->assertSame($primitive['expected'], $casted);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDeleted\n     *\n     * @throws JottaException\n     */\n    public function test021_file_is_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt']);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDeleted());\n\n        // DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test023_file_is_corrupt()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isCorrupt());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isCorrupt());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test024_file_is_incomplete()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isIncomplete());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_INCOMPLETE]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isIncomplete());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isValid\n     *\n     * @throws JottaException\n     */\n    public function test025_file_is_valid()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // VALID\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isValid());\n\n        // COMPLETED BUT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time(), 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isNewerThan\n     *\n     * @throws JottaException\n     */\n    public function test027_file_is_newer_than()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NEWER THAN LOCAL\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn(time() - 1000);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isNewerThan($fileMock));\n\n        // SAME AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n\n        // OLDER AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp - 10000]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDifferentThan\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isSameAs\n     *\n     * @throws JottaException\n     */\n    public function test029_file_is_different()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // SAME SIZE AND MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDifferentThan($fileMock));\n        $this->assertTrue($serialized->isSameAs($fileMock));\n\n        // SAME SIZE, DIFFERENT MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n\n        // SAME MD5, DIFFERENT SIZE\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n\n        // BOTH DIFFERENT\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test031_mount_point_get_username()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n        $body = $responseBodyMock->mountPoint();\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame($serialized->getUser(), $serialized->getUsername());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getWithContents\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test033_mount_point_get_folders()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => []]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame([], $serialized->getFolders());\n        $this->assertSame([], $serialized->getFiles());\n\n        // TWO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertSame([], $serialized->getFiles());\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n\n        // TWO FOLDERS, TWO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [['name' => '1.txt'], ['name' => '2.txt']], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n        $this->assertIsArray($serialized->getFiles());\n        $this->assertCount(2, $serialized->getFiles());\n    }\n}\n"},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/SOME.md","name":"SOME.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User;\nuse Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test005_XmlNamespacesTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::file\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::currentRevision\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test001_current_revision()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->file();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n\n        $currentRevision = $serialized->getCurrentRevision();\n\n        $this->assertIsInt($currentRevision->getNumber());\n        $this->assertIsInt($currentRevision->getSize());\n        $this->assertIsString($currentRevision->getState());\n        $this->assertIsString($currentRevision->getMd5());\n        $this->assertSame(32, strlen($currentRevision->getMd5()));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::device\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test003_device()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->device();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Device::class, $serialized);\n        $this->assertIsArray($serialized->getMountPoints());\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getName());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007a_file()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'  => $md5,\n            'size' => $size,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertFalse($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007b_file_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'     => $md5,\n            'size'    => $size,\n            'deleted' => time() - 120,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::folder\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::getPath\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::isDeleted\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test009_folder()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->folder(['deleted' => time()]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Folder::class, $serialized);\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertIsString($serialized->getPath());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::metadata()\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test011_metadata()\n    {\n        $body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <folder name=\"Somefolder\" time=\"2020-03-16-T13:59:17Z\" host=\"**obfuscated**\">\n                    <path xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</path>\n                    <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</abspath>\n                    <folders>\n                        <folder name=\"Ideas\">\n                            <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync/Somefolder</abspath>\n                        </folder>\n                    </folders>\n                    <files>\n                    </files>\n                    <metadata first=\"\" max=\"\" total=\"8\" num_folders=\"1\" num_files=\"7\"/>\n                </folder>';\n\n        $folder = XmlResponseSerializer::parse($body, 'auto');\n        $this->assertInstanceOf(Metadata::class, $folder->getMetadata());\n        $metadata = $folder->getMetadata();\n\n        $this->assertSame(1, (int) $metadata->getAttribute('num_folders'));\n        $this->assertSame(7, (int) $metadata->getAttribute('num_files'));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::mountPoint\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test013_mount_point()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'folders' => [\n                ['name' => 'folder1'],\n                ['name' => 'folder2'],\n            ],\n            'files' => [\n                ['name' => 'file1.txt'],\n                ['name' => 'file2.txt'],\n            ],\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(MountPoint::class, $serialized);\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getPath());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::user\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::xmlDeserialize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test015_user()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->user();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(User::class, $serialized);\n        $this->assertIsInt($serialized->getUsage());\n        $this->assertIsInt($serialized->getMaxDevices());\n        $this->assertIsBool($serialized->getEnableFoldershare());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::__call\n     */\n    public function test017_method_not_exists()\n    {\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        try {\n            $mock->nonexisting();\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::castPrimitives()\n     *\n     * @throws \\ReflectionException\n     */\n    public function test019_cast_primitives()\n    {\n        $method = new \\ReflectionMethod(ResponseNamespace::class, 'castPrimitives');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        $datetime = new \\DateTime();\n\n        $casted = $method->invoke($mock, $datetime->format('Y-m-d-\\TH:i:sO'), 'datetime');\n        $this->assertInstanceOf(\\DateTime::class, $casted);\n        $this->assertSame($datetime->getTimestamp(), $casted->getTimestamp());\n\n        $primitives = [\n            [\n                'value'    => 1,\n                'cast'     => 'string',\n                'expected' => '1',\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'float',\n                'expected' => (float) 1,\n            ],\n            [\n                'value'    => 'true',\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 'false',\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n            [\n                'value'    => 0,\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n        ];\n\n        foreach ($primitives as $primitive) {\n            $casted = $method->invoke($mock, $primitive['value'], $primitive['cast']);\n            $this->assertSame($primitive['expected'], $casted);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDeleted\n     *\n     * @throws JottaException\n     */\n    public function test021_file_is_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt']);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDeleted());\n\n        // DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test023_file_is_corrupt()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isCorrupt());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isCorrupt());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test024_file_is_incomplete()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isIncomplete());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_INCOMPLETE]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isIncomplete());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isValid\n     *\n     * @throws JottaException\n     */\n    public function test025_file_is_valid()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // VALID\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isValid());\n\n        // COMPLETED BUT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time(), 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isNewerThan\n     *\n     * @throws JottaException\n     */\n    public function test027_file_is_newer_than()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NEWER THAN LOCAL\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn(time() - 1000);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isNewerThan($fileMock));\n\n        // SAME AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n\n        // OLDER AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp - 10000]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDifferentThan\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isSameAs\n     *\n     * @throws JottaException\n     */\n    public function test029_file_is_different()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // SAME SIZE AND MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDifferentThan($fileMock));\n        $this->assertTrue($serialized->isSameAs($fileMock));\n\n        // SAME SIZE, DIFFERENT MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n\n        // SAME MD5, DIFFERENT SIZE\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n\n        // BOTH DIFFERENT\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test031_mount_point_get_username()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n        $body = $responseBodyMock->mountPoint();\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame($serialized->getUser(), $serialized->getUsername());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getWithContents\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test033_mount_point_get_folders()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => []]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame([], $serialized->getFolders());\n        $this->assertSame([], $serialized->getFiles());\n\n        // TWO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertSame([], $serialized->getFiles());\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n\n        // TWO FOLDERS, TWO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [['name' => '1.txt'], ['name' => '2.txt']], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n        $this->assertIsArray($serialized->getFiles());\n        $this->assertCount(2, $serialized->getFiles());\n    }\n}\n"},"pathMatch":"php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest__php"}