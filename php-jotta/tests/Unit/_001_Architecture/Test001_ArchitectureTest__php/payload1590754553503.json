{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse GuzzleHttp\\Client;\nuse Illuminate\\Support\\Str;\nuse Mockery;\nuse Vegfund\\Jotta\\Client\\Contracts\\ScopeContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes;\nuse Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace;\nuse Vegfund\\Jotta\\Client\\Scopes\\AccountScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DeviceScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\FileScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test001_ArchitectureTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::__construct\n     * @covers \\Vegfund\\Jotta\\Jotta::client\n     * @covers \\Vegfund\\Jotta\\Jotta::getClient\n     * @covers \\Vegfund\\Jotta\\Jotta::__construct\n     * @covers \\Vegfund\\Jotta\\JottaClient::getUsername\n     * @covers \\Vegfund\\Jotta\\JottaClient::getClient\n     */\n    public function test001_init()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client);\n\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client);\n\n        $this->assertSame(getenv('JOTTA_USERNAME'), $client->getUsername());\n\n        $client = new Jotta(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client->getClient());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getClient\n     */\n    public function test001a_get_client()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(Client::class, $client->getClient());\n\n        $mock = Mockery::mock(Scope::class);\n        $mock->makePartial();\n        $mock->shouldAllowMockingProtectedMethods();\n\n        $property = new \\ReflectionProperty(Scope::class, 'jottaClient');\n        $property->setAccessible(true);\n        $property->setValue($mock, $client);\n        $method = new \\ReflectionMethod(Scope::class, 'getClient');\n        $method->setAccessible(true);\n\n        $this->assertInstanceOf(get_class($client), $method->invoke($mock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     * @covers \\Vegfund\\Jotta\\JottaClient::account\n     * @covers \\Vegfund\\Jotta\\JottaClient::device\n     * @covers \\Vegfund\\Jotta\\JottaClient::file\n     * @covers \\Vegfund\\Jotta\\JottaClient::directory\n     */\n    public function test003_scopes()\n    {\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'directory'  => DirectoryScope::class,\n        ];\n\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        foreach ($scopes as $method => $className) {\n            $scope = $client->{$method}();\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::folder\n     * @covers \\Vegfund\\Jotta\\JottaClient::mountPoint\n     *\n     * @throws JottaException\n     */\n    public function test003a_mount_point_folder_scopes()\n    {\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $folder = $client->folder();\n\n        $this->assertInstanceOf(DirectoryScope::class, $folder);\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $folder->getMode());\n\n        $folder = $client->mountPoint();\n\n        $this->assertInstanceOf(DirectoryScope::class, $folder);\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $folder->getMode());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::account\n     * @covers \\Vegfund\\Jotta\\Jotta::device\n     * @covers \\Vegfund\\Jotta\\Jotta::file\n     * @covers \\Vegfund\\Jotta\\Jotta::directory\n     * @covers \\Vegfund\\Jotta\\Jotta::folder\n     * @covers \\Vegfund\\Jotta\\Jotta::mountPoint\n     */\n    public function test003a_scopes_static()\n    {\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'directory'  => DirectoryScope::class,\n            'folder'     => DirectoryScope::class,\n            'mountPoint' => DirectoryScope::class,\n        ];\n\n        foreach ($scopes as $method => $className) {\n            $scope = Jotta::{$method}(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n\n            if ($method === 'folder') {\n                $this->assertSame(DirectoryScope::MODE_FOLDER, $scope->getMode());\n            }\n            if ($method === 'mountPoint') {\n                $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $scope->getMode());\n            }\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     */\n    public function test003a_scope_does_not_exist()\n    {\n        $scopeName = str_replace('il', 'somethingelse', FileScope::class);\n\n        try {\n            Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->getScope($scopeName);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     */\n    public function test003c_scopes_with_options()\n    {\n        $options = [\n            'device'      => Str::random(32),\n            'mount_point' => Str::random(32),\n            'base_path'   => Str::random(32),\n        ];\n\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'folder'     => DirectoryScope::class,\n            'mountPoint' => DirectoryScope::class,\n        ];\n\n        foreach ($scopes as $method => $className) {\n            $scope = Jotta::{$method}(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'), $options);\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n\n            $this->assertSame(Jotta::DEVICE_JOTTA, $scope->getDevice());\n            $this->assertSame($options['mount_point'], $scope->getMountPoint());\n            $this->assertSame($options['base_path'], $scope->getBasePath());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setApiUrl\n     *\n     * @throws \\ReflectionException\n     */\n    public function test003d_scope_configs()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $mock->setApiUrl(Jotta::API_UPLOAD_URL);\n\n        $reflection = new \\ReflectionClass($mock);\n        $property = $reflection->getProperty('apiUrl');\n        $property->setAccessible(true);\n\n        $this->assertSame(Jotta::API_UPLOAD_URL, $property->getValue($mock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::normalizePathSegment\n     *\n     * @throws \\ReflectionException\n     */\n    public function test005_normalize_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'normalizePathSegment');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n\n        $output = $method->invoke($mock, '/////path-segment//');\n\n        $this->assertSame('path-segment', $output);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getPath\n     *\n     * @throws \\ReflectionException\n     */\n    public function test007_get_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getPath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n        $mock->setUsername(getenv('JOTTA_USERNAME'));\n\n        $path = $method->invoke($mock, Jotta::API_BASE_URL, Jotta::DEVICE_JOTTA, Jotta::MOUNT_POINT_ARCHIVE, 'somefolder/gone/missing/', ['umode' => 'nomultipart']);\n        $this->assertSame('https://jottacloud.com/jfs/'.getenv('JOTTA_USERNAME').'/Jotta/Archive/somefolder/gone/missing?umode=nomultipart', $path);\n\n        $path = $method->invoke($mock, null, null, null, null);\n        $this->assertSame(getenv('JOTTA_USERNAME'), $path);\n\n        $path = $method->invoke($mock, '', '', '', '');\n        $this->assertSame(getenv('JOTTA_USERNAME'), $path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getRelativePath\n     */\n    public function test009_get_relative_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getRelativePath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $path = getcwd().'/some/relative/path/';\n        $relativePath = $method->invoke($mock, $path);\n        $this->assertSame('some/relative/path', $relativePath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getRootPath\n     */\n    public function test011_get_root_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getRootPath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $path = '/some/relative/path/';\n        $rootPath = $method->invoke($mock, $path);\n        $this->assertSame('some/relative', $rootPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::withoutExceptions\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::withExceptions\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::serialize\n     */\n    public function test013_disable_exceptions()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $this->shouldNotThrowException(function () use ($mock) {\n            $mock->withoutExceptions()->serialize('not a XML body');\n        });\n\n        $this->shouldThrowException(\\Exception::class, function () use ($mock) {\n            $mock->withExceptions()->serialize('not a XML body');\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setAutoRequest\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setSyncRequest\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setAsyncRequest\n     */\n    public function test015_set_request_type()\n    {\n        foreach (['async', 'sync', 'auto'] as $requestType) {\n            $mock = \\Mockery::mock(Scope::class);\n            $mock->makePartial();\n\n            $reflection = new \\ReflectionClass($mock);\n            $property = $reflection->getProperty('requestType');\n            $property->setAccessible(true);\n\n            $funcName = 'set'.ucfirst($requestType).'Request';\n            $asyncScope = $mock->{$funcName}();\n\n            $this->assertSame($requestType, $property->getValue($asyncScope));\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getHeaders\n     *\n     * @throws \\ReflectionException\n     */\n    public function test021_merge_headers()\n    {\n        $method = new \\ReflectionMethod(JottaClient::class, 'getHeaders');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(JottaClient::class);\n        $mock->makePartial();\n\n        $newHeaders = [\n            'header1' => 'value1',\n            'header2' => 'value2',\n        ];\n        $mergedHeaders = $method->invoke($mock, $newHeaders);\n        foreach ($newHeaders as $header => $value) {\n            $this->assertSame($value, $mergedHeaders[$header]);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::getMd5\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::getContents\n     */\n    public function test023_jfile_info()\n    {\n        $file = new JFileInfo(__FILE__);\n        $this->assertInstanceOf(\\SplFileInfo::class, $file);\n        $this->assertSame(md5(file_get_contents(__FILE__)), $file->getMd5());\n\n        $contents = file_get_contents(__FILE__);\n        $this->assertSame($contents, $file->getContents());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setUsername\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getUsername\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setDevice\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getDevice\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setBasePath\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getBasePath\n     */\n    public function test025_scope_settings()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $username = Str::random(32);\n        $mock->setUsername($username);\n        $this->assertSame($username, $mock->getUsername());\n\n        $device = Str::random(32);\n        $mock->setDevice($device);\n        $this->assertSame(Jotta::DEVICE_JOTTA, $mock->getDevice());\n\n        $mountPoint = Str::random(32);\n        $mock->setMountPoint($mountPoint);\n        $this->assertSame($mountPoint, $mock->getMountPoint());\n\n        $basePath = Str::random(32);\n        $mock->setBasePath($basePath);\n        $this->assertSame($basePath, $mock->getBasePath());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::__construct\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::make\n     */\n    public function test027_cast_file_to_jfile()\n    {\n        $thisFile = __FILE__;\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n\n        $thisFile = new \\SplFileInfo($thisFile);\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n\n        $thisFile = new JFileInfo($thisFile);\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n    }\n\n    /**\n     * @covers ResponseNamespace::__get\n     *\n     * @throws \\ReflectionException\n     */\n    public function test029_scope_getter()\n    {\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n        $mock->shouldAllowMockingProtectedMethods();\n\n        $mock->testAttribute1 = 'abc';\n        $this->assertSame('abc', $mock->testAttribute1);\n\n        $attributes = new Attributes(['testAttribute2' => 'def']);\n        $method = new \\ReflectionMethod(ResponseNamespace::class, 'setAttributes');\n        $method->setAccessible(true);\n\n        $method->invoke($mock, $attributes);\n\n        $this->assertSame('def', $mock->testAttribute2);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $nonExistant = $mock->nonExistant;\n        });\n    }\n}\n"},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/SOME.md","name":"SOME.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse GuzzleHttp\\Client;\nuse Illuminate\\Support\\Str;\nuse Mockery;\nuse Vegfund\\Jotta\\Client\\Contracts\\ScopeContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes;\nuse Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace;\nuse Vegfund\\Jotta\\Client\\Scopes\\AccountScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DeviceScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\FileScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test001_ArchitectureTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::__construct\n     * @covers \\Vegfund\\Jotta\\Jotta::client\n     * @covers \\Vegfund\\Jotta\\Jotta::getClient\n     * @covers \\Vegfund\\Jotta\\Jotta::__construct\n     * @covers \\Vegfund\\Jotta\\JottaClient::getUsername\n     * @covers \\Vegfund\\Jotta\\JottaClient::getClient\n     */\n    public function test001_init()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client);\n\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client);\n\n        $this->assertSame(getenv('JOTTA_USERNAME'), $client->getUsername());\n\n        $client = new Jotta(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(JottaClient::class, $client->getClient());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getClient\n     */\n    public function test001a_get_client()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $this->assertInstanceOf(Client::class, $client->getClient());\n\n        $mock = Mockery::mock(Scope::class);\n        $mock->makePartial();\n        $mock->shouldAllowMockingProtectedMethods();\n\n        $property = new \\ReflectionProperty(Scope::class, 'jottaClient');\n        $property->setAccessible(true);\n        $property->setValue($mock, $client);\n        $method = new \\ReflectionMethod(Scope::class, 'getClient');\n        $method->setAccessible(true);\n\n        $this->assertInstanceOf(get_class($client), $method->invoke($mock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     * @covers \\Vegfund\\Jotta\\JottaClient::account\n     * @covers \\Vegfund\\Jotta\\JottaClient::device\n     * @covers \\Vegfund\\Jotta\\JottaClient::file\n     * @covers \\Vegfund\\Jotta\\JottaClient::directory\n     */\n    public function test003_scopes()\n    {\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'directory'  => DirectoryScope::class,\n        ];\n\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        foreach ($scopes as $method => $className) {\n            $scope = $client->{$method}();\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::folder\n     * @covers \\Vegfund\\Jotta\\JottaClient::mountPoint\n     *\n     * @throws JottaException\n     */\n    public function test003a_mount_point_folder_scopes()\n    {\n        $client = new JottaClient(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $folder = $client->folder();\n\n        $this->assertInstanceOf(DirectoryScope::class, $folder);\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $folder->getMode());\n\n        $folder = $client->mountPoint();\n\n        $this->assertInstanceOf(DirectoryScope::class, $folder);\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $folder->getMode());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::account\n     * @covers \\Vegfund\\Jotta\\Jotta::device\n     * @covers \\Vegfund\\Jotta\\Jotta::file\n     * @covers \\Vegfund\\Jotta\\Jotta::directory\n     * @covers \\Vegfund\\Jotta\\Jotta::folder\n     * @covers \\Vegfund\\Jotta\\Jotta::mountPoint\n     */\n    public function test003a_scopes_static()\n    {\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'directory'  => DirectoryScope::class,\n            'folder'     => DirectoryScope::class,\n            'mountPoint' => DirectoryScope::class,\n        ];\n\n        foreach ($scopes as $method => $className) {\n            $scope = Jotta::{$method}(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n\n            if ($method === 'folder') {\n                $this->assertSame(DirectoryScope::MODE_FOLDER, $scope->getMode());\n            }\n            if ($method === 'mountPoint') {\n                $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $scope->getMode());\n            }\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     */\n    public function test003a_scope_does_not_exist()\n    {\n        $scopeName = str_replace('il', 'somethingelse', FileScope::class);\n\n        try {\n            Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->getScope($scopeName);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getScope\n     */\n    public function test003c_scopes_with_options()\n    {\n        $options = [\n            'device'      => Str::random(32),\n            'mount_point' => Str::random(32),\n            'base_path'   => Str::random(32),\n        ];\n\n        $scopes = [\n            'account'    => AccountScope::class,\n            'device'     => DeviceScope::class,\n            'file'       => FileScope::class,\n            'folder'     => DirectoryScope::class,\n            'mountPoint' => DirectoryScope::class,\n        ];\n\n        foreach ($scopes as $method => $className) {\n            $scope = Jotta::{$method}(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'), $options);\n\n            $this->assertInstanceOf($className, $scope);\n            $this->assertInstanceOf(Scope::class, $scope);\n            $this->assertInstanceOf(ScopeContract::class, $scope);\n\n            $this->assertSame(Jotta::DEVICE_JOTTA, $scope->getDevice());\n            $this->assertSame($options['mount_point'], $scope->getMountPoint());\n            $this->assertSame($options['base_path'], $scope->getBasePath());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setApiUrl\n     *\n     * @throws \\ReflectionException\n     */\n    public function test003d_scope_configs()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $mock->setApiUrl(Jotta::API_UPLOAD_URL);\n\n        $reflection = new \\ReflectionClass($mock);\n        $property = $reflection->getProperty('apiUrl');\n        $property->setAccessible(true);\n\n        $this->assertSame(Jotta::API_UPLOAD_URL, $property->getValue($mock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::normalizePathSegment\n     *\n     * @throws \\ReflectionException\n     */\n    public function test005_normalize_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'normalizePathSegment');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n\n        $output = $method->invoke($mock, '/////path-segment//');\n\n        $this->assertSame('path-segment', $output);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getPath\n     *\n     * @throws \\ReflectionException\n     */\n    public function test007_get_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getPath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n        $mock->setUsername(getenv('JOTTA_USERNAME'));\n\n        $path = $method->invoke($mock, Jotta::API_BASE_URL, Jotta::DEVICE_JOTTA, Jotta::MOUNT_POINT_ARCHIVE, 'somefolder/gone/missing/', ['umode' => 'nomultipart']);\n        $this->assertSame('https://jottacloud.com/jfs/'.getenv('JOTTA_USERNAME').'/Jotta/Archive/somefolder/gone/missing?umode=nomultipart', $path);\n\n        $path = $method->invoke($mock, null, null, null, null);\n        $this->assertSame(getenv('JOTTA_USERNAME'), $path);\n\n        $path = $method->invoke($mock, '', '', '', '');\n        $this->assertSame(getenv('JOTTA_USERNAME'), $path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getRelativePath\n     */\n    public function test009_get_relative_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getRelativePath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $path = getcwd().'/some/relative/path/';\n        $relativePath = $method->invoke($mock, $path);\n        $this->assertSame('some/relative/path', $relativePath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getRootPath\n     */\n    public function test011_get_root_path()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'getRootPath');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $path = '/some/relative/path/';\n        $rootPath = $method->invoke($mock, $path);\n        $this->assertSame('some/relative', $rootPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::withoutExceptions\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::withExceptions\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::serialize\n     */\n    public function test013_disable_exceptions()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $this->shouldNotThrowException(function () use ($mock) {\n            $mock->withoutExceptions()->serialize('not a XML body');\n        });\n\n        $this->shouldThrowException(\\Exception::class, function () use ($mock) {\n            $mock->withExceptions()->serialize('not a XML body');\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setAutoRequest\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setSyncRequest\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setAsyncRequest\n     */\n    public function test015_set_request_type()\n    {\n        foreach (['async', 'sync', 'auto'] as $requestType) {\n            $mock = \\Mockery::mock(Scope::class);\n            $mock->makePartial();\n\n            $reflection = new \\ReflectionClass($mock);\n            $property = $reflection->getProperty('requestType');\n            $property->setAccessible(true);\n\n            $funcName = 'set'.ucfirst($requestType).'Request';\n            $asyncScope = $mock->{$funcName}();\n\n            $this->assertSame($requestType, $property->getValue($asyncScope));\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::getHeaders\n     *\n     * @throws \\ReflectionException\n     */\n    public function test021_merge_headers()\n    {\n        $method = new \\ReflectionMethod(JottaClient::class, 'getHeaders');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(JottaClient::class);\n        $mock->makePartial();\n\n        $newHeaders = [\n            'header1' => 'value1',\n            'header2' => 'value2',\n        ];\n        $mergedHeaders = $method->invoke($mock, $newHeaders);\n        foreach ($newHeaders as $header => $value) {\n            $this->assertSame($value, $mergedHeaders[$header]);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::getMd5\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::getContents\n     */\n    public function test023_jfile_info()\n    {\n        $file = new JFileInfo(__FILE__);\n        $this->assertInstanceOf(\\SplFileInfo::class, $file);\n        $this->assertSame(md5(file_get_contents(__FILE__)), $file->getMd5());\n\n        $contents = file_get_contents(__FILE__);\n        $this->assertSame($contents, $file->getContents());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setUsername\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getUsername\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setDevice\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getDevice\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::setBasePath\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::getBasePath\n     */\n    public function test025_scope_settings()\n    {\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        $username = Str::random(32);\n        $mock->setUsername($username);\n        $this->assertSame($username, $mock->getUsername());\n\n        $device = Str::random(32);\n        $mock->setDevice($device);\n        $this->assertSame(Jotta::DEVICE_JOTTA, $mock->getDevice());\n\n        $mountPoint = Str::random(32);\n        $mock->setMountPoint($mountPoint);\n        $this->assertSame($mountPoint, $mock->getMountPoint());\n\n        $basePath = Str::random(32);\n        $mock->setBasePath($basePath);\n        $this->assertSame($basePath, $mock->getBasePath());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::__construct\n     * @covers \\Vegfund\\Jotta\\Support\\JFileInfo::make\n     */\n    public function test027_cast_file_to_jfile()\n    {\n        $thisFile = __FILE__;\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n\n        $thisFile = new \\SplFileInfo($thisFile);\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n\n        $thisFile = new JFileInfo($thisFile);\n        $this->assertInstanceOf(JFileInfo::class, JFileInfo::make($thisFile));\n    }\n\n    /**\n     * @covers ResponseNamespace::__get\n     *\n     * @throws \\ReflectionException\n     */\n    public function test029_scope_getter()\n    {\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n        $mock->shouldAllowMockingProtectedMethods();\n\n        $mock->testAttribute1 = 'abc';\n        $this->assertSame('abc', $mock->testAttribute1);\n\n        $attributes = new Attributes(['testAttribute2' => 'def']);\n        $method = new \\ReflectionMethod(ResponseNamespace::class, 'setAttributes');\n        $method->setAccessible(true);\n\n        $method->invoke($mock, $attributes);\n\n        $this->assertSame('def', $mock->testAttribute2);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $nonExistant = $mock->nonExistant;\n        });\n    }\n}\n"},"pathMatch":"php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest__php"}