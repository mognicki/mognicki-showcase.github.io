window.__NUXT__=function(e,t,a,p,s,n,c,o,i,l,r,h,d,u,m,g,y,x,k,_,T,C,j,v,b,S,R,f){return l.path="/",l.name="repository",l.type=p,l.children=[{path:"/ceidg-api",name:"ceidg-api",type:p,children:[{path:"/ceidg-api/src",name:"src",type:p,children:[{path:"/ceidg-api/src/Contracts",name:r,type:p,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:p,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:p,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:p,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:h,type:p,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:m}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:o,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:g,type:e,exclude:[{}],stacks:{language:o,icon:y}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:s,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/ceidg-api/composer.json",name:x,type:e,exclude:[{}],stacks:{language:k,icon:_}},{path:"/ceidg-api/phpunit.xml.dist",name:T,type:e,exclude:[{}],stacks:{language:"xml",icon:C}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:p,children:[{path:"/php-jotta/src",name:"src",type:p,children:[{path:"/php-jotta/src/Client",name:"Client",type:p,children:[{path:"/php-jotta/src/Client/Contracts",name:r,type:p,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:p,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:p,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:j,type:p,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:p,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:h,type:p,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:p,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:j,type:p,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:v,name:b,type:e,exclude:[{}],stacks:{language:t,icon:a},content:S},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:p,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:p,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:m}},{path:"/php-jotta/.travis.yml",name:g,type:e,exclude:[{}],stacks:{language:o,icon:y}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/composer.json",name:x,type:e,exclude:[{}],stacks:{language:k,icon:_}},{path:"/php-jotta/phpunit.xml.dist",name:T,type:e,exclude:[{}],stacks:{language:"xml",icon:C}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:p,children:[{path:"/varia/js",name:"js",type:p,children:[{path:"/varia/js/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:"javascript",icon:"logos:javascript"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/SOME.md",name:"SOME.md",type:e,exclude:[{}],stacks:{language:s,icon:n}}],l.exclude=[{}],l.yaml={},R.path=v,R.name=b,R.type=e,R.exclude=[{}],R.stacks={language:t,icon:a},R.content=S,{layout:"default",data:[{tree:l,pathNode:R,pathMatch:f}],fetch:[],error:c,state:{auth:{token:c,visitor:c,word:c},layout:{loading:{icon:c,name:c},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:l,pathMatch:f,pathNode:R}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_001_Architecture/Test003_XmlSerializerTest__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill",null,"YAML","README.md",{},"Contracts","tests",".coveralls.yml","yaml","simple-icons:coveralls",".travis.yml","logos:travis-ci","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","Test003_XmlSerializerTest.php",'<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test003_XmlSerializerTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer::getRootNamespace\n     *\n     * @throws \\ReflectionException\n     */\n    public function test001_detect_root()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $method = new \\ReflectionMethod(XmlResponseSerializer::class, \'getRootNamespace\');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(XmlResponseSerializer::class);\n        $mock->makePartial();\n\n        $newHeaders = [\n            \'user\'       => $responseBodyMock->user(),\n            \'device\'     => $responseBodyMock->device(),\n            \'mountPoint\' => $responseBodyMock->mountPoint(),\n            \'folder\'     => $responseBodyMock->folder(),\n            \'file\'       => $responseBodyMock->file(),\n        ];\n\n        foreach ($newHeaders as $namespace => $body) {\n            $rootNms = $method->invoke($mock, $body);\n            $this->assertSame($namespace, $rootNms);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer::getRaw\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test003_raw_body()\n    {\n        $body = \'<?xml version="1.0" encoding="UTF-8"?>\n                    <mountPoint time="2020-03-16-T09:47:15Z" host="**obfuscated**">\n                        <name xml:space="preserve">Archive</name>\n                        <path xml:space="preserve">/**obfuscated**/Jotta</path>\n                        <abspath xml:space="preserve">/**obfuscated**/Jotta</abspath>\n                        <size>383654</size>\n                        <modified>2020-03-12-T22:57:05Z</modified>\n                        <device>Jotta</device>\n                        <user>**obfuscated**</user>\n                    </mountPoint>\';\n\n        $serialized = new XmlResponseSerializer($body, \'auto\');\n        $this->assertSame($body, $serialized->getRaw());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::setAttributes\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes::get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes::all\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test005_attributes()\n    {\n        $body = \'<?xml version="1.0" encoding="UTF-8"?>\n                    <mountPoint time="2020-03-16-T09:47:15Z" host="**obfuscated**">\n                        <name xml:space="preserve">Archive</name>\n                        <path xml:space="preserve">/**obfuscated**/Jotta</path>\n                        <abspath xml:space="preserve">/**obfuscated**/Jotta</abspath>\n                        <size>383654</size>\n                        <modified>2020-03-12-T22:57:05Z</modified>\n                        <device>Jotta</device>\n                        <user>**obfuscated**</user>\n                    </mountPoint>\';\n\n        $serialized = XmlResponseSerializer::parse($body, \'auto\');\n\n        $this->assertInstanceOf(MountPoint::class, $serialized);\n        $this->assertInstanceOf(Attributes::class, $serialized->attributes);\n        $this->assertTrue(is_array($serialized->attributes->all()));\n        $this->assertSame(\'**obfuscated**\', $serialized->getAttribute(\'host\'));\n        $this->assertSame(\'**obfuscated**\', $serialized->attributes->all()[\'host\']);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::getAttribute\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007_no_attributes()\n    {\n        $body = \'<?xml version="1.0" encoding="UTF-8"?>\n                    <mountPoint time="2020-03-16-T09:47:15Z" host="**obfuscated**">\n                        <name xml:space="preserve">Archive</name>\n                        <path xml:space="preserve">/**obfuscated**/Jotta</path>\n                        <abspath xml:space="preserve">/**obfuscated**/Jotta</abspath>\n                        <size>383654</size>\n                        <modified>2020-03-12-T22:57:05Z</modified>\n                        <device>Jotta</device>\n                        <user>**obfuscated**</user>\n                    </mountPoint>\';\n\n        $serialized = XmlResponseSerializer::parse($body, \'auto\');\n\n        $this->assertNull($serialized->getAttribute(\'nonexisting\'));\n\n        $body = \'<?xml version="1.0" encoding="UTF-8"?>\n                    <mountPoint>\n                        <name xml:space="preserve">Archive</name>\n                        <path xml:space="preserve">/**obfuscated**/Jotta</path>\n                        <abspath xml:space="preserve">/**obfuscated**/Jotta</abspath>\n                        <size>383654</size>\n                        <modified>2020-03-12-T22:57:05Z</modified>\n                        <device>Jotta</device>\n                        <user>**obfuscated**</user>\n                    </mountPoint>\';\n\n        $serialized = XmlResponseSerializer::parse($body, \'auto\');\n\n        $this->assertNull($serialized->getAttribute(\'nonexisting\'));\n        $this->assertObjectNotHasAttribute(\'nonexisting\', $serialized);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes::__get\n     */\n    public function test007a_no_attributes()\n    {\n        $mock = \\Mockery::mock(Attributes::class);\n        $mock->makePartial();\n\n        $this->assertNull($mock->get(\'nonexistant\'));\n    }\n}\n',{},"php-jotta/tests/Unit/p_001_Architecture/Test003_XmlSerializerTest__php")