window.__NUXT__=function(e,t,s,a,n,i,o,p,c,l,r,d,h,m,u,$,g,y,k,f,x,v,M,R,C,z,_,T,S,E,N,F,b){return h.path="/",h.name="repository",h.type=a,h.children=[{path:"/ceidg-api",name:"ceidg-api",type:a,children:[{path:"/ceidg-api/src",name:"src",type:a,children:[{path:"/ceidg-api/src/Contracts",name:m,type:a,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:a,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:a,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:a,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:u,type:a,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:$,type:e,exclude:[{}],stacks:{language:l,icon:g}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:r,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:y,type:e,exclude:[{}],stacks:{language:r,icon:k}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:o,icon:f}},{path:"/ceidg-api/README.md",name:d,type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/ceidg-api/composer.json",name:x,type:e,exclude:[{}],stacks:{language:v,icon:M}},{path:"/ceidg-api/phpunit.xml.dist",name:R,type:e,exclude:[{}],stacks:{language:"xml",icon:C}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:a,children:[{path:"/php-jotta/src",name:"src",type:a,children:[{path:"/php-jotta/src/Client",name:"Client",type:a,children:[{path:"/php-jotta/src/Client/Contracts",name:m,type:a,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:a,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:a,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:z,type:a,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:a,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:u,type:a,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:a,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:z,type:a,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:_,name:T,type:e,exclude:[{}],stacks:{language:t,icon:s},content:S},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:a,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:a,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:$,type:e,exclude:[{}],stacks:{language:l,icon:g}},{path:"/php-jotta/.travis.yml",name:y,type:e,exclude:[{}],stacks:{language:r,icon:k}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/README.md",name:d,type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/composer.json",name:x,type:e,exclude:[{}],stacks:{language:v,icon:M}},{path:"/php-jotta/phpunit.xml.dist",name:R,type:e,exclude:[{}],stacks:{language:"xml",icon:C}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:a,children:[{path:"/varia/docker",name:"docker",type:a,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:a,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:"logos:docker-icon"}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:a,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:l,icon:f}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:a,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:a,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:E,icon:N}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:a,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:E,icon:N}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:n,type:a,children:[{path:"/varia/vue/calendar",name:"calendar",type:a,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:a,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:a,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:a,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:a,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:a,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:n,icon:i}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:d,type:e,exclude:[{}],stacks:{language:o,icon:c}}],h.exclude=[{}],h.yaml={},F.path=_,F.name=T,F.type=e,F.exclude=[{}],F.stacks={language:t,icon:s},F.content=S,{layout:"default",data:[{tree:h,pathNode:F,pathMatch:b}],fetch:[],error:p,state:{auth:{token:p,visitor:p,word:p},layout:{loading:{icon:p,name:p},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:h,pathMatch:b,pathNode:F}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_001_Architecture/Test005_XmlNamespacesTest__php"}}("file","php","logos:php","dir","vue","logos:vue","markdown",null,"ri:markdown-fill","yaml","YAML","README.md",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","bx:bxs-file-blank","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","Test005_XmlNamespacesTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_001_Architecture;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User;\nuse Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test005_XmlNamespacesTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::file\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::currentRevision\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Revision::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test001_current_revision()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->file();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n\n        $currentRevision = $serialized->getCurrentRevision();\n\n        $this->assertIsInt($currentRevision->getNumber());\n        $this->assertIsInt($currentRevision->getSize());\n        $this->assertIsString($currentRevision->getState());\n        $this->assertIsString($currentRevision->getMd5());\n        $this->assertSame(32, strlen($currentRevision->getMd5()));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::device\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::__get\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test003_device()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->device();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Device::class, $serialized);\n        $this->assertIsArray($serialized->getMountPoints());\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getName());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007a_file()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'  => $md5,\n            'size' => $size,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertFalse($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getAttribute\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getMd5\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::getSize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test007b_file_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $md5 = md5(Str::random(32));\n        $size = rand(100, 1000000);\n\n        $body = $responseBodyMock->file([\n            'md5'     => $md5,\n            'size'    => $size,\n            'deleted' => time() - 120,\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertIsString($serialized->getPath());\n        $this->assertSame($serialized->getPath(), $serialized->path);\n        $this->assertInstanceOf(Revision::class, $serialized->getCurrentRevision());\n        $this->assertNotNull($serialized->getAttribute('uuid'));\n        $this->assertSame($md5, $serialized->getMd5());\n        $this->assertSame($size, $serialized->getSize());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::folder\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::getPath\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder::isDeleted\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test009_folder()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->folder(['deleted' => time()]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(Folder::class, $serialized);\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertIsString($serialized->getPath());\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::metadata()\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test011_metadata()\n    {\n        $body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <folder name=\"Somefolder\" time=\"2020-03-16-T13:59:17Z\" host=\"**obfuscated**\">\n                    <path xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</path>\n                    <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync</abspath>\n                    <folders>\n                        <folder name=\"Ideas\">\n                            <abspath xml:space=\"preserve\">/**obfuscated**/Jotta/Sync/Somefolder</abspath>\n                        </folder>\n                    </folders>\n                    <files>\n                    </files>\n                    <metadata first=\"\" max=\"\" total=\"8\" num_folders=\"1\" num_files=\"7\"/>\n                </folder>';\n\n        $folder = XmlResponseSerializer::parse($body, 'auto');\n        $this->assertInstanceOf(Metadata::class, $folder->getMetadata());\n        $metadata = $folder->getMetadata();\n\n        $this->assertSame(1, (int) $metadata->getAttribute('num_folders'));\n        $this->assertSame(7, (int) $metadata->getAttribute('num_files'));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::mountPoint\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test013_mount_point()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'folders' => [\n                ['name' => 'folder1'],\n                ['name' => 'folder2'],\n            ],\n            'files' => [\n                ['name' => 'file1.txt'],\n                ['name' => 'file2.txt'],\n            ],\n        ]);\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(MountPoint::class, $serialized);\n        $this->assertInstanceOf(\\DateTime::class, $serialized->getModified());\n        $this->assertIsInt($serialized->getSize());\n        $this->assertIsString($serialized->getPath());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ElementMapper::user\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::__call\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\User::xmlDeserialize\n     *\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test015_user()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        $body = $responseBodyMock->user();\n        $serialized = XmlResponseSerializer::parse($body, 'auto');\n\n        $this->assertInstanceOf(User::class, $serialized);\n        $this->assertIsInt($serialized->getUsage());\n        $this->assertIsInt($serialized->getMaxDevices());\n        $this->assertIsBool($serialized->getEnableFoldershare());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::__call\n     */\n    public function test017_method_not_exists()\n    {\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        try {\n            $mock->nonexisting();\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::castPrimitives()\n     *\n     * @throws \\ReflectionException\n     */\n    public function test019_cast_primitives()\n    {\n        $method = new \\ReflectionMethod(ResponseNamespace::class, 'castPrimitives');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(ResponseNamespace::class);\n        $mock->makePartial();\n\n        $datetime = new \\DateTime();\n\n        $casted = $method->invoke($mock, $datetime->format('Y-m-d-\\TH:i:sO'), 'datetime');\n        $this->assertInstanceOf(\\DateTime::class, $casted);\n        $this->assertSame($datetime->getTimestamp(), $casted->getTimestamp());\n\n        $primitives = [\n            [\n                'value'    => 1,\n                'cast'     => 'string',\n                'expected' => '1',\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'float',\n                'expected' => (float) 1,\n            ],\n            [\n                'value'    => 'true',\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 1,\n                'cast'     => 'bool',\n                'expected' => true,\n            ],\n            [\n                'value'    => 'false',\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n            [\n                'value'    => 0,\n                'cast'     => 'bool',\n                'expected' => false,\n            ],\n        ];\n\n        foreach ($primitives as $primitive) {\n            $casted = $method->invoke($mock, $primitive['value'], $primitive['cast']);\n            $this->assertSame($primitive['expected'], $casted);\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDeleted\n     *\n     * @throws JottaException\n     */\n    public function test021_file_is_deleted()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt']);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDeleted());\n\n        // DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDeleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test023_file_is_corrupt()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isCorrupt());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isCorrupt());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isCompleted\n     *\n     * @throws JottaException\n     */\n    public function test024_file_is_incomplete()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NOT CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isIncomplete());\n        $this->assertTrue($serialized->isCompleted());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_INCOMPLETE]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isIncomplete());\n        $this->assertFalse($serialized->isCompleted());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isValid\n     *\n     * @throws JottaException\n     */\n    public function test025_file_is_valid()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // VALID\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isValid());\n\n        // COMPLETED BUT DELETED\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'deleted' => time(), 'state' => File::STATE_COMPLETED]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n\n        // CORRUPT\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'state' => File::STATE_CORRUPT]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isValid());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isNewerThan\n     *\n     * @throws JottaException\n     */\n    public function test027_file_is_newer_than()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NEWER THAN LOCAL\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => time()]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn(time() - 1000);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isNewerThan($fileMock));\n\n        // SAME AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n\n        // OLDER AS LOCAL\n\n        $timestamp = time() - 60;\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'modified' => $timestamp - 10000]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getMTime')->andReturn($timestamp);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isNewerThan($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isDifferentThan\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File::isSameAs\n     *\n     * @throws JottaException\n     */\n    public function test029_file_is_different()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // SAME SIZE AND MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertFalse($serialized->isDifferentThan($fileMock));\n        $this->assertTrue($serialized->isSameAs($fileMock));\n\n        // SAME SIZE, DIFFERENT MD5\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size);\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n\n        // SAME MD5, DIFFERENT SIZE\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn($md5);\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n\n        // BOTH DIFFERENT\n\n        $size = rand(100, 100000);\n        $md5 = md5(Str::random(10000));\n\n        $body = $responseBodyMock->file(['name' => Str::random(12).'.txt', 'size' => $size, 'md5' => $md5]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->file()->get('somepath');\n\n        $fileMock = \\Mockery::mock(JFileInfo::class);\n        $fileMock->makePartial();\n        $fileMock->shouldAllowMockingProtectedMethods();\n        $fileMock->shouldReceive('getSize')->andReturn($size * rand(2, 10));\n        $fileMock->shouldReceive('getMd5')->andReturn(md5($md5));\n\n        $this->assertInstanceOf(File::class, $serialized);\n        $this->assertTrue($serialized->isDifferentThan($fileMock));\n        $this->assertFalse($serialized->isSameAs($fileMock));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test031_mount_point_get_username()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n        $body = $responseBodyMock->mountPoint();\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame($serialized->getUser(), $serialized->getUsername());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::xmlDeserialize\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getWithContents\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUser\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint::getUsername\n     *\n     * @throws JottaException\n     */\n    public function test033_mount_point_get_folders()\n    {\n        $responseBodyMock = new ResponseBodyMock();\n\n        // NO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => []]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->get('somepath');\n\n        $this->assertSame([], $serialized->getFolders());\n        $this->assertSame([], $serialized->getFiles());\n\n        // TWO FOLDERS, NO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertSame([], $serialized->getFiles());\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n\n        // TWO FOLDERS, TWO FILES\n\n        $body = $responseBodyMock->mountPoint(['files' => [['name' => '1.txt'], ['name' => '2.txt']], 'folders' => [['name' => '1'], ['name' => '2']]]);\n        $mock = $this->jottaMock($body);\n        $serialized = $mock->mountPoint()->getWithContents('somepath');\n\n        $this->assertIsArray($serialized->getFolders());\n        $this->assertCount(2, $serialized->getFolders());\n        $this->assertIsArray($serialized->getFiles());\n        $this->assertCount(2, $serialized->getFiles());\n    }\n}\n","javascript","logos:javascript",{},"php-jotta/tests/Unit/p_001_Architecture/Test005_XmlNamespacesTest__php")