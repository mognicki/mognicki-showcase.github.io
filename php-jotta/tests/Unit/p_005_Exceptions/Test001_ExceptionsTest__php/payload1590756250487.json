{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_005_Exceptions;\n\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Psr7\\Request;\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test001_ExceptionsTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer::getRootNamespace\n     */\n    public function test001_exception_parse()\n    {\n        $body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <error>\n                        <code>404</code>\n                        <message>no.jotta.backup.errors.NoSuchMountPointException</message>\n                        <reason>Not Found</reason>\n                        <cause></cause>\n                        <hostname></hostname>\n                        <x-id>156394042147</x-id>\n                    </error>';\n\n        try {\n            XmlResponseSerializer::parse($body, 'auto');\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertSame(404, $e->getCode());\n            $this->assertSame('no.jotta.backup.errors.NoSuchMountPointException', $e->getMessage());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException::__construct\n     */\n    public function test003_jotta_exception()\n    {\n        $string = Str::random(32);\n        $code = rand(400, 599);\n\n        try {\n            throw new JottaException($string, $code);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n            $this->assertSame($string, $e->getMessage());\n            $this->assertSame($code, $e->getCode());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::handleException\n     *\n     * @throws \\ReflectionException\n     */\n    public function test005_jotta_client_handle_exception_plain()\n    {\n        $method = new \\ReflectionMethod(JottaClient::class, 'handleException');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(JottaClient::class);\n        $mock->makePartial();\n\n        $exception = new \\Exception('message', 111);\n\n        try {\n            $method->invoke($mock, $exception);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(\\Exception::class, $e);\n            $this->assertSame('message', $e->getMessage());\n            $this->assertSame(111, $e->getCode());\n        }\n\n        $request = \\Mockery::mock(Request::class);\n        $request->makePartial();\n\n        $exception = new ServerException('message', $request);\n\n        try {\n            $method->invoke($mock, $exception);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(ServerException::class, $e);\n            $this->assertSame('message', $e->getMessage());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::handleException\n     */\n    public function test006a_jotta_client_test_xml_error_exception()\n    {\n        $body = (new ResponseBodyMock())->error();\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(\\Exception::class, function () use ($mock) {\n            $mock->account()->data();\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::serialize\n     *\n     * @throws \\ReflectionException\n     */\n    public function test007_scope_handle_other_exception()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'serialize');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        try {\n            $method->invoke($mock, ['a' => 'b', 'c' => 'd']);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(\\Exception::class, $e);\n        }\n    }\n}\n"}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/SOME.md","name":"SOME.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_005_Exceptions;\n\nuse GuzzleHttp\\Exception\\ServerException;\nuse GuzzleHttp\\Psr7\\Request;\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test001_ExceptionsTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\XmlResponseSerializer::getRootNamespace\n     */\n    public function test001_exception_parse()\n    {\n        $body = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                    <error>\n                        <code>404</code>\n                        <message>no.jotta.backup.errors.NoSuchMountPointException</message>\n                        <reason>Not Found</reason>\n                        <cause></cause>\n                        <hostname></hostname>\n                        <x-id>156394042147</x-id>\n                    </error>';\n\n        try {\n            XmlResponseSerializer::parse($body, 'auto');\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertSame(404, $e->getCode());\n            $this->assertSame('no.jotta.backup.errors.NoSuchMountPointException', $e->getMessage());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException::__construct\n     */\n    public function test003_jotta_exception()\n    {\n        $string = Str::random(32);\n        $code = rand(400, 599);\n\n        try {\n            throw new JottaException($string, $code);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(JottaException::class, $e);\n            $this->assertSame($string, $e->getMessage());\n            $this->assertSame($code, $e->getCode());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::handleException\n     *\n     * @throws \\ReflectionException\n     */\n    public function test005_jotta_client_handle_exception_plain()\n    {\n        $method = new \\ReflectionMethod(JottaClient::class, 'handleException');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(JottaClient::class);\n        $mock->makePartial();\n\n        $exception = new \\Exception('message', 111);\n\n        try {\n            $method->invoke($mock, $exception);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(\\Exception::class, $e);\n            $this->assertSame('message', $e->getMessage());\n            $this->assertSame(111, $e->getCode());\n        }\n\n        $request = \\Mockery::mock(Request::class);\n        $request->makePartial();\n\n        $exception = new ServerException('message', $request);\n\n        try {\n            $method->invoke($mock, $exception);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(ServerException::class, $e);\n            $this->assertSame('message', $e->getMessage());\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\JottaClient::handleException\n     */\n    public function test006a_jotta_client_test_xml_error_exception()\n    {\n        $body = (new ResponseBodyMock())->error();\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(\\Exception::class, function () use ($mock) {\n            $mock->account()->data();\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\Scope::serialize\n     *\n     * @throws \\ReflectionException\n     */\n    public function test007_scope_handle_other_exception()\n    {\n        $method = new \\ReflectionMethod(Scope::class, 'serialize');\n        $method->setAccessible(true);\n        $mock = \\Mockery::mock(Scope::class);\n        $mock->makePartial();\n\n        try {\n            $method->invoke($mock, ['a' => 'b', 'c' => 'd']);\n            $this->assertTrue(false);\n        } catch (\\Exception $e) {\n            $this->assertInstanceOf(\\Exception::class, $e);\n        }\n    }\n}\n"},"pathMatch":"php-jotta/tests/Unit/p_005_Exceptions/Test001_ExceptionsTest__php"}