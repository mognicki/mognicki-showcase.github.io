window.__NUXT__=function(e,t,a,n,p,s,o,i,c,l,r,h,d,u,m,g,$,f,y,_,x,T,k,v,S,C,E,j,N,M,P,J,I){return d.path="/",d.name="repository",d.type=n,d.children=[{path:"/ceidg-api",name:"ceidg-api",type:n,children:[{path:"/ceidg-api/src",name:"src",type:n,children:[{path:"/ceidg-api/src/Contracts",name:u,type:n,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:n,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:n,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:n,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:m,type:n,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:l,icon:$}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:r,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:f,type:e,exclude:[{}],stacks:{language:r,icon:y}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:o,icon:_}},{path:"/ceidg-api/README.md",name:h,type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/ceidg-api/composer.json",name:x,type:e,exclude:[{}],stacks:{language:T,icon:k}},{path:"/ceidg-api/phpunit.xml.dist",name:v,type:e,exclude:[{}],stacks:{language:"xml",icon:S}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:n,children:[{path:"/php-jotta/src",name:"src",type:n,children:[{path:"/php-jotta/src/Client",name:"Client",type:n,children:[{path:"/php-jotta/src/Client/Contracts",name:u,type:n,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:n,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:n,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:C,type:n,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:n,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:m,type:n,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:n,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:C,type:n,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:n,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:E,name:j,type:e,exclude:[{}],stacks:{language:t,icon:a},content:N},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:n,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:l,icon:$}},{path:"/php-jotta/.travis.yml",name:f,type:e,exclude:[{}],stacks:{language:r,icon:y}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/README.md",name:h,type:e,exclude:[{}],stacks:{language:o,icon:c}},{path:"/php-jotta/composer.json",name:x,type:e,exclude:[{}],stacks:{language:T,icon:k}},{path:"/php-jotta/phpunit.xml.dist",name:v,type:e,exclude:[{}],stacks:{language:"xml",icon:S}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:n,children:[{path:"/varia/docker",name:"docker",type:n,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:n,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:"logos:docker-icon"}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:n,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:l,icon:_}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:n,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:n,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:M,icon:P}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:n,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:M,icon:P}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:p,type:n,children:[{path:"/varia/vue/calendar",name:"calendar",type:n,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:n,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:n,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:n,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:n,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:n,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:p,icon:s}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:h,type:e,exclude:[{}],stacks:{language:o,icon:c}}],d.exclude=[{}],d.yaml={},J.path=E,J.name=j,J.type=e,J.exclude=[{}],J.stacks={language:t,icon:a},J.content=N,{layout:"default",data:[{tree:d,pathNode:J,pathMatch:I}],fetch:[],error:i,state:{auth:{token:i,visitor:i,word:i},layout:{loading:{icon:i,name:i},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:d,pathMatch:I,pathNode:J}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_003_Scopes/Test013_FileTest__php"}}("file","php","logos:php","dir","vue","logos:vue","markdown",null,"ri:markdown-fill","yaml","YAML","README.md",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","bx:bxs-file-blank","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","Test013_FileTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Ramsey\\Uuid\\Uuid;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\n/**\n * Class Test013_FileTest.\n */\nclass Test013_FileTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::get\n     *\n     * @throws JottaException\n     */\n    public function test001_get()\n    {\n        $filename = Str::random(12).'.txt';\n        $uuid = Uuid::uuid4()->toString();\n        $body = (new ResponseBodyMock())->file([\n            'name'       => $filename,\n            'uuid'       => $uuid,\n            'mountPoint' => Jotta::MOUNT_POINT_ARCHIVE,\n        ]);\n\n        $mock = $this->jottaMock($body);\n        $result = $mock->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->get($filename);\n        $this->assertInstanceOf(File::class, $result);\n        $this->assertSame($filename, $result->getName());\n        $this->assertSame($uuid, $result->getUuid());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::get\n     *\n     * @throws Exception\n     */\n    public function test003_get_if_folder_should_throw_exception()\n    {\n        $filename = Str::random(12).'.txt';\n        $body = (new ResponseBodyMock())->folder([\n            'name'       => $filename,\n            'mountPoint' => Jotta::MOUNT_POINT_ARCHIVE,\n        ]);\n\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(JottaException::class, function () use ($mock, $filename) {\n            $mock->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->get($filename);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws Exception\n     */\n    public function test005_upload_simple_small_file()\n    {\n        // generate random file, 256 KB\n        $filename = Str::random(16).'_005.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $fileinfo = JFileInfo::make($path);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        $this->assertSame($filename, $response->getName());\n        $this->assertSame($fileinfo->getMd5(), $response->getMd5());\n        $this->assertSame(256 * 1024, $response->getSize());\n\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws Exception\n     */\n    public function test007_upload_simple_large_file_25mb()\n    {\n        if (true !== getenv('JOTTA_TEST_LARGE_FILES')) {\n            $this->markTestSkipped('Testing large files upload skipped. Set JOTTA_TEST_LARGE_FILES env to true');\n        }\n\n        // generate random file, 25 MB\n        $filename = Str::random(16).'_007.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 25 * 1024 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $fileinfo = JFileInfo::make($path);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        $this->assertSame($filename, $response->getName());\n        $this->assertSame($fileinfo->getMd5(), $response->getMd5());\n        $this->assertSame(25 * 1024 * 1024, $response->getSize());\n\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws Exception\n     */\n    public function test009_upload_simple_large_file_100mb()\n    {\n        if (true !== getenv('JOTTA_TEST_LARGE_FILES')) {\n            $this->markTestSkipped('Testing large files upload skipped. Set JOTTA_TEST_LARGE_FILES env to true');\n        }\n\n        // generate random file, 100 MB\n        $filename = Str::random(16).'_009.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 100 * 1024 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $fileinfo = JFileInfo::make($path);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        $this->assertSame($filename, $response->getName());\n        $this->assertSame($fileinfo->getMd5(), $response->getMd5());\n        $this->assertSame(100 * 1024 * 1024, $response->getSize());\n\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     */\n    public function test011_upload_no_file_should_throw_exception()\n    {\n        $path = $this->tempPath(Str::random(16).'.php');\n        $this->shouldThrowException(JottaException::class, function () use ($path) {\n            $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     */\n    public function test011a_upload_no_file_should_throw_exception()\n    {\n        $path = $this->tempPath(Str::random(16).'.php');\n        $this->shouldThrowException(JottaException::class, function () use ($path) {\n            $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::move\n     *\n     * @throws JottaException\n     */\n    public function test013_move_file()\n    {\n        // generate random file, 256 KB\n        $filename = Str::random(16).'_013.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $fileinfo = JFileInfo::make($path);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        // test moving\n        $destinationPath = Str::random(12).'_13_to';\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($filename, $destinationPath);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$destinationPath, $response->getPath());\n        $this->assertSame($fileinfo->getMd5(), $response->getMd5());\n\n        $this->shouldThrowException(Exception::class, function () use ($filename) {\n            $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->get($filename);\n        });\n\n        $this->addToTempList($destinationPath.'/'.$filename, 'file');\n        $this->addToTempList($destinationPath, 'folder');\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::rename\n     *\n     * @throws JottaException\n     */\n    public function test013a_rename_file()\n    {\n        // generate random file, 256 KB\n        $filename = Str::random(16).'_013a.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $fileinfo = JFileInfo::make($path);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        // test moving\n        $destinationPath = Str::random(12).'_013a_to';\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->rename($filename, $destinationPath);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$destinationPath, $response->getPath());\n        $this->assertSame($fileinfo->getMd5(), $response->getMd5());\n\n        $this->shouldThrowException(Exception::class, function () use ($filename) {\n            $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->get($filename);\n        });\n\n        $this->addToTempList($destinationPath.'/'.$filename, 'file');\n        $this->addToTempList($destinationPath, 'folder');\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::move\n     *\n     * @throws JottaException\n     */\n    public function test013b_move_when_folder_should_throw_exception()\n    {\n        $folderName = Str::random(12).'_013b';\n        $response = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($folderName);\n        $this->assertInstanceOf(Folder::class, $response);\n\n        $this->shouldThrowException(JottaException::class, function () use ($folderName) {\n            $this->jotta()->directory()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, 'other/path');\n        });\n\n        $this->jotta()->directory()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::delete\n     *\n     * @throws JottaException\n     */\n    public function test015_delete_file()\n    {\n        // generate random file, 256 KB\n        $filename = Str::random(16).'_015.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n        $this->assertSame($filename, $response->getName());\n\n        // Delete tests\n        $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($filename);\n        $this->shouldThrowException(Exception::class, function () use ($filename) {\n            $file = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->get($filename);\n        });\n\n        $this->addToTempList($filename, 'file');\n\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::delete\n     *\n     * @throws Exception\n     */\n    public function test017_delete_when_deleted_should_throw_exception()\n    {\n        $filename = Str::random(12).'_017.txt';\n        $uuid = Uuid::uuid4()->toString();\n        $body = (new ResponseBodyMock())->file([\n            'name'       => $filename,\n            'uuid'       => $uuid,\n            'mountPoint' => Jotta::MOUNT_POINT_ARCHIVE,\n            'deleted'    => time() - 60 * 60 * 20,\n        ]);\n\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(Exception::class, function () use ($filename) {\n            $mock->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($filename);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::verify\n     *\n     * @throws JottaException\n     */\n    public function test019_verify_file()\n    {\n        // generate random file, 256 KB\n        $filename = Str::random(16).'_013.txt';\n        $path = $this->tempPath($filename);\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        //\n        $response = $this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->upload($path);\n        $this->assertInstanceOf(File::class, $response);\n        $this->assertTrue($response->isCompleted());\n\n        $this->assertTrue($this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->verify($filename, $path));\n        $this->assertTrue($this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->verify($filename));\n\n        $f = fopen($path, 'a');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        $this->assertFalse($this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->verify($filename, $path));\n        $this->assertTrue($this->jotta()->file()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->verify($filename));\n\n        $this->addToTempList($filename, 'file');\n        @unlink($path);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::verify\n     */\n    public function test021_verify_file_local_missing_should_throw_exception()\n    {\n        $filename = Str::random(16).'_013.txt';\n        $this->shouldThrowException(JottaException::class, function () use ($filename) {\n            $this->jotta()->file()->verify($filename, $filename);\n        });\n    }\n}\n","javascript","logos:javascript",{},"php-jotta/tests/Unit/p_003_Scopes/Test013_FileTest__php")