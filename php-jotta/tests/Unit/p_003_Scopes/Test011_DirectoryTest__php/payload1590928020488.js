window.__NUXT__=function(e,t,n,a,o,s,p,c,i,r,l,d,u,h,m,g,_,y,$,x,T,S,v,f,k,E,J,C,N,M,P,O,j,D,R){return y.path="/",y.name="repository",y.type=a,y.children=[{path:"/ceidg-api",name:"ceidg-api",type:a,children:[{path:"/ceidg-api/src",name:l,type:a,children:[{path:"/ceidg-api/src/Contracts",name:$,type:a,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:a,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:a,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:a,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:x,type:a,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:T,type:e,exclude:[{}],stacks:{language:h,icon:S}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:m,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:v,type:e,exclude:[{}],stacks:{language:m,icon:f}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:o,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:g,type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/ceidg-api/composer.json",name:d,type:e,exclude:[{}],stacks:{language:i,icon:u}},{path:"/ceidg-api/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/fivem",name:"fivem",type:a,children:[{path:"/fivem/src",name:l,type:a,children:[{path:"/fivem/src/FiveM.php",name:"FiveM.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/fivem/src/FiveMFacade.php",name:"FiveMFacade.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/fivem/src/FiveMServiceProvider.php",name:"FiveMServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:_}}],exclude:[{}],yaml:{}},{path:"/fivem/composer.json",name:d,type:e,exclude:[{}],stacks:{language:i,icon:u}}],exclude:[{}],yaml:{}},{path:"/mighty-text",name:"mighty-text",type:a,children:[{path:"/mighty-text/config",name:"config",type:a,children:[{path:"/mighty-text/config/mightytext.php",name:"mightytext.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src",name:l,type:a,children:[{path:"/mighty-text/src/Commands",name:"Commands",type:a,children:[{path:"/mighty-text/src/Commands/MightyTextSend.php",name:"MightyTextSend.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src/MightyText.php",name:"MightyText.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/mighty-text/src/MightyTextServiceProvider.php",name:"MightyTextServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:_}}],exclude:[{}],yaml:{}},{path:"/mighty-text/composer.json",name:d,type:e,exclude:[{}],stacks:{language:i,icon:u}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:a,children:[{path:"/php-jotta/docs",name:"docs",type:a,children:[{path:"/php-jotta/docs/003_Getting_started",name:"003_Getting_started",type:a,children:[{path:"/php-jotta/docs/003_Getting_started/001_Quickstart.md",name:"001_Quickstart.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/003_Getting_started/003_Installation.md",name:"003_Installation.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/003_Getting_started/007_Jottacloud_username.md",name:"007_Jottacloud_username.md",type:e,exclude:[{}],stacks:{language:o,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage",name:"004_Usage",type:a,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations",name:"003_API_operations",type:a,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations/003_Introduction.md",name:"003_Introduction.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/004_Usage/003_API_operations/005_Account.md",name:"005_Account.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/004_Usage/003_API_operations/007_Device.md",name:"007_Device.md",type:e,exclude:[{}],stacks:{language:o,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage/000_Overview.md",name:"000_Overview.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/004_Usage/005_Configuration.md",name:"005_Configuration.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/004_Usage/007_Constants.md",name:"007_Constants.md",type:e,exclude:[{}],stacks:{language:o,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/006_Contributions",name:"006_Contributions",type:a,children:[{path:"/php-jotta/docs/006_Contributions/000_Contributions.md",name:"000_Contributions.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/006_Contributions/001_Testing.md",name:"001_Testing.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/006_Contributions/002_Security.md",name:"002_Security.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/006_Contributions/999_Coverage.md",name:"999_Coverage.md",type:e,exclude:[{}],stacks:{language:o,icon:s}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/000_index.md",name:"000_index.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/001_Introduction.md",name:"001_Introduction.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/002_Features.md",name:"002_Features.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/007_Changelog.md",name:"007_Changelog.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/008_About_us.md",name:"008_About_us.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/docs/config.json",name:"config.json",type:e,exclude:[{}],stacks:{language:i,icon:"mdi:code-json"}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src",name:l,type:a,children:[{path:"/php-jotta/src/Client",name:"Client",type:a,children:[{path:"/php-jotta/src/Client/Contracts",name:$,type:a,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:a,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:a,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:a,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:J,type:a,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:a,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:x,type:a,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:a,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:J,type:a,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:a,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:a,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:C,name:N,type:e,exclude:[{}],stacks:{language:t,icon:n},content:M},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:a,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:a,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:T,type:e,exclude:[{}],stacks:{language:h,icon:S}},{path:"/php-jotta/.travis.yml",name:v,type:e,exclude:[{}],stacks:{language:m,icon:f}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/README.md",name:g,type:e,exclude:[{}],stacks:{language:o,icon:s}},{path:"/php-jotta/composer.json",name:d,type:e,exclude:[{}],stacks:{language:i,icon:u}},{path:"/php-jotta/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/sightengine",name:"sightengine",type:a,children:[{path:"/sightengine/src",name:l,type:a,children:[{path:"/sightengine/src/Check.php",name:"Check.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/sightengine/src/SightengineClient.php",name:"SightengineClient.php",type:e,exclude:[{}],stacks:{language:t,icon:n}},{path:"/sightengine/src/SightengineServiceProvider.php",name:"SightengineServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:_}}],exclude:[{}],yaml:{}},{path:"/sightengine/composer.json",name:d,type:e,exclude:[{}],stacks:{language:i,icon:u}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:a,children:[{path:"/varia/bash",name:"bash",type:a,children:[{path:"/varia/bash/my-portfolio",name:"my-portfolio",type:a,children:[{path:"/varia/bash/my-portfolio/up.sh",name:"up.sh",type:e,exclude:[{}],stacks:{language:"shell",icon:"simple-icons:gnubash"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/docker",name:"docker",type:a,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:a,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:P}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:a,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:h,icon:P}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:a,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:a,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:O,icon:j}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:a,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:O,icon:j}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/php",name:t,type:a,children:[{path:"/varia/php/european-bank-calculation",name:"european-bank-calculation",type:a,children:[{path:"/varia/php/european-bank-calculation/EuropeanBankProvider.php",name:"EuropeanBankProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:n}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:p,type:a,children:[{path:"/varia/vue/calendar",name:"calendar",type:a,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:a,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:a,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:a,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:a,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:a,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:g,type:e,exclude:[{}],stacks:{language:o,icon:s}}],y.exclude=[{}],y.yaml={},D.path=C,D.name=N,D.type=e,D.exclude=[{}],D.stacks={language:t,icon:n},D.content=M,{layout:"default",data:[{tree:y,pathNode:D,pathMatch:R}],fetch:[],error:r,state:{auth:{token:r,visitor:r,word:r},layout:{loading:{icon:r,name:r},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:y,pathMatch:R,pathNode:D}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_003_Scopes/Test011_DirectoryTest__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill","vue","logos:vue","json",null,"src","composer.json","logos:composer","yaml","YAML","README.md","logos:laravel",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","Test011_DirectoryTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Ramsey\\Uuid\\Uuid;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\JottaApiV1Mock;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\n/**\n * Class Test011_DirectoryTest.\n */\nclass Test011_DirectoryTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::directory\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getMode\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::setMode\n     *\n     * @throws JottaException\n     */\n    public function test001_modes_simple()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $scope = $client->directory();\n        $this->assertInstanceOf(DirectoryScope::class, $scope);\n        $this->assertNull($scope->getMode());\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $scope->setMode(DirectoryScope::MODE_FOLDER)->getMode());\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $scope->setMode(DirectoryScope::MODE_MOUNT_POINT)->getMode());\n\n        $mountPoint = $client->mountPoint();\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $mountPoint->getMode());\n        $folder = $client->folder();\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $folder->getMode());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::client\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     *\n     * @throws JottaException\n     */\n    public function test003_list_mount_points()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->folder()->all();\n        });\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMode(DirectoryScope::MODE_FOLDER)->all();\n        });\n\n        $this->shouldNotThrowException(function () use ($client) {\n            $client->mountPoint()->all();\n            $client->directory()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n            $client->folder()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n        });\n\n        $all = $client->mountPoint()->all();\n\n        $this->assertIsArray($all);\n\n        array_map(function ($item) {\n            $this->assertInstanceOf(MountPoint::class, $item);\n        }, $all);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     */\n    public function test005_delete_built_in_mount_point()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SYNC)->delete();\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getUuid\n     *\n     * @throws JottaException\n     */\n    public function test007_uuid()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n        $this->shouldThrowException(Exception::class, function () use ($directory) {\n            $directory->uuid('not-an-uuid');\n        });\n        $this->shouldNotThrowException(function () use ($directory) {\n            $uuid = Uuid::uuid4()->toString();\n            $directory->uuid($uuid);\n            $this->assertSame($uuid, $directory->getUuid());\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getRegex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::corrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::completed\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCompleted\n     *\n     * @throws JottaException\n     */\n    public function test009_other_configs()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n\n        $this->assertNull($directory->getUuid());\n        $this->assertNull($directory->getRegex());\n\n        $this->assertFalse($directory->withDeleted());\n        $this->assertFalse($directory->withCorrupt());\n        $this->assertTrue($directory->withCompleted());\n        $this->assertFalse($directory->withIncomplete());\n        $this->assertTrue($directory->deleted(true)->withDeleted());\n        $this->assertTrue($directory->corrupt(true)->withCorrupt());\n        $this->assertFalse($directory->completed(false)->withCompleted());\n        $this->assertTrue($directory->incomplete(true)->withIncomplete());\n\n        $regex = Str::random(32);\n        $this->assertSame($regex, $directory->regex($regex)->getRegex());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test011_get()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                    'deleted' => time(),\n                ],\n            ],\n            'files' => [\n                [\n                    'name' => 'one.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->get();\n        $this->assertInstanceOf(MountPoint::class, $result);\n        $this->assertSame(getenv('JOTTA_USERNAME'), $result->getUser());\n        $this->assertSame($result->getUser(), $result->getUsername());\n\n        $this->assertInstanceOf(Metadata::class, $result->getMetadata());\n\n        $this->assertFalse(isset($result->files));\n        $this->assertFalse(isset($result->folders));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test013_list_simple()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                ],\n            ],\n            'files' => [\n                [\n                    'name'    => 'one.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['somefolder' => []], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::incomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test016_list_with_incomplete()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->incomplete(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_regex()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name' => 'two.php',\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_uuid()\n    {\n        $uuids = [];\n        for ($i = 0; $i < 4; $i++) {\n            $uuids[] = Uuid::uuid4()->toString();\n        }\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[0],\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'uuid'    => $uuids[1],\n                ],\n                [\n                    'name'    => 'three.txt',\n                    'uuid'    => $uuids[2],\n                ],\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[3],\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->uuid($uuids[2])->list();\n\n        $this->assertSame(['three.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_regex_and_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.php',\n                    'deleted' => time(),\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test017_create_folder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_017';\n        $response = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($folderName, $response->getName());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test019_create_subfolder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_019';\n        $subfolderName = md5(file_get_contents(__FILE__)).'_sub019';\n        $response = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName.'/'.$subfolderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($subfolderName, $response->getName());\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$folderName, $response->getPath());\n\n        // Get the root folder\n\n        $rootResponse = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->get($folderName);\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE, $rootResponse->getPath());\n        $this->assertSame(1, (int) $rootResponse->getMetadata()->getAttribute('num_folders'));\n\n        $this->addToTempList($folderName, 'folder');\n        $this->addToTempList($subfolderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws JottaException\n     */\n    public function test021_delete_folder()\n    {\n        // first, create\n        $folderName = md5(file_get_contents(__FILE__)).'_021';\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($folderName);\n\n        // check if created\n        $this->assertSame($folderName, $created->getName());\n\n        // delete\n        $deleted = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        $this->assertSame($folderName, $deleted->getName());\n        $this->assertTrue($deleted->isDeleted());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws Exception\n     */\n    public function test021a_delete_deleted_folder_should_throw_exception()\n    {\n        $folderName = Str::random(12);\n        $body = (new ResponseBodyMock())->folder([\n            'name'    => $folderName,\n            'deleted' => time() - 60 * 60 * 24 * 17,\n        ]);\n        $mock = $this->jottaMock($body);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock, $folderName) {\n            $mock->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test023_move_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::rename\n     *\n     * @throws JottaException\n     */\n    public function test023a_rename_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->rename($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test025_move_folder_different_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_025_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_025_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_025_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved, Jotta::MOUNT_POINT_SHARED);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_SHARED.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootFrom, 'folder');\n        $this->addToTempList($rootFrom.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootTo.'/'.$moved, 'folder', Jotta::MOUNT_POINT_SHARED);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_no_folder()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026a_move_should_throw_exception_is_a_file()\n    {\n        $body = (new ResponseBodyMock())->file();\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $mock->folder()->move(Str::random(32).'/'.Str::random(32), Str::random(32).'/'.Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_mount_point_mode()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::createMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     *\n     * @throws JottaException\n     */\n    public function test029_create_and_delete_mount_point()\n    {\n        // Initial number of mountpoints\n        $count = count($this->jotta()->mountPoint()->all());\n\n        $mountPointName = md5(file_get_contents(__FILE__)).'_029';\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->create();\n\n        $this->assertInstanceOf(MountPoint::class, $response);\n        $this->assertSame($mountPointName, $response->getName());\n\n        // delete\n\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->delete();\n        $this->assertInstanceOf(Device::class, $response);\n\n        // Assert number of mountpoints\n        $this->assertSame($count, count($this->jotta()->mountPoint()->all()));\n    }\n}\n","logos:docker-icon","javascript","logos:javascript",{},"php-jotta/tests/Unit/p_003_Scopes/Test011_DirectoryTest__php")