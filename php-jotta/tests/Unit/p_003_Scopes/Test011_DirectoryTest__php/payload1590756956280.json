{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Ramsey\\Uuid\\Uuid;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\JottaApiV1Mock;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\n/**\n * Class Test011_DirectoryTest.\n */\nclass Test011_DirectoryTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::directory\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getMode\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::setMode\n     *\n     * @throws JottaException\n     */\n    public function test001_modes_simple()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $scope = $client->directory();\n        $this->assertInstanceOf(DirectoryScope::class, $scope);\n        $this->assertNull($scope->getMode());\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $scope->setMode(DirectoryScope::MODE_FOLDER)->getMode());\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $scope->setMode(DirectoryScope::MODE_MOUNT_POINT)->getMode());\n\n        $mountPoint = $client->mountPoint();\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $mountPoint->getMode());\n        $folder = $client->folder();\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $folder->getMode());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::client\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     *\n     * @throws JottaException\n     */\n    public function test003_list_mount_points()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->folder()->all();\n        });\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMode(DirectoryScope::MODE_FOLDER)->all();\n        });\n\n        $this->shouldNotThrowException(function () use ($client) {\n            $client->mountPoint()->all();\n            $client->directory()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n            $client->folder()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n        });\n\n        $all = $client->mountPoint()->all();\n\n        $this->assertIsArray($all);\n\n        array_map(function ($item) {\n            $this->assertInstanceOf(MountPoint::class, $item);\n        }, $all);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     */\n    public function test005_delete_built_in_mount_point()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SYNC)->delete();\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getUuid\n     *\n     * @throws JottaException\n     */\n    public function test007_uuid()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n        $this->shouldThrowException(Exception::class, function () use ($directory) {\n            $directory->uuid('not-an-uuid');\n        });\n        $this->shouldNotThrowException(function () use ($directory) {\n            $uuid = Uuid::uuid4()->toString();\n            $directory->uuid($uuid);\n            $this->assertSame($uuid, $directory->getUuid());\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getRegex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::corrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::completed\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCompleted\n     *\n     * @throws JottaException\n     */\n    public function test009_other_configs()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n\n        $this->assertNull($directory->getUuid());\n        $this->assertNull($directory->getRegex());\n\n        $this->assertFalse($directory->withDeleted());\n        $this->assertFalse($directory->withCorrupt());\n        $this->assertTrue($directory->withCompleted());\n        $this->assertFalse($directory->withIncomplete());\n        $this->assertTrue($directory->deleted(true)->withDeleted());\n        $this->assertTrue($directory->corrupt(true)->withCorrupt());\n        $this->assertFalse($directory->completed(false)->withCompleted());\n        $this->assertTrue($directory->incomplete(true)->withIncomplete());\n\n        $regex = Str::random(32);\n        $this->assertSame($regex, $directory->regex($regex)->getRegex());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test011_get()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                    'deleted' => time(),\n                ],\n            ],\n            'files' => [\n                [\n                    'name' => 'one.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->get();\n        $this->assertInstanceOf(MountPoint::class, $result);\n        $this->assertSame(getenv('JOTTA_USERNAME'), $result->getUser());\n        $this->assertSame($result->getUser(), $result->getUsername());\n\n        $this->assertInstanceOf(Metadata::class, $result->getMetadata());\n\n        $this->assertFalse(isset($result->files));\n        $this->assertFalse(isset($result->folders));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test013_list_simple()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                ],\n            ],\n            'files' => [\n                [\n                    'name'    => 'one.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['somefolder' => []], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::incomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test016_list_with_incomplete()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->incomplete(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_regex()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name' => 'two.php',\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_uuid()\n    {\n        $uuids = [];\n        for ($i = 0; $i < 4; $i++) {\n            $uuids[] = Uuid::uuid4()->toString();\n        }\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[0],\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'uuid'    => $uuids[1],\n                ],\n                [\n                    'name'    => 'three.txt',\n                    'uuid'    => $uuids[2],\n                ],\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[3],\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->uuid($uuids[2])->list();\n\n        $this->assertSame(['three.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_regex_and_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.php',\n                    'deleted' => time(),\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test017_create_folder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_017';\n        $response = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($folderName, $response->getName());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test019_create_subfolder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_019';\n        $subfolderName = md5(file_get_contents(__FILE__)).'_sub019';\n        $response = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName.'/'.$subfolderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($subfolderName, $response->getName());\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$folderName, $response->getPath());\n\n        // Get the root folder\n\n        $rootResponse = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->get($folderName);\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE, $rootResponse->getPath());\n        $this->assertSame(1, (int) $rootResponse->getMetadata()->getAttribute('num_folders'));\n\n        $this->addToTempList($folderName, 'folder');\n        $this->addToTempList($subfolderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws JottaException\n     */\n    public function test021_delete_folder()\n    {\n        // first, create\n        $folderName = md5(file_get_contents(__FILE__)).'_021';\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($folderName);\n\n        // check if created\n        $this->assertSame($folderName, $created->getName());\n\n        // delete\n        $deleted = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        $this->assertSame($folderName, $deleted->getName());\n        $this->assertTrue($deleted->isDeleted());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws Exception\n     */\n    public function test021a_delete_deleted_folder_should_throw_exception()\n    {\n        $folderName = Str::random(12);\n        $body = (new ResponseBodyMock())->folder([\n            'name'    => $folderName,\n            'deleted' => time() - 60 * 60 * 24 * 17,\n        ]);\n        $mock = $this->jottaMock($body);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock, $folderName) {\n            $mock->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test023_move_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::rename\n     *\n     * @throws JottaException\n     */\n    public function test023a_rename_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->rename($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test025_move_folder_different_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_025_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_025_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_025_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved, Jotta::MOUNT_POINT_SHARED);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_SHARED.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootFrom, 'folder');\n        $this->addToTempList($rootFrom.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootTo.'/'.$moved, 'folder', Jotta::MOUNT_POINT_SHARED);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_no_folder()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026a_move_should_throw_exception_is_a_file()\n    {\n        $body = (new ResponseBodyMock())->file();\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $mock->folder()->move(Str::random(32).'/'.Str::random(32), Str::random(32).'/'.Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_mount_point_mode()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::createMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     *\n     * @throws JottaException\n     */\n    public function test029_create_and_delete_mount_point()\n    {\n        // Initial number of mountpoints\n        $count = count($this->jotta()->mountPoint()->all());\n\n        $mountPointName = md5(file_get_contents(__FILE__)).'_029';\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->create();\n\n        $this->assertInstanceOf(MountPoint::class, $response);\n        $this->assertSame($mountPointName, $response->getName());\n\n        // delete\n\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->delete();\n        $this->assertInstanceOf(Device::class, $response);\n\n        // Assert number of mountpoints\n        $this->assertSame($count, count($this->jotta()->mountPoint()->all()));\n    }\n}\n"},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/SOME.md","name":"SOME.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Ramsey\\Uuid\\Uuid;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Metadata;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\JottaClient;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\JottaApiV1Mock;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\n/**\n * Class Test011_DirectoryTest.\n */\nclass Test011_DirectoryTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::directory\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getMode\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::setMode\n     *\n     * @throws JottaException\n     */\n    public function test001_modes_simple()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n        $scope = $client->directory();\n        $this->assertInstanceOf(DirectoryScope::class, $scope);\n        $this->assertNull($scope->getMode());\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $scope->setMode(DirectoryScope::MODE_FOLDER)->getMode());\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $scope->setMode(DirectoryScope::MODE_MOUNT_POINT)->getMode());\n\n        $mountPoint = $client->mountPoint();\n        $this->assertSame(DirectoryScope::MODE_MOUNT_POINT, $mountPoint->getMode());\n        $folder = $client->folder();\n        $this->assertSame(DirectoryScope::MODE_FOLDER, $folder->getMode());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Jotta::client\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     *\n     * @throws JottaException\n     */\n    public function test003_list_mount_points()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->folder()->all();\n        });\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMode(DirectoryScope::MODE_FOLDER)->all();\n        });\n\n        $this->shouldNotThrowException(function () use ($client) {\n            $client->mountPoint()->all();\n            $client->directory()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n            $client->folder()->setMode(DirectoryScope::MODE_MOUNT_POINT)->all();\n        });\n\n        $all = $client->mountPoint()->all();\n\n        $this->assertIsArray($all);\n\n        array_map(function ($item) {\n            $this->assertInstanceOf(MountPoint::class, $item);\n        }, $all);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     */\n    public function test005_delete_built_in_mount_point()\n    {\n        $client = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'));\n\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->delete();\n        });\n        $this->shouldThrowException(JottaException::class, function () use ($client) {\n            $client->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SYNC)->delete();\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getUuid\n     *\n     * @throws JottaException\n     */\n    public function test007_uuid()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n        $this->shouldThrowException(Exception::class, function () use ($directory) {\n            $directory->uuid('not-an-uuid');\n        });\n        $this->shouldNotThrowException(function () use ($directory) {\n            $uuid = Uuid::uuid4()->toString();\n            $directory->uuid($uuid);\n            $this->assertSame($uuid, $directory->getUuid());\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getRegex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::corrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCorrupt\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::completed\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withCompleted\n     *\n     * @throws JottaException\n     */\n    public function test009_other_configs()\n    {\n        $directory = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))->directory();\n\n        $this->assertNull($directory->getUuid());\n        $this->assertNull($directory->getRegex());\n\n        $this->assertFalse($directory->withDeleted());\n        $this->assertFalse($directory->withCorrupt());\n        $this->assertTrue($directory->withCompleted());\n        $this->assertFalse($directory->withIncomplete());\n        $this->assertTrue($directory->deleted(true)->withDeleted());\n        $this->assertTrue($directory->corrupt(true)->withCorrupt());\n        $this->assertFalse($directory->completed(false)->withCompleted());\n        $this->assertTrue($directory->incomplete(true)->withIncomplete());\n\n        $regex = Str::random(32);\n        $this->assertSame($regex, $directory->regex($regex)->getRegex());\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::get\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test011_get()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                    'deleted' => time(),\n                ],\n            ],\n            'files' => [\n                [\n                    'name' => 'one.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->get();\n        $this->assertInstanceOf(MountPoint::class, $result);\n        $this->assertSame(getenv('JOTTA_USERNAME'), $result->getUser());\n        $this->assertSame($result->getUser(), $result->getUsername());\n\n        $this->assertInstanceOf(Metadata::class, $result->getMetadata());\n\n        $this->assertFalse(isset($result->files));\n        $this->assertFalse(isset($result->folders));\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\ResponseNamespace::except\n     * @covers \\Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device::xmlDeserialize\n     *\n     * @throws JottaException\n     * @throws Exception\n     */\n    public function test013_list_simple()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'folders' => [\n                [\n                    'name'    => 'somefolder',\n                ],\n            ],\n            'files' => [\n                [\n                    'name'    => 'one.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['somefolder' => []], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'deleted' => time(),\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::incomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withIncomplete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test016_list_with_incomplete()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->list();\n\n        $this->assertSame(['one.txt'], $result);\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'state' => File::STATE_INCOMPLETE,\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->incomplete(true)->list();\n\n        $this->assertSame(['one.txt', 'two.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_regex()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name' => 'two.php',\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::uuid\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_with_uuid()\n    {\n        $uuids = [];\n        for ($i = 0; $i < 4; $i++) {\n            $uuids[] = Uuid::uuid4()->toString();\n        }\n\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[0],\n                ],\n                [\n                    'name'    => 'two.txt',\n                    'uuid'    => $uuids[1],\n                ],\n                [\n                    'name'    => 'three.txt',\n                    'uuid'    => $uuids[2],\n                ],\n                [\n                    'name'    => 'one.txt',\n                    'uuid'    => $uuids[3],\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->uuid($uuids[2])->list();\n\n        $this->assertSame(['three.txt'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::list\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::regex\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::withDeleted\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::applyFilters\n     *\n     * @throws JottaException\n     */\n    public function test015_list_regex_and_deleted()\n    {\n        $body = (new ResponseBodyMock())->mountPoint([\n            'name'    => Jotta::MOUNT_POINT_SHARED,\n            'files'   => [\n                [\n                    'name'    => 'one.txt',\n                ],\n                [\n                    'name'    => 'two.php',\n                    'deleted' => time(),\n                ],\n                [\n                    'name' => 'three.php',\n                ],\n                [\n                    'name' => 'four.txt',\n                ],\n            ],\n        ]);\n\n        $mock = new JottaApiV1Mock($body);\n        $jotta = new JottaClient('a', 'b', $mock->getMock());\n        $result = $jotta->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_SHARED)->deleted(true)->regex('/.*\\.php$/')->list();\n\n        $this->assertSame(['two.php', 'three.php'], $result);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test017_create_folder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_017';\n        $response = Jotta::client(getenv('JOTTA_USERNAME'), getenv('JOTTA_PASSWORD'))\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($folderName, $response->getName());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     *\n     * @throws JottaException\n     */\n    public function test019_create_subfolder()\n    {\n        $folderName = md5(file_get_contents(__FILE__)).'_019';\n        $subfolderName = md5(file_get_contents(__FILE__)).'_sub019';\n        $response = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->create($folderName.'/'.$subfolderName);\n\n        $this->assertInstanceOf(Folder::class, $response);\n        $this->assertSame($subfolderName, $response->getName());\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$folderName, $response->getPath());\n\n        // Get the root folder\n\n        $rootResponse = $this->jotta()\n            ->folder()\n            ->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)\n            ->get($folderName);\n\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE, $rootResponse->getPath());\n        $this->assertSame(1, (int) $rootResponse->getMetadata()->getAttribute('num_folders'));\n\n        $this->addToTempList($folderName, 'folder');\n        $this->addToTempList($subfolderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws JottaException\n     */\n    public function test021_delete_folder()\n    {\n        // first, create\n        $folderName = md5(file_get_contents(__FILE__)).'_021';\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($folderName);\n\n        // check if created\n        $this->assertSame($folderName, $created->getName());\n\n        // delete\n        $deleted = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        $this->assertSame($folderName, $deleted->getName());\n        $this->assertTrue($deleted->isDeleted());\n\n        $this->addToTempList($folderName, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     *\n     * @throws Exception\n     */\n    public function test021a_delete_deleted_folder_should_throw_exception()\n    {\n        $folderName = Str::random(12);\n        $body = (new ResponseBodyMock())->folder([\n            'name'    => $folderName,\n            'deleted' => time() - 60 * 60 * 24 * 17,\n        ]);\n        $mock = $this->jottaMock($body);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock, $folderName) {\n            $mock->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->delete($folderName);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test023_move_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::rename\n     *\n     * @throws JottaException\n     */\n    public function test023a_rename_folder_same_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_023a_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->rename($rootFrom.'/'.$moved, $rootTo.'/'.$moved);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_ARCHIVE.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootTo.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootFrom, 'folder');\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     *\n     * @throws JottaException\n     */\n    public function test025_move_folder_different_mount_point()\n    {\n        $rootFrom = Str::random(6).md5(file_get_contents(__FILE__)).'_025_from';\n        $rootTo = Str::random(6).md5(file_get_contents(__FILE__)).'_025_to';\n        $moved = Str::random(6).md5(file_get_contents(__FILE__)).'_025_moved';\n\n        // first, create\n        $created = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->create($rootFrom.'/'.$moved);\n\n        // check if created\n        $this->assertSame($moved, $created->getName());\n\n        // move\n        $movingResult = $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($rootFrom.'/'.$moved, $rootTo.'/'.$moved, Jotta::MOUNT_POINT_SHARED);\n        $this->assertSame($moved, $movingResult->getName());\n        $this->assertSame('/'.getenv('JOTTA_USERNAME').'/'.Jotta::DEVICE_JOTTA.'/'.Jotta::MOUNT_POINT_SHARED.'/'.$rootTo, $movingResult->getPath());\n\n        $this->addToTempList($rootFrom, 'folder');\n        $this->addToTempList($rootFrom.'/'.$moved, 'folder');\n        $this->addToTempList($rootTo, 'folder');\n        $this->addToTempList($rootTo.'/'.$moved, 'folder', Jotta::MOUNT_POINT_SHARED);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_no_folder()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->folder()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026a_move_should_throw_exception_is_a_file()\n    {\n        $body = (new ResponseBodyMock())->file();\n        $mock = $this->jottaMock($body);\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $mock->folder()->move(Str::random(32).'/'.Str::random(32), Str::random(32).'/'.Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::move\n     */\n    public function test026_move_should_throw_exception_mount_point_mode()\n    {\n        $folderName = Str::random(32).'/'.Str::random(32);\n        $this->shouldThrowException(Exception::class, function () use ($folderName) {\n            $this->jotta()->mountPoint()->setMountPoint(Jotta::MOUNT_POINT_ARCHIVE)->move($folderName, Str::random(32));\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::all\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::create\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::createMountPoint\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::delete\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::deleteMountPoint\n     *\n     * @throws JottaException\n     */\n    public function test029_create_and_delete_mount_point()\n    {\n        // Initial number of mountpoints\n        $count = count($this->jotta()->mountPoint()->all());\n\n        $mountPointName = md5(file_get_contents(__FILE__)).'_029';\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->create();\n\n        $this->assertInstanceOf(MountPoint::class, $response);\n        $this->assertSame($mountPointName, $response->getName());\n\n        // delete\n\n        $response = $this->jotta()->directory()->setMountPoint($mountPointName)->delete();\n        $this->assertInstanceOf(Device::class, $response);\n\n        // Assert number of mountpoints\n        $this->assertSame($count, count($this->jotta()->mountPoint()->all()));\n    }\n}\n"},"pathMatch":"php-jotta/tests/Unit/p_003_Scopes/Test011_DirectoryTest__php"}