window.__NUXT__=function(e,t,a,p,s,n,c,o,i,l,r,h,d,u,g,m,y,x,_,$,T,R,C,E,k,S,j,f){return l.path="/",l.name="repository",l.type=p,l.children=[{path:"/ceidg-api",name:"ceidg-api",type:p,children:[{path:"/ceidg-api/src",name:"src",type:p,children:[{path:"/ceidg-api/src/Contracts",name:r,type:p,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:p,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:p,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:p,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:h,type:p,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:g}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:o,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:m,type:e,exclude:[{}],stacks:{language:o,icon:y}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:s,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/ceidg-api/composer.json",name:x,type:e,exclude:[{}],stacks:{language:_,icon:$}},{path:"/ceidg-api/phpunit.xml.dist",name:T,type:e,exclude:[{}],stacks:{language:"xml",icon:R}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:p,children:[{path:"/php-jotta/src",name:"src",type:p,children:[{path:"/php-jotta/src/Client",name:"Client",type:p,children:[{path:"/php-jotta/src/Client/Contracts",name:r,type:p,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:p,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:p,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:C,type:p,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:p,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:h,type:p,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:p,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:C,type:p,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:p,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:E,name:k,type:e,exclude:[{}],stacks:{language:t,icon:a},content:S}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:p,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:d,type:e,exclude:[{}],stacks:{language:u,icon:g}},{path:"/php-jotta/.travis.yml",name:m,type:e,exclude:[{}],stacks:{language:o,icon:y}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/php-jotta/composer.json",name:x,type:e,exclude:[{}],stacks:{language:_,icon:$}},{path:"/php-jotta/phpunit.xml.dist",name:T,type:e,exclude:[{}],stacks:{language:"xml",icon:R}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:p,children:[{path:"/varia/js",name:"js",type:p,children:[{path:"/varia/js/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:"javascript",icon:"logos:javascript"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:i,type:e,exclude:[{}],stacks:{language:s,icon:n}},{path:"/SOME.md",name:"SOME.md",type:e,exclude:[{}],stacks:{language:s,icon:n}}],l.exclude=[{}],l.yaml={},j.path=E,j.name=k,j.type=e,j.exclude=[{}],j.stacks={language:t,icon:a},j.content=S,{layout:"default",data:[{tree:l,pathNode:j,pathMatch:f}],fetch:[],error:c,state:{auth:{token:c,visitor:c,word:c},layout:{loading:{icon:c,name:c},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:l,pathMatch:f,pathNode:j}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_003_Scopes/Test015b_FolderRecursiveUploadTest__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill",null,"YAML","README.md",{},"Contracts","tests",".coveralls.yml","yaml","simple-icons:coveralls",".travis.yml","logos:travis-ci","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","Test015b_FolderRecursiveUploadTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\Support\\DirectoryScopeExtended;\n\nclass Test015b_FolderRecursiveUploadTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::getDirContents\n     */\n    public function test001_get_dir_contents()\n    {\n        $dirPath = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'src');\n\n        $directory = new DirectoryScopeExtended();\n\n        $results = [];\n        $directory->getDirContents($dirPath, $results);\n\n        $expected = [];\n        $this->getExpectedDirContents($dirPath, $expected);\n\n        $this->assertEqualsCanonicalizing($expected, $results);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::upload\n     */\n    public function test003_upload_no_path_should_throw_exception()\n    {\n        $path = realpath(__DIR__.DIRECTORY_SEPARATOR.Str::random(24));\n        $this->shouldThrowException(JottaException::class, function () use ($path) {\n            $this->jotta()->folder()->upload($path);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::upload\n     */\n    public function test005_upload_no_folder_should_throw_exception()\n    {\n        $path = realpath(__FILE__);\n        $this->shouldThrowException(JottaException::class, function () use ($path) {\n            $this->jotta()->folder()->upload($path);\n        });\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::upload\n     *\n     * @throws JottaException\n     */\n    public function test007_upload_folder_recursive_src()\n    {\n        // 1. Create remote folder for storing data\n        $localPath = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'src');\n        $folderName = Str::random(12).'_test007_upload_rec';\n\n        $remoteFolder = $this->jotta()->folder()->create($folderName);\n        $this->assertInstanceOf(Folder::class, $remoteFolder);\n\n        // 2. Try uploading the src folder contents\n        $result = $this->jotta()->folder()->upload($localPath, $folderName);\n\n        // 3. Start asserting\n        $expected = [];\n        $this->getExpectedDirContents($localPath, $expected);\n        foreach ($expected as $expectedPath => $expectedFolder) {\n            $expectedPath = $folderName.'/'.basename($localPath).str_replace($localPath, '', $expectedPath);\n\n            // 1. Assert folder exists\n            $folder = $this->jotta()->folder()->get($expectedPath);\n            $this->assertInstanceOf(Folder::class, $folder);\n\n            $filesCount = 0;\n\n            // 2. Assert folder has all files\n            foreach ($expectedFolder as $item) {\n                if ($item instanceof JFileInfo || $item instanceof \\SplFileInfo) {\n                    $expectedFilePath = $expectedPath.'/'.$item->getFilename();\n                    $this->assertTrue($this->jotta()->file()->verify($expectedFilePath, $item->getRealPath()));\n\n                    $filesCount++;\n                }\n            }\n\n            $files = $this->jotta()->folder()->getWithContents($expectedPath)->getFiles();\n            $this->assertSame($filesCount, count($files));\n        }\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope::listRecursive\n     *\n     * @throws JottaException\n     * @throws \\Sabre\\Xml\\ParseException\n     */\n    public function test009_list_recursive()\n    {\n        // 1. First, find folder from the previous test\n        $folders = $this->jotta()->mountPoint()->regex('/_test007_upload_rec$/')->list();\n        $this->assertTrue(count($folders) >= 1);\n\n        $localPath = realpath(__DIR__.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'src');\n        $localTree = [basename($localPath) => $this->getExpectedDirTree($localPath)];\n\n        $rootFolderName = array_keys($folders)[0];\n\n        $listRecursive = $this->jotta()->folder()->listRecursive($rootFolderName);\n        $this->assertSame($localTree, $listRecursive);\n\n        // 2. Tear down\n        $this->addToTempList($rootFolderName, 'folder');\n    }\n\n    /**\n     * @param $localPath\n     * @param array $tree\n     *\n     * @return array\n     */\n    protected function getExpectedDirTree($localPath, $tree = [])\n    {\n        $items = scandir($localPath);\n        foreach ($items as $item) {\n            if ($item === '.' || $item === '..') {\n                continue;\n            }\n\n            if (is_dir($localPath.DIRECTORY_SEPARATOR.$item)) {\n                $tree[$item] = $this->getExpectedDirTree($localPath.DIRECTORY_SEPARATOR.$item);\n            }\n\n            if (is_file($localPath.DIRECTORY_SEPARATOR.$item)) {\n                $tree[] = $item;\n            }\n        }\n\n        asort($tree);\n\n        return $tree;\n    }\n\n    /**\n     * @param $localPath\n     * @param array $expected\n     */\n    protected function getExpectedDirContents($localPath, &$expected = [])\n    {\n        $files = scandir($localPath);\n\n        foreach ($files as $key => $value) {\n            $path = realpath($localPath.DIRECTORY_SEPARATOR.$value);\n            if (!is_dir($path)) {\n                $expected[$localPath][] = (new JFileInfo($localPath.'/'.$value));\n            } elseif ('.' !== $value && '..' !== $value) {\n                $this->getExpectedDirContents($path, $expected);\n            }\n        }\n    }\n}\n",{},"php-jotta/tests/Unit/p_003_Scopes/Test015b_FolderRecursiveUploadTest__php")