{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Illuminate\\Support\\Str;\nuse Spatie\\Image\\Image;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test013a_FileDownloadTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test001_download()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_001_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_001_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test003_download_overwrite_never()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_003_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_003_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_NEVER));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test005_download_overwrite_always()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_005_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_005_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_ALWAYS);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007_download_overwrite_if_newer_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007a_download_overwrite_if_newer_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 0. Then, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER));\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertNotSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009_download_overwrite_if_different_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009a_download_overwrite_if_different_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        @mkdir($localDestFolder);\n        copy($localSourcePath, $localDestPath);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT));\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::thumbnail\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test017_download_thumbnail()\n    {\n        // 1. Create local image\n        $localFilename = Str::random(12).'.jpg';\n        $localPath = $this->tempPath($localFilename);\n\n        copy('https://picsum.photos/800/600', $localPath);\n        $fileinfo = JFileInfo::make($localPath);\n        $this->assertTrue($fileinfo->getSize() > 1);\n\n        // 2. Upload\n        $this->jotta()->file()->upload($localPath);\n        $this->assertTrue($this->jotta()->file()->verify($localFilename, $localPath));\n\n        // 3. Thumbnail size small (WS)\n        $localThumbnailWs = str_replace('.jpg', '_ws.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWs, Jotta::THUMBNAIL_SIZE_SMALL);\n        $this->assertTrue(file_exists($localThumbnailWs));\n        $image = Image::load($localThumbnailWs);\n        $this->assertSame(30, $image->getWidth());\n        $this->assertSame(30, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWs));\n\n        // 3. Thumbnail size medium (WM)\n        $localThumbnailWm = str_replace('.jpg', '_wm.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWm, Jotta::THUMBNAIL_SIZE_MEDIUM);\n        $this->assertTrue(file_exists($localThumbnailWm));\n        $image = Image::load($localThumbnailWm);\n        $this->assertSame(240, $image->getWidth());\n        $this->assertSame(240 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWm));\n\n        // 3. Thumbnail size large (WL)\n        $localThumbnailWl = str_replace('.jpg', '_wl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWl, Jotta::THUMBNAIL_SIZE_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWl));\n        $image = Image::load($localThumbnailWl);\n        $this->assertSame(560, $image->getWidth());\n        $this->assertSame(560 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWl));\n\n        // 3. Thumbnail size extra large (WXL)\n        $localThumbnailWxl = str_replace('.jpg', '_wxl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWxl, Jotta::THUMBNAIL_SIZE_EXTRA_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWxl));\n        $image = Image::load($localThumbnailWxl);\n        $this->assertSame(1024, $image->getWidth());\n        $this->assertSame(1024 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWxl));\n\n        // 99. Tear down\n        $this->addToTempList($localFilename, 'file');\n        @unlink($localThumbnailWs);\n        @unlink($localThumbnailWm);\n        @unlink($localThumbnailWl);\n        @unlink($localThumbnailWxl);\n        @unlink($this->tempPath($localFilename));\n    }\n}\n"},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"bx:bxs-file-blank"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Illuminate\\Support\\Str;\nuse Spatie\\Image\\Image;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test013a_FileDownloadTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test001_download()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_001_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_001_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test003_download_overwrite_never()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_003_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_003_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_NEVER));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test005_download_overwrite_always()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_005_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_005_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_ALWAYS);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007_download_overwrite_if_newer_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007a_download_overwrite_if_newer_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 0. Then, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER));\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertNotSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009_download_overwrite_if_different_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009a_download_overwrite_if_different_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        @mkdir($localDestFolder);\n        copy($localSourcePath, $localDestPath);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT));\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::thumbnail\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test017_download_thumbnail()\n    {\n        // 1. Create local image\n        $localFilename = Str::random(12).'.jpg';\n        $localPath = $this->tempPath($localFilename);\n\n        copy('https://picsum.photos/800/600', $localPath);\n        $fileinfo = JFileInfo::make($localPath);\n        $this->assertTrue($fileinfo->getSize() > 1);\n\n        // 2. Upload\n        $this->jotta()->file()->upload($localPath);\n        $this->assertTrue($this->jotta()->file()->verify($localFilename, $localPath));\n\n        // 3. Thumbnail size small (WS)\n        $localThumbnailWs = str_replace('.jpg', '_ws.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWs, Jotta::THUMBNAIL_SIZE_SMALL);\n        $this->assertTrue(file_exists($localThumbnailWs));\n        $image = Image::load($localThumbnailWs);\n        $this->assertSame(30, $image->getWidth());\n        $this->assertSame(30, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWs));\n\n        // 3. Thumbnail size medium (WM)\n        $localThumbnailWm = str_replace('.jpg', '_wm.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWm, Jotta::THUMBNAIL_SIZE_MEDIUM);\n        $this->assertTrue(file_exists($localThumbnailWm));\n        $image = Image::load($localThumbnailWm);\n        $this->assertSame(240, $image->getWidth());\n        $this->assertSame(240 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWm));\n\n        // 3. Thumbnail size large (WL)\n        $localThumbnailWl = str_replace('.jpg', '_wl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWl, Jotta::THUMBNAIL_SIZE_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWl));\n        $image = Image::load($localThumbnailWl);\n        $this->assertSame(560, $image->getWidth());\n        $this->assertSame(560 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWl));\n\n        // 3. Thumbnail size extra large (WXL)\n        $localThumbnailWxl = str_replace('.jpg', '_wxl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWxl, Jotta::THUMBNAIL_SIZE_EXTRA_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWxl));\n        $image = Image::load($localThumbnailWxl);\n        $this->assertSame(1024, $image->getWidth());\n        $this->assertSame(1024 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWxl));\n\n        // 99. Tear down\n        $this->addToTempList($localFilename, 'file');\n        @unlink($localThumbnailWs);\n        @unlink($localThumbnailWm);\n        @unlink($localThumbnailWl);\n        @unlink($localThumbnailWxl);\n        @unlink($this->tempPath($localFilename));\n    }\n}\n"},"pathMatch":"php-jotta/tests/Unit/p_003_Scopes/Test013a_FileDownloadTest__php"}