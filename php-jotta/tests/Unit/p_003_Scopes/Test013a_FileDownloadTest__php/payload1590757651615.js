window.__NUXT__=function(e,a,t,l,n,o,c,p,s,i,r,h,d,u,m,$,g,S,f,y,_,x,T,k,F,E,P,v,j,C,R,D,w){return d.path="/",d.name="repository",d.type=l,d.children=[{path:"/ceidg-api",name:"ceidg-api",type:l,children:[{path:"/ceidg-api/src",name:"src",type:l,children:[{path:"/ceidg-api/src/Contracts",name:u,type:l,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:l,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:l,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:l,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:m,type:l,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:$,type:e,exclude:[{}],stacks:{language:i,icon:g}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:r,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:S,type:e,exclude:[{}],stacks:{language:r,icon:f}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:c,icon:y}},{path:"/ceidg-api/README.md",name:h,type:e,exclude:[{}],stacks:{language:c,icon:s}},{path:"/ceidg-api/composer.json",name:_,type:e,exclude:[{}],stacks:{language:x,icon:T}},{path:"/ceidg-api/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:F}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:l,children:[{path:"/php-jotta/src",name:"src",type:l,children:[{path:"/php-jotta/src/Client",name:"Client",type:l,children:[{path:"/php-jotta/src/Client/Contracts",name:u,type:l,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:l,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:l,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:l,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:l,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:E,type:l,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:l,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:m,type:l,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:l,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:E,type:l,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:l,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:l,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:l,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:P,name:v,type:e,exclude:[{}],stacks:{language:a,icon:t},content:j},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:l,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:l,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:l,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:$,type:e,exclude:[{}],stacks:{language:i,icon:g}},{path:"/php-jotta/.travis.yml",name:S,type:e,exclude:[{}],stacks:{language:r,icon:f}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:c,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:c,icon:s}},{path:"/php-jotta/README.md",name:h,type:e,exclude:[{}],stacks:{language:c,icon:s}},{path:"/php-jotta/composer.json",name:_,type:e,exclude:[{}],stacks:{language:x,icon:T}},{path:"/php-jotta/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:F}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:l,children:[{path:"/varia/docker",name:"docker",type:l,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:l,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:"logos:docker-icon"}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:l,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:i,icon:y}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:l,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:l,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:C,icon:R}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:l,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:C,icon:R}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:n,type:l,children:[{path:"/varia/vue/calendar",name:"calendar",type:l,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:l,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:l,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:l,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:l,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:l,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:h,type:e,exclude:[{}],stacks:{language:c,icon:s}}],d.exclude=[{}],d.yaml={},D.path=P,D.name=v,D.type=e,D.exclude=[{}],D.stacks={language:a,icon:t},D.content=j,{layout:"default",data:[{tree:d,pathNode:D,pathMatch:w}],fetch:[],error:p,state:{auth:{token:p,visitor:p,word:p},layout:{loading:{icon:p,name:p},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:a}}}},tree:{path:{active:"",expanded:[""]},tree:d,pathMatch:w,pathNode:D}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_003_Scopes/Test013a_FileDownloadTest__php"}}("file","php","logos:php","dir","vue","logos:vue","markdown",null,"ri:markdown-fill","yaml","YAML","README.md",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","bx:bxs-file-blank","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","Test013a_FileDownloadTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Illuminate\\Support\\Str;\nuse Spatie\\Image\\Image;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\n\nclass Test013a_FileDownloadTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test001_download()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_001_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_001_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test003_download_overwrite_never()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_003_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_003_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_NEVER));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test005_download_overwrite_always()\n    {\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_005_from');\n        $localSourceFile = Str::random(12).'.txt';\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 2. Create local destination folder\n        $localDestFolder = $this->tempPath(Str::random(24).'_005_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 3a. In the meantime, create the local file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_ALWAYS);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007_download_overwrite_if_newer_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007a_download_overwrite_if_newer_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_007a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_007a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 0. Then, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER));\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertNotSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009_download_overwrite_if_different_success()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 0. First, create the local destination file\n        @mkdir($localDestFolder);\n        $f = fopen($localDestPath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        sleep(3);\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT);\n        $this->assertTrue(file_exists($localDestPath));\n        $this->assertSame(JFileInfo::make($localSourcePath)->getMd5(), JFileInfo::make($localDestPath)->getMd5());\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::download\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009a_download_overwrite_if_different_fail()\n    {\n        // 0. Create local destination folder\n        $localSourceFile = Str::random(12).'.txt';\n        $localDestFolder = $this->tempPath(Str::random(24).'_009a_to');\n        $localDestPath = $localDestFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        // 1. Create local source folder and file\n        $localSourceFolder = $this->tempPath(Str::random(24).'_009a_from');\n        $localSourcePath = $localSourceFolder.DIRECTORY_SEPARATOR.$localSourceFile;\n\n        @mkdir($localSourceFolder);\n        $f = fopen($localSourcePath, 'w');\n        for ($i = 0; $i < 256 * 1024; $i += 512) {\n            fwrite($f, Str::random(512));\n        }\n        fclose($f);\n\n        @mkdir($localDestFolder);\n        copy($localSourcePath, $localDestPath);\n\n        // 3. Upload\n        $this->jotta()->file()->upload($localSourcePath);\n        $this->assertTrue($this->jotta()->file()->verify($localSourceFile, $localSourcePath));\n\n        // 4. Try downloading\n        $this->assertNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_DIFFERENT));\n        $this->assertNotNull($this->jotta()->file()->download($localSourceFile, $localDestPath, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 99. Tear down\n        $this->addToTempList($localSourceFile, 'file');\n\n        @unlink($localSourcePath);\n        @unlink($localDestPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::thumbnail\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test017_download_thumbnail()\n    {\n        // 1. Create local image\n        $localFilename = Str::random(12).'.jpg';\n        $localPath = $this->tempPath($localFilename);\n\n        copy('https://picsum.photos/800/600', $localPath);\n        $fileinfo = JFileInfo::make($localPath);\n        $this->assertTrue($fileinfo->getSize() > 1);\n\n        // 2. Upload\n        $this->jotta()->file()->upload($localPath);\n        $this->assertTrue($this->jotta()->file()->verify($localFilename, $localPath));\n\n        // 3. Thumbnail size small (WS)\n        $localThumbnailWs = str_replace('.jpg', '_ws.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWs, Jotta::THUMBNAIL_SIZE_SMALL);\n        $this->assertTrue(file_exists($localThumbnailWs));\n        $image = Image::load($localThumbnailWs);\n        $this->assertSame(30, $image->getWidth());\n        $this->assertSame(30, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWs));\n\n        // 3. Thumbnail size medium (WM)\n        $localThumbnailWm = str_replace('.jpg', '_wm.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWm, Jotta::THUMBNAIL_SIZE_MEDIUM);\n        $this->assertTrue(file_exists($localThumbnailWm));\n        $image = Image::load($localThumbnailWm);\n        $this->assertSame(240, $image->getWidth());\n        $this->assertSame(240 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWm));\n\n        // 3. Thumbnail size large (WL)\n        $localThumbnailWl = str_replace('.jpg', '_wl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWl, Jotta::THUMBNAIL_SIZE_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWl));\n        $image = Image::load($localThumbnailWl);\n        $this->assertSame(560, $image->getWidth());\n        $this->assertSame(560 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWl));\n\n        // 3. Thumbnail size extra large (WXL)\n        $localThumbnailWxl = str_replace('.jpg', '_wxl.jpg', $localPath);\n        $this->jotta()->file()->thumbnail($localFilename, $localThumbnailWxl, Jotta::THUMBNAIL_SIZE_EXTRA_LARGE);\n        $this->assertTrue(file_exists($localThumbnailWxl));\n        $image = Image::load($localThumbnailWxl);\n        $this->assertSame(1024, $image->getWidth());\n        $this->assertSame(1024 * 6 / 8, $image->getHeight());\n        $this->assertSame('image/jpeg', mime_content_type($localThumbnailWxl));\n\n        // 99. Tear down\n        $this->addToTempList($localFilename, 'file');\n        @unlink($localThumbnailWs);\n        @unlink($localThumbnailWm);\n        @unlink($localThumbnailWl);\n        @unlink($localThumbnailWxl);\n        @unlink($this->tempPath($localFilename));\n    }\n}\n","javascript","logos:javascript",{},"php-jotta/tests/Unit/p_003_Scopes/Test013a_FileDownloadTest__php")