window.__NUXT__=function(e,t,a,l,n,o,p,c,s,i,r,d,h,u,m,g,$,y,x,_,f,T,F,k,v,E,N,S,C,P,w,j,O){return h.path="/",h.name="repository",h.type=l,h.children=[{path:"/ceidg-api",name:"ceidg-api",type:l,children:[{path:"/ceidg-api/src",name:"src",type:l,children:[{path:"/ceidg-api/src/Contracts",name:u,type:l,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:l,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:l,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:l,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:m,type:l,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:i,icon:$}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:r,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:y,type:e,exclude:[{}],stacks:{language:r,icon:x}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:p,icon:_}},{path:"/ceidg-api/README.md",name:d,type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/ceidg-api/composer.json",name:f,type:e,exclude:[{}],stacks:{language:T,icon:F}},{path:"/ceidg-api/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:v}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:l,children:[{path:"/php-jotta/src",name:"src",type:l,children:[{path:"/php-jotta/src/Client",name:"Client",type:l,children:[{path:"/php-jotta/src/Client/Contracts",name:u,type:l,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:l,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:l,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:l,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:l,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:E,type:l,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:l,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:m,type:l,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:l,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:E,type:l,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:l,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:l,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:l,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:N,name:S,type:e,exclude:[{}],stacks:{language:t,icon:a},content:C},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:l,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:l,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:l,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:i,icon:$}},{path:"/php-jotta/.travis.yml",name:y,type:e,exclude:[{}],stacks:{language:r,icon:x}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/README.md",name:d,type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/composer.json",name:f,type:e,exclude:[{}],stacks:{language:T,icon:F}},{path:"/php-jotta/phpunit.xml.dist",name:k,type:e,exclude:[{}],stacks:{language:"xml",icon:v}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:l,children:[{path:"/varia/docker",name:"docker",type:l,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:l,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:"logos:docker-icon"}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:l,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:i,icon:_}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:l,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:l,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:P,icon:w}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:l,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:P,icon:w}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:n,type:l,children:[{path:"/varia/vue/calendar",name:"calendar",type:l,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:l,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:l,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:l,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:l,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:l,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:n,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:d,type:e,exclude:[{}],stacks:{language:p,icon:s}}],h.exclude=[{}],h.yaml={},j.path=N,j.name=S,j.type=e,j.exclude=[{}],j.stacks={language:t,icon:a},j.content=C,{layout:"default",data:[{tree:h,pathNode:j,pathMatch:O}],fetch:[],error:c,state:{auth:{token:c,visitor:c,word:c},layout:{loading:{icon:c,name:c},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:h,pathMatch:O,pathNode:j}},serverRendered:!0,routePath:"/php-jotta/tests/Unit/p_003_Scopes/Test013b_FileUploadTest__php"}}("file","php","logos:php","dir","vue","logos:vue","markdown",null,"ri:markdown-fill","yaml","YAML","README.md",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","bx:bxs-file-blank","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","Test013b_FileUploadTest.php","<?php\n\nnamespace Vegfund\\Jotta\\Tests\\Unit\\_003_Scopes;\n\nuse Illuminate\\Support\\Str;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Tests\\JottaTestCase;\nuse Vegfund\\Jotta\\Tests\\Mock\\ResponseBodyMock;\n\nclass Test013b_FileUploadTest extends JottaTestCase\n{\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test001_upload_when_path_is_a_folder()\n    {\n        // 1. Create a remote folder\n        $remoteFolder = Str::random(24).'_001';\n\n        $this->jotta()->folder()->create($remoteFolder);\n        $this->assertInstanceOf(Folder::class, $this->jotta()->folder()->get($remoteFolder));\n\n        // 2. Create a local file\n        $localFile = Str::random(24).'_001.txt';\n        $localPath = $this->tempPath($localFile);\n\n        file_put_contents($localPath, Str::random(1024));\n\n        // 3. Try uploading\n        $uploaded = $this->jotta()->file()->upload($localPath, $remoteFolder);\n        $this->assertInstanceOf(File::class, $uploaded);\n        $this->assertTrue($uploaded->isValid());\n        $this->assertTrue($this->jotta()->file()->verify($remoteFolder, $localPath));\n        $this->assertTrue(0 !== (int) preg_match('/.+'.$remoteFolder.'$/', $uploaded->getPath()));\n\n        // 4. Tear down\n\n        $this->addToTempList($remoteFolder.'/'.$localFile, 'file');\n        $this->addToTempList($remoteFolder, 'folder');\n        @unlink($localPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test003_upload_overwrite_always_success()\n    {\n        // 1. Create remote file\n        $localFile = Str::random(24).'_003.txt';\n        $localPath = $this->tempPath($localFile);\n\n        file_put_contents($localPath, Str::random(1024));\n\n        // 2. Try uploading\n        $uploaded = $this->jotta()->file()->upload($localPath, $localFile);\n        $this->assertInstanceOf(File::class, $uploaded);\n        $this->assertTrue($uploaded->isValid());\n        $this->assertTrue($this->jotta()->file()->verify($localFile, $localPath));\n\n        // 3. In the meantime, change the local file\n\n        file_put_contents($localPath, Str::random(1024));\n\n        // 4. Try uploading\n        $uploaded = $this->jotta()->file()->upload($localPath, $localFile, Jotta::FILE_OVERWRITE_ALWAYS);\n        $this->assertInstanceOf(File::class, $uploaded);\n        $this->assertTrue($uploaded->isValid());\n        $this->assertTrue($this->jotta()->file()->verify($localFile, $localPath));\n\n        $this->assertNull($this->jotta()->file()->upload($localPath, $localFile, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT));\n\n        // 5. Tear down\n        $this->addToTempList($localFile, 'file');\n        @unlink($localPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test005_upload_overwrite_never()\n    {\n        // 1. Create remote file\n        $localFile = Str::random(24).'_005.txt';\n        $localPath = $this->tempPath($localFile);\n\n        file_put_contents($localPath, Str::random(1024));\n\n        // 2. Try uploading\n        $uploaded = $this->jotta()->file()->upload($localPath, $localFile);\n        $this->assertInstanceOf(File::class, $uploaded);\n        $this->assertTrue($uploaded->isValid());\n        $this->assertTrue($this->jotta()->file()->verify($localFile, $localPath));\n\n        // 3. In the meantime, change the local file\n\n        file_put_contents($localPath, Str::random(1024));\n\n        // 4. Try uploading\n        $this->assertNull($this->jotta()->file()->upload($localPath, $localFile, Jotta::FILE_OVERWRITE_NEVER));\n\n        // 5. Tear down\n        $this->addToTempList($localFile, 'file');\n        @unlink($localPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test007_upload_overwrite_if_different_success()\n    {\n        // 1. Create local (older) file\n        $localOlderFile = Str::random(24).'_007_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = Str::random(24).'_007_newer.txt';\n        $localNewerPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 4. Upload newer file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localNewerFile);\n        });\n\n        // 5. Upload local (older) file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localOlderPath) {\n            $this->jotta()->file()->upload($localOlderPath, $localNewerFile, Jotta::FILE_OVERWRITE_IF_DIFFERENT);\n        });\n\n        $uploaded = $this->jotta()->file()->get($localNewerFile);\n        $this->assertSame(JFileInfo::make($localNewerPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test009_upload_overwrite_if_different_fail()\n    {\n        // 1. Create local file\n        $localOlderFile = Str::random(24).'_009_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = $localOlderFile;\n        $localNewerPath = $localOlderPath;\n\n        // 4. Upload newer file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localNewerFile);\n        });\n\n        // 5. Upload local (older) file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localOlderPath) {\n            $this->assertNull($this->jotta()->file()->upload($localOlderPath, $localNewerFile, Jotta::FILE_OVERWRITE_IF_DIFFERENT));\n        });\n\n        $uploaded = $this->jotta()->file()->get($localNewerFile);\n        $this->assertSame(JFileInfo::make($localNewerPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test011_upload_overwrite_if_newer_success()\n    {\n        // 1. Create local (older) file\n        $localOlderFile = Str::random(24).'_011_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = Str::random(24).'_011_newer.txt';\n        $localNewerPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 4. Upload older file\n        $this->shouldNotThrowException(function () use ($localOlderFile, $localOlderPath) {\n            $this->jotta()->file()->upload($localOlderPath, $localOlderFile);\n        });\n\n        // 5. Upload local (newer) file\n        $this->shouldNotThrowException(function () use ($localOlderFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localOlderFile, Jotta::FILE_OVERWRITE_IF_NEWER);\n        });\n\n        $uploaded = $this->jotta()->file()->get($localOlderFile);\n        $this->assertSame(JFileInfo::make($localOlderPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test013_upload_overwrite_if_newer_fail()\n    {\n        // 1. Create local file\n        $localOlderFile = Str::random(24).'_013_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = $localOlderFile;\n        $localNewerPath = $localOlderPath;\n\n        // 4. Upload newer file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localNewerFile);\n        });\n\n        // 5. Upload local (older) file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localOlderPath) {\n            $this->assertNull($this->jotta()->file()->upload($localOlderPath, $localNewerFile, Jotta::FILE_OVERWRITE_IF_NEWER));\n        });\n\n        $uploaded = $this->jotta()->file()->get($localNewerFile);\n        $this->assertSame(JFileInfo::make($localNewerPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::makeUpload\n     *\n     * @throws \\Vegfund\\Jotta\\Client\\Exceptions\\JottaException\n     */\n    public function test015_upload_overwrite_if_different_or_newer_success()\n    {\n        // DIFFERENT\n\n        // 1. Create local (older) file\n        $localOlderFile = Str::random(24).'_015_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = Str::random(24).'_015_newer.txt';\n        $localNewerPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 4. Upload newer file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localNewerFile);\n        });\n\n        // 5. Upload local (older) file\n        $this->shouldNotThrowException(function () use ($localNewerFile, $localOlderPath) {\n            $this->jotta()->file()->upload($localOlderPath, $localNewerFile, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT);\n        });\n\n        $uploaded = $this->jotta()->file()->get($localNewerFile);\n        $this->assertSame(JFileInfo::make($localNewerPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n\n        // NEWER\n\n        // 1. Create local (older) file\n        $localOlderFile = Str::random(24).'_011_older.txt';\n        $localOlderPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 2. Wait 3 seconds\n        sleep(3);\n\n        // 3. Create local (newer) file\n        $localNewerFile = Str::random(24).'_011_newer.txt';\n        $localNewerPath = $this->tempPath($localOlderFile);\n\n        file_put_contents($localOlderPath, Str::random(1024));\n\n        // 4. Upload older file\n        $this->shouldNotThrowException(function () use ($localOlderFile, $localOlderPath) {\n            $this->jotta()->file()->upload($localOlderPath, $localOlderFile);\n        });\n\n        // 5. Upload local (newer) file\n        $this->shouldNotThrowException(function () use ($localOlderFile, $localNewerPath) {\n            $this->jotta()->file()->upload($localNewerPath, $localOlderFile, Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT);\n        });\n\n        $uploaded = $this->jotta()->file()->get($localOlderFile);\n        $this->assertSame(JFileInfo::make($localOlderPath)->getMd5(), $uploaded->getMd5());\n\n        // 6. Tear down\n        $this->addToTempList($localOlderFile, 'file');\n        $this->addToTempList($localNewerFile, 'file');\n        @unlink($localNewerPath);\n        @unlink($localOlderPath);\n    }\n\n    /**\n     * @covers \\Vegfund\\Jotta\\Client\\Scopes\\FileScope::upload\n     */\n    public function test017_file_cannot_be_uploaded()\n    {\n        $body = (new ResponseBodyMock())->error();\n        $mock = $this->jottaMock($body);\n\n        $this->shouldThrowException(JottaException::class, function () use ($mock) {\n            $mock->file()->upload('local', 'remote');\n        });\n    }\n}\n","javascript","logos:javascript",{},"php-jotta/tests/Unit/p_003_Scopes/Test013b_FileUploadTest__php")