window.__NUXT__=function(e,t,a,n,p,i,s,o,c,r,l,d,u,h,m,g,y,x,f,v,_,k,$,T,j,A,C,E,S,R,b,M,N,P,U){return x.path="/",x.name="repository",x.type=n,x.children=[{path:"/ceidg-api",name:"ceidg-api",type:n,children:[{path:"/ceidg-api/src",name:l,type:n,children:[{path:"/ceidg-api/src/Contracts",name:f,type:n,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:n,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:n,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:n,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:v,type:n,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:_,type:e,exclude:[{}],stacks:{language:h,icon:k}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:m,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:$,type:e,exclude:[{}],stacks:{language:m,icon:T}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:p,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:g,type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/ceidg-api/composer.json",name:d,type:e,exclude:[{}],stacks:{language:c,icon:u}},{path:"/ceidg-api/phpunit.xml.dist",name:j,type:e,exclude:[{}],stacks:{language:"xml",icon:A}}],exclude:[{}],yaml:{}},{path:"/fivem",name:"fivem",type:n,children:[{path:"/fivem/src",name:l,type:n,children:[{path:"/fivem/src/FiveM.php",name:"FiveM.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/fivem/src/FiveMFacade.php",name:"FiveMFacade.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/fivem/src/FiveMServiceProvider.php",name:"FiveMServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/fivem/composer.json",name:d,type:e,exclude:[{}],stacks:{language:c,icon:u}}],exclude:[{}],yaml:{}},{path:"/mighty-text",name:"mighty-text",type:n,children:[{path:"/mighty-text/config",name:"config",type:n,children:[{path:"/mighty-text/config/mightytext.php",name:"mightytext.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src",name:l,type:n,children:[{path:"/mighty-text/src/Commands",name:"Commands",type:n,children:[{path:"/mighty-text/src/Commands/MightyTextSend.php",name:"MightyTextSend.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src/MightyText.php",name:"MightyText.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/mighty-text/src/MightyTextServiceProvider.php",name:"MightyTextServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/mighty-text/composer.json",name:d,type:e,exclude:[{}],stacks:{language:c,icon:u}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:n,children:[{path:"/php-jotta/docs",name:"docs",type:n,children:[{path:"/php-jotta/docs/003_Getting_started",name:"003_Getting_started",type:n,children:[{path:"/php-jotta/docs/003_Getting_started/001_Quickstart.md",name:"001_Quickstart.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/003_Getting_started/003_Installation.md",name:"003_Installation.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/003_Getting_started/007_Jottacloud_username.md",name:"007_Jottacloud_username.md",type:e,exclude:[{}],stacks:{language:p,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage",name:"004_Usage",type:n,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations",name:"003_API_operations",type:n,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations/003_Introduction.md",name:"003_Introduction.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/004_Usage/003_API_operations/005_Account.md",name:"005_Account.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/004_Usage/003_API_operations/007_Device.md",name:"007_Device.md",type:e,exclude:[{}],stacks:{language:p,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage/000_Overview.md",name:"000_Overview.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/004_Usage/005_Configuration.md",name:"005_Configuration.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/004_Usage/007_Constants.md",name:"007_Constants.md",type:e,exclude:[{}],stacks:{language:p,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/006_Contributions",name:"006_Contributions",type:n,children:[{path:"/php-jotta/docs/006_Contributions/000_Contributions.md",name:"000_Contributions.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/006_Contributions/001_Testing.md",name:"001_Testing.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/006_Contributions/002_Security.md",name:"002_Security.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/006_Contributions/999_Coverage.md",name:"999_Coverage.md",type:e,exclude:[{}],stacks:{language:p,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/000_index.md",name:"000_index.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/001_Introduction.md",name:"001_Introduction.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/002_Features.md",name:"002_Features.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/007_Changelog.md",name:"007_Changelog.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/008_About_us.md",name:"008_About_us.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/docs/config.json",name:"config.json",type:e,exclude:[{}],stacks:{language:c,icon:"mdi:code-json"}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src",name:l,type:n,children:[{path:"/php-jotta/src/Client",name:"Client",type:n,children:[{path:"/php-jotta/src/Client/Contracts",name:f,type:n,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:n,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:n,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:C,type:n,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:n,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:v,type:n,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:n,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:E,name:S,type:e,exclude:[{}],stacks:{language:t,icon:a},content:R}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:C,type:n,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:n,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:n,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:_,type:e,exclude:[{}],stacks:{language:h,icon:k}},{path:"/php-jotta/.travis.yml",name:$,type:e,exclude:[{}],stacks:{language:m,icon:T}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/README.md",name:g,type:e,exclude:[{}],stacks:{language:p,icon:i}},{path:"/php-jotta/composer.json",name:d,type:e,exclude:[{}],stacks:{language:c,icon:u}},{path:"/php-jotta/phpunit.xml.dist",name:j,type:e,exclude:[{}],stacks:{language:"xml",icon:A}}],exclude:[{}],yaml:{}},{path:"/sightengine",name:"sightengine",type:n,children:[{path:"/sightengine/src",name:l,type:n,children:[{path:"/sightengine/src/Check.php",name:"Check.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/sightengine/src/SightengineClient.php",name:"SightengineClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/sightengine/src/SightengineServiceProvider.php",name:"SightengineServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/sightengine/composer.json",name:d,type:e,exclude:[{}],stacks:{language:c,icon:u}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:n,children:[{path:"/varia/bash",name:"bash",type:n,children:[{path:"/varia/bash/my-portfolio",name:"my-portfolio",type:n,children:[{path:"/varia/bash/my-portfolio/up.sh",name:"up.sh",type:e,exclude:[{}],stacks:{language:"shell",icon:"simple-icons:gnubash"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/docker",name:"docker",type:n,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:n,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:b}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:n,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:h,icon:b}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:n,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:n,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:M,icon:N}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:n,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:M,icon:N}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/php",name:t,type:n,children:[{path:"/varia/php/european-bank-calculation",name:"european-bank-calculation",type:n,children:[{path:"/varia/php/european-bank-calculation/EuropeanBankProvider.php",name:"EuropeanBankProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:s,type:n,children:[{path:"/varia/vue/calendar",name:"calendar",type:n,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:n,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:n,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:n,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:n,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:n,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:s,icon:o}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:g,type:e,exclude:[{}],stacks:{language:p,icon:i}}],x.exclude=[{}],x.yaml={},P.path=E,P.name=S,P.type=e,P.exclude=[{}],P.stacks={language:t,icon:a},P.content=R,{layout:"default",data:[{tree:x,pathNode:P,pathMatch:U}],fetch:[],error:r,state:{auth:{token:r,visitor:r,word:r},layout:{loading:{icon:r,name:r},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:x,pathMatch:U,pathNode:P}},serverRendered:!0,routePath:"/php-jotta/tests/Mock/ResponseBodyMock__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill","vue","logos:vue","json",null,"src","composer.json","logos:composer","yaml","YAML","README.md","logos:laravel",{},"Contracts","tests",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","phpunit.xml.dist","mdi:xml","Support","/php-jotta/tests/Mock/ResponseBodyMock.php","ResponseBodyMock.php","<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Tests\\Mock;\n\nuse Exception;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Str;\nuse Ramsey\\Uuid\\Uuid;\nuse Sabre\\Xml\\Service;\nuse Vegfund\\Jotta\\Jotta;\n\n/**\n * Class ResponseBodyMock.\n */\nclass ResponseBodyMock\n{\n    /**\n     * @var Service\n     */\n    protected $service;\n\n    /**\n     * ResponseBodyMock constructor.\n     */\n    public function __construct()\n    {\n        $this->service = new Service();\n    }\n\n    /**\n     * @param $name\n     * @param $arguments\n     *\n     * @return string\n     */\n    public function __call($name, $arguments)\n    {\n        return $this->error();\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return string\n     */\n    public function user()\n    {\n        return $this->write('{}user', [\n            '{}username'           => getenv('JOTTA_USERNAME'),\n            '{}account-type'       => 'free',\n            '{}locked'             => false,\n            '{}capacity'           => -1,\n            '{}max-devices'        => -1,\n            '{}max-mobile-devices' => -1,\n            '{}usage'              => rand(1024, 99999999),\n            '{}read-locked'        => false,\n            '{}write-locked'       => false,\n            '{}quora-write-locked' => false,\n            '{}enable-sync'        => false,\n            '{}enable-foldershare' => true,\n            '{}business-role'      => 'ADMIN',\n            '{}business-name'      => 'Business name',\n            '{}devices'            => [\n                [\n                    '{}device' => [\n                        '{}name'         => 'Jotta',\n                        '{}display_name' => 'Jotta',\n                        '{}type'         => 'JOTTA',\n                        '{}sid'          => Uuid::uuid4()->toString(),\n                        '{}size'         => rand(1024, 99999999),\n                        '{}modified'     => strftime('%F-T%TZ', time() - rand(0, 60 * 60 * 24 * 365 * 4)),\n                    ],\n                ],\n                [\n                    '{}device' => [\n                        '{}name'         => 'Flysystem',\n                        '{}display_name' => 'Flysystem',\n                        '{}type'         => 'CLI',\n                        '{}sid'          => Uuid::uuid4()->toString(),\n                        '{}size'         => rand(1024, 99999999),\n                        '{}modified'     => '',\n                    ],\n                ],\n            ],\n        ]);\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return string\n     */\n    public function device()\n    {\n        return $this->write('{}device', [\n            '{}name'         => 'whatever',\n            '{}display_name' => 'whatever',\n            '{}sid'          => Uuid::uuid4()->toString(),\n            '{}size'         => rand(1024, 99999999),\n            '{}modified'     => strftime('%F-T%TZ', time() - rand(0, 60 * 60 * 24 * 365 * 4)),\n            '{}user'         => getenv('JOTTA_USERNAME'),\n            '{}mountPoints'  => [\n                [\n                    '{}mountPoint' => [\n                        [\n                            '{}name'     => 'Archive',\n                            '{}size'     => rand(1024, 99999999),\n                            '{}modified' => strftime('%F-T%TZ', time() - rand(0, 60 * 60 * 24 * 365 * 4)),\n                        ],\n                    ],\n                ],\n                [\n                    '{}mountPoint' => [\n                        [\n                            '{}name'     => 'Shared',\n                            '{}size'     => rand(1024, 99999999),\n                            '{}modified' => strftime('%F-T%TZ', time() - rand(0, 60 * 60 * 24 * 365 * 4)),\n                        ],\n                    ],\n                ],\n                [\n                    '{}mountPoint' => [\n                        [\n                            '{}name'     => 'Sync',\n                            '{}size'     => rand(1024, 99999999),\n                            '{}modified' => strftime('%F-T%TZ', time() - rand(0, 60 * 60 * 24 * 365 * 4)),\n                        ],\n                    ],\n                ],\n            ],\n            [\n                'name'       => 'metadata',\n                'attributes' => [\n                    'first'           => '',\n                    'max'             => '',\n                    'total'           => '3',\n                    'num_mountpoints' => '3',\n                ],\n            ],\n        ]);\n    }\n\n    /**\n     * @return string\n     */\n    public function error()\n    {\n        return $this->write('{}error', [\n            '{}code'     => 404,\n            '{}message'  => 'Error message',\n            '{}reason'   => 'Reason',\n            '{}cause'    => 'Cause',\n            '{}hostname' => Str::random(24),\n            '{}x-id'     => rand(102267900827, 992267900827),\n        ]);\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return string\n     */\n    public function mountPoint($options = [])\n    {\n        $definitions = [\n            '{}name'     => Arr::get($options, 'name', Jotta::MOUNT_POINT_ARCHIVE),\n            '{}path'     => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta',\n            '{}abspath'  => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta',\n            '{}size'     => Arr::get($options, 'size', rand(1024, 99999999)),\n            '{}modified' => strftime('%F-T%TZ', Arr::get($options, 'modified', time() - rand(0, 60 * 60 * 24 * 365 * 4))),\n            '{}device'   => 'Jotta',\n            '{}user'     => getenv('JOTTA_USERNAME'),\n            //            '{}folders'  => [\n            //                [\n            //                    '{}folder' => [\n            //                        'attributes' => [\n            //                            'name' => 'somefolder',\n            //                        ],\n            //                    ],\n            //                ],\n            //            ],\n        ];\n\n        $folders = Arr::get($options, 'folders', []);\n        if (count($folders) > 0) {\n            $definitions['{}folders'] = [];\n        }\n        foreach ($folders as $folder) {\n            $attributes = [\n                'name' => $folder['name'],\n            ];\n            if (isset($folder['deleted'])) {\n                $attributes['deleted'] = strftime('%F-T%TZ', $folder['deleted']);\n            }\n            $definitions['{}folders'][] = [\n                [\n                    'name'       => '{}folder',\n                    'attributes' => $attributes,\n                    'value'      => [\n                        '{}abspath' => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'name', Jotta::MOUNT_POINT_ARCHIVE),\n                    ],\n                ],\n            ];\n        }\n\n        $files = Arr::get($options, 'files', []);\n        if (count($files) > 0) {\n            $definitions['{}files'] = [];\n        }\n        foreach ($files as $file) {\n            $attributes = [\n                'name' => $file['name'],\n                'uuid' => Arr::get($file, 'uuid', Uuid::uuid4()->toString()),\n            ];\n            if (isset($file['deleted'])) {\n                $attributes['deleted'] = strftime('%F-T%TZ', $file['deleted']);\n            }\n            $definitions['{}files'][] = [\n                [\n                    'name'       => '{}file',\n                    'attributes' => $attributes,\n                    'value'      => [\n                        '{}abspath'         => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'name', Jotta::MOUNT_POINT_ARCHIVE),\n                        '{}currentRevision' => [\n                            'number'   => 1,\n                            'state'    => Arr::get($file, 'state', 'COMPLETED'),\n                            'created'  => strftime('%F-T%TZ', Arr::get($file, 'created', time() - 60 * 60)),\n                            'modified' => strftime('%F-T%TZ', Arr::get($file, 'modified', time() - 60 * 60)),\n                            'mime'     => Arr::get($file, 'mime', 'text/plain'),\n                            'size'     => Arr::get($file, 'size', strlen($file['name']) * 1024),\n                            'md5'      => Arr::get($file, 'md5', md5($file['name'])),\n                            'updated'  => strftime('%F-T%TZ', Arr::get($file, 'created', time() - 60)),\n                        ],\n                    ],\n                ],\n            ];\n        }\n\n        $definitions['{}metadata'] = [\n            'name'       => '{}metadata',\n            'attributes' => [\n                'first'      => '',\n                'max'        => '',\n                'total'      => (string) (count($files) + count($folders)),\n                'num_folder' => (string) count($folders),\n                'num_files'  => (string) count($files),\n            ],\n        ];\n\n        return $this->write('{}mountPoint', $definitions);\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return string\n     */\n    public function folder($options = [])\n    {\n        if (!isset($options['name'])) {\n            $options['name'] = Str::random(16);\n        }\n\n        $relativePath = Arr::get($options, 'path', '');\n\n        if ($relativePath !== '') {\n            if (0 !== strpos($relativePath, '/')) {\n                $relativePath = '/'.$relativePath;\n            }\n        }\n\n        $definitions = [\n            'name'       => '{}folder',\n            'attributes' => [\n                'name' => $options['name'],\n            ],\n            'value' => [\n                '{}path'        => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'mountPoint', Jotta::MOUNT_POINT_ARCHIVE).$relativePath,\n                '{}abspath'     => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'mountPoint', Jotta::MOUNT_POINT_ARCHIVE).$relativePath,\n            ],\n        ];\n\n        if (isset($options['deleted'])) {\n            $definitions['attributes']['deleted'] = strftime('%F-T%TZ', $options['deleted']);\n        }\n\n        $folders = Arr::get($options, 'folders', []);\n        if (count($folders) > 0) {\n            $definitions['value']['{}folders'] = [];\n        }\n        foreach ($folders as $folder) {\n            $attributes = [\n                'name' => $folder['name'],\n            ];\n            if (isset($folder['deleted'])) {\n                $attributes['deleted'] = strftime('%F-T%TZ', $folder['deleted']);\n            }\n            $definitions['value']['{}folders'][] = [\n                [\n                    'name'       => '{}folder',\n                    'attributes' => $attributes,\n                ],\n            ];\n        }\n\n        $files = Arr::get($options, 'files', []);\n        if (count($files) > 0) {\n            $definitions['value']['{}files'] = [];\n        }\n        foreach ($files as $file) {\n            $attributes = [\n                'name' => $file['name'],\n                'uuid' => Arr::get($file, 'uuid', Uuid::uuid4()->toString()),\n            ];\n            if (isset($file['deleted'])) {\n                $attributes['deleted'] = strftime('%F-T%TZ', $file['deleted']);\n            }\n            $definitions['value']['{}files'][] = [\n                [\n                    'name'       => '{}file',\n                    'attributes' => $attributes,\n                    'value'      => [\n                        '{}abspath'         => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'name', Jotta::MOUNT_POINT_ARCHIVE),\n                        '{}currentRevision' => [\n                            'number'   => 1,\n                            'state'    => Arr::get($file, 'state', 'COMPLETED'),\n                            'created'  => strftime('%F-T%TZ', Arr::get($file, 'created', time() - 60 * 60)),\n                            'modified' => strftime('%F-T%TZ', Arr::get($file, 'created', time() - 60 * 60)),\n                            'mime'     => Arr::get($file, 'mime', 'text/plain'),\n                            'size'     => Arr::get($file, 'size', strlen($file['name']) * 1024),\n                            'md5'      => Arr::get($file, 'md5', md5($file['name'])),\n                            'updated'  => strftime('%F-T%TZ', Arr::get($file, 'created', time() - 60)),\n                        ],\n                    ],\n                ],\n            ];\n        }\n\n        $definitions['value']['{}metadata'] = [\n            'name'       => '{}metadata',\n            'attributes' => [\n                'first'      => '',\n                'max'        => '',\n                'total'      => (string) (count($files) + count($folders)),\n                'num_folder' => (string) count($folders),\n                'num_files'  => (string) count($files),\n            ],\n        ];\n\n        return preg_replace('/\\<.*root\\>/', '', $this->write('{}root', $definitions));\n    }\n\n    /**\n     * @param array $options\n     *\n     * @throws Exception\n     *\n     * @return string\n     */\n    public function file($options = [])\n    {\n        if (!isset($options['name'])) {\n            $options['name'] = Str::random(16).'.txt';\n        }\n\n        $definitions = [\n            'name'       => '{}file',\n            'attributes' => [\n                'name' => $options['name'],\n                'uuid' => Arr::get($options, 'uuid', Uuid::uuid4()->toString()),\n                'time' => strftime('%F-T%TZ', time()),\n            ],\n            'value' => [\n                '{}path'     => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'mountPoint', Jotta::MOUNT_POINT_ARCHIVE),\n                '{}abspath'  => '/'.Arr::get($options, 'username', getenv('JOTTA_USERNAME')).'/Jotta/'.Arr::get($options, 'mountPoint', Jotta::MOUNT_POINT_ARCHIVE),\n            ],\n        ];\n\n        if (isset($options['deleted'])) {\n            $definitions['attributes']['deleted'] = strftime('%F-T%TZ', $options['deleted']);\n        }\n\n        $defaultRevisions = [\n            [\n                'number'   => 1,\n                'state'    => Arr::get($options, 'state', 'COMPLETED'),\n                'created'  => time() - 60 * 60,\n                'modified' => Arr::get($options, 'modified', time() - 60 * 60),\n                'mime'     => 'text/plain',\n                'size'     => Arr::get($options, 'size', strlen($options['name']) * 1024),\n                'md5'      => Arr::get($options, 'md5', md5($options['name'])),\n                'updated'  => time() - 60,\n            ],\n        ];\n\n        $revisions = Arr::get($options, 'revisions', $defaultRevisions);\n\n        $currentRevision = array_filter($defaultRevisions, function ($item) {\n            return $item['number'] === 1;\n        })[0];\n\n        $otherRevisions = array_filter($defaultRevisions, function ($item) {\n            return $item['number'] !== 1;\n        });\n\n        $definitions['value']['{}currentRevision'] = [\n            '{}number'   => (string) $currentRevision['number'],\n            '{}state'    => $currentRevision['state'],\n            '{}created'  => strftime('%F-T%TZ', $currentRevision['created']),\n            '{}modified' => strftime('%F-T%TZ', $currentRevision['modified']),\n            '{}mime'     => $currentRevision['mime'],\n            '{}size'     => (string) $currentRevision['size'],\n            '{}md5'      => (string) $currentRevision['md5'],\n            '{}updated'  => strftime('%F-T%TZ', $currentRevision['updated']),\n        ];\n\n        return preg_replace('/\\<.*root\\>/', '', $this->write('{}root', $definitions));\n    }\n\n    /**\n     * @param $rootElementName\n     * @param $data\n     *\n     * @return string\n     */\n    protected function write($rootElementName, $data)\n    {\n        return str_replace(' xmlns=\"\"', '', $this->service->write($rootElementName, $data));\n    }\n}\n","logos:docker-icon","javascript","logos:javascript",{},"php-jotta/tests/Mock/ResponseBodyMock__php")