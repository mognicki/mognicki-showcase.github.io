{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Client\\Scopes;\n\nuse Exception;\nuse function in_array;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Sabre\\Xml\\ParseException;\nuse Vegfund\\Jotta\\Client\\Contracts\\NamespaceContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Support\\OperationReport;\nuse Vegfund\\Jotta\\Traits\\DirectoryConfigTrait;\n\n/**\n * Class DirectoryScope.\n */\nclass DirectoryScope extends Scope\n{\n    use DirectoryConfigTrait;\n\n    const MODE_MOUNT_POINT = 1;\n\n    const MODE_FOLDER = 2;\n\n    /**\n     * @var int\n     */\n    protected $mode;\n\n    /**\n     * @param $mode\n     *\n     * @return $this\n     */\n    public function setMode($mode)\n    {\n        $this->mode = $mode;\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getMode()\n    {\n        return $this->mode;\n    }\n\n    /**\n     * @throws JottaException\n     *\n     * @return mixed\n     */\n    public function all()\n    {\n        if ($this->mode !== self::MODE_MOUNT_POINT) {\n            throw new JottaException('This is valid only for mount points.');\n        }\n\n        $device = $this->jottaClient->device()->get();\n\n        return $device->getMountPoints();\n    }\n\n    /**\n     * Get folder metadata.\n     *\n     * @param string $remotePath remote path\n     * @param array  $except\n     *\n     * @throws Exception\n     *\n     * @return MountPoint|Folder\n     */\n    public function get($remotePath = '', $except = ['files', 'folders'])\n    {\n        // Prepare relative path.\n        $normalizedPath = $this->normalizePathSegment($remotePath);\n\n        $response = $this->request(\n            $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $normalizedPath)\n        );\n\n        $serialized = $this->serialize($response);\n\n        if (null !== $serialized) {\n            return $serialized->except($except);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param string $remotePath\n     *\n     * @throws Exception\n     *\n     * @return MountPoint|Folder\n     */\n    public function getWithContents($remotePath = '')\n    {\n        return $this->get($remotePath, []);\n    }\n\n    /**\n     * Create a remote folder.\n     *\n     * @param string $remotePath remote path\n     *\n     * @throws Exception\n     *\n     * @return array|Folder|NamespaceContract|object|ResponseInterface|string\n     */\n    public function create($remotePath = null)\n    {\n        if ($this->mode === self::MODE_MOUNT_POINT || null === $remotePath) {\n            $remotePath = $remotePath ?: $this->mountPoint;\n\n            return $this->createMountPoint($remotePath);\n        }\n        // Prepare relative path.\n        $normalizedPath = $this->normalizePathSegment($remotePath);\n\n        // Prepare API path.\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $normalizedPath, ['mkDir' => 'true']);\n\n        $response = $this->request(\n            $requestPath,\n            'post'\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param $name\n     *\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    protected function createMountPoint($name)\n    {\n        // Prepare API path.\n        $requestPath = $this->getPath(Jotta::API_UPLOAD_URL, $this->device, $name);\n\n        $response = $this->getClient()->request(\n            $requestPath,\n            'post',\n            [\n                'JMd5'  => md5(''),\n                'JSize' => 0,\n            ]\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param string $remotePath\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function list($remotePath = '')\n    {\n        $directory = $this->getWithContents($remotePath);\n\n        $listing = [];\n\n        foreach ($this->applyFilters($directory->getFolders()) as $folder) {\n            $listing[$folder->getName()] = [];\n        }\n\n        foreach ($this->applyFilters($directory->getFiles()) as $file) {\n            $listing[] = $file->getName();\n        }\n\n        return $listing;\n    }\n\n    /**\n     * @param $localPath\n     * @param string $remotePath\n     * @param mixed  $overwriteMode\n     *\n     * @throws Exception\n     * @throws JottaException\n     *\n     * @return OperationReport\n     */\n    public function upload($localPath, $remotePath = '', $overwriteMode = Jotta::FILE_OVERWRITE_NEVER)\n    {\n        if (!file_exists($localPath) || !is_dir($localPath)) {\n            throw new JottaException('This is not a folder or it does not exist');\n        }\n\n        $report = new OperationReport();\n\n        $contents = [];\n        $this->getDirContents($localPath, $contents);\n\n        foreach ($contents as $path => $files) {\n            // Get path relative to script\n            $relativePath = $this->normalizePathSegment($remotePath.'/'.$this->getRelativePath($path));\n\n            $threwExceptions = $this->shouldThrowExceptions;\n            $this->withoutExceptions();\n\n            try {\n                $folder = $this->get($relativePath);\n            } catch (Exception $e) {\n                $folder = null;\n            }\n\n            if (null !== $folder) {\n                $report->folderExisting($relativePath);\n            } else {\n                $this->create($relativePath);\n                if (null !== ($folder = $this->get($relativePath))) {\n                    $report->folderCreated($relativePath);\n                } else {\n                    $report->folderTroublesome($relativePath, $files);\n                    continue;\n                }\n            }\n\n            if ($threwExceptions) {\n                $this->withExceptions();\n            }\n\n            $fileScope = $this->getClient()->file([\n                'device'      => $this->device,\n                'mount_point' => $this->mountPoint,\n                'base_path'   => $remotePath,\n            ])->withoutExceptions();\n\n            /*\n             * ADD FILES.\n             *\n             * @var \\SplFileInfo\n             */\n            foreach ($files as $file) {\n                $fileRelativePath = $this->normalizePathSegment($remotePath.'/'.$this->getRelativePath($path));\n\n                try {\n                    $fileScope->upload($file->getRealPath(), $fileRelativePath, $overwriteMode);\n                    $report->file($existed, $fileRelativePath, $overwriteMode);\n                } catch (Exception $e) {\n                    $report->fileTroublesome($fileRelativePath);\n                }\n            }\n        }\n\n        $report->stop();\n\n        return $report;\n    }\n\n    /**\n     * @param $remotePath\n     * @param array $recursive\n     * @param bool  $responseObjects\n     *\n     * @throws ParseException\n     *\n     * @return array\n     */\n    public function listRecursive($remotePath, $recursive = [], $responseObjects = false)\n    {\n        $folder = $this->getWithContents($remotePath);\n\n        foreach ($folder->getFolders() as $childFolder) {\n            if (is_array($childFolder)) {\n                $childFolder = $childFolder['value'];\n            }\n            if (!$folder->isDeleted()) {\n                if ([] !== ($subtree = $this->listRecursive($this->normalizePathSegment($remotePath).'/'.$this->normalizePathSegment($childFolder->name)))) {\n                    $recursive[$childFolder->name] = $subtree;\n                }\n            }\n        }\n\n        foreach ($folder->getFiles() as $file) {\n            if ($responseObjects) {\n                $recursive[] = $file;\n            } else {\n                $recursive[] = $file->getName();\n            }\n        }\n\n        asort($recursive);\n\n        return $recursive;\n    }\n\n    /**\n     * @param $pathFrom\n     * @param $pathTo\n     */\n    public function copy($pathFrom, $pathTo)\n    {\n    }\n\n    /**\n     * @param $pathFrom\n     * @param $pathTo\n     * @param null $mountPointTo\n     *\n     * @throws Exception\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function move($pathFrom, $pathTo, $mountPointTo = null)\n    {\n        if ($this->mode !== self::MODE_FOLDER) {\n            throw new JottaException('Not a folder mode.');\n        }\n\n        $folder = $this->get($pathFrom);\n        if (!($folder instanceof Folder)) {\n            throw new JottaException('This is not a remote folder.');\n        }\n\n        $mountPointTo = $mountPointTo ?: $this->mountPoint;\n\n        $fullPathTo = $this->getPath(null, $this->device, $mountPointTo, $pathTo);\n        if (0 !== strpos($fullPathTo, '/')) {\n            $fullPathTo = '/'.$fullPathTo;\n        }\n\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $pathFrom, [\n            'mvDir' => $fullPathTo,\n        ]);\n\n        $response = $this->request($requestPath, 'post');\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param $nameFrom\n     * @param $nameTo\n     *\n     * @throws Exception\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function rename($nameFrom, $nameTo)\n    {\n        return $this->move($nameFrom, $nameTo);\n    }\n\n    /**\n     * @param $path\n     *\n     * @throws Exception\n     * @throws JottaException\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function delete($path = null)\n    {\n        if ($this->mode === self::MODE_MOUNT_POINT || null === $path) {\n            return $this->deleteMountPoint();\n        }\n\n        $folder = $this->get($path);\n        if ($folder->isDeleted()) {\n            throw new JottaException('Deleting Trash items not supported.');\n        }\n\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $path, [\n            'dlDir'  => 'true',\n            'method' => 'post',\n        ]);\n\n        $response = $this->request($requestPath, 'post');\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    public function deleteMountPoint()\n    {\n        $forbidden = [\n            Jotta::MOUNT_POINT_ARCHIVE,\n            Jotta::MOUNT_POINT_SHARED,\n            Jotta::MOUNT_POINT_SYNC,\n        ];\n\n        if (in_array($this->mountPoint, $forbidden, true)) {\n            throw new JottaException('The mount point '.$this->mountPoint.' cannot be deleted.');\n        }\n\n        $response = $this->request(\n            $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, null, ['rm' => 'true']),\n            'post'\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * Get the local folder contents.\n     *\n     * @param string $localPath path for the local directory\n     * @param array  $results   results array\n     */\n    protected function getDirContents($localPath, &$results = [])\n    {\n        $files = scandir($localPath);\n\n        foreach ($files as $key => $value) {\n            $path = realpath($localPath.DIRECTORY_SEPARATOR.$value);\n            if (!is_dir($path)) {\n                $results[$localPath][] = (new JFileInfo($localPath.'/'.$value));\n            } elseif ('.' !== $value && '..' !== $value) {\n                $this->getDirContents($path, $results);\n            }\n        }\n    }\n}\n"},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"bx:bxs-file-blank"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Client\\Scopes;\n\nuse Exception;\nuse function in_array;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Sabre\\Xml\\ParseException;\nuse Vegfund\\Jotta\\Client\\Contracts\\NamespaceContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\nuse Vegfund\\Jotta\\Support\\OperationReport;\nuse Vegfund\\Jotta\\Traits\\DirectoryConfigTrait;\n\n/**\n * Class DirectoryScope.\n */\nclass DirectoryScope extends Scope\n{\n    use DirectoryConfigTrait;\n\n    const MODE_MOUNT_POINT = 1;\n\n    const MODE_FOLDER = 2;\n\n    /**\n     * @var int\n     */\n    protected $mode;\n\n    /**\n     * @param $mode\n     *\n     * @return $this\n     */\n    public function setMode($mode)\n    {\n        $this->mode = $mode;\n\n        return $this;\n    }\n\n    /**\n     * @return mixed\n     */\n    public function getMode()\n    {\n        return $this->mode;\n    }\n\n    /**\n     * @throws JottaException\n     *\n     * @return mixed\n     */\n    public function all()\n    {\n        if ($this->mode !== self::MODE_MOUNT_POINT) {\n            throw new JottaException('This is valid only for mount points.');\n        }\n\n        $device = $this->jottaClient->device()->get();\n\n        return $device->getMountPoints();\n    }\n\n    /**\n     * Get folder metadata.\n     *\n     * @param string $remotePath remote path\n     * @param array  $except\n     *\n     * @throws Exception\n     *\n     * @return MountPoint|Folder\n     */\n    public function get($remotePath = '', $except = ['files', 'folders'])\n    {\n        // Prepare relative path.\n        $normalizedPath = $this->normalizePathSegment($remotePath);\n\n        $response = $this->request(\n            $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $normalizedPath)\n        );\n\n        $serialized = $this->serialize($response);\n\n        if (null !== $serialized) {\n            return $serialized->except($except);\n        }\n\n        return null;\n    }\n\n    /**\n     * @param string $remotePath\n     *\n     * @throws Exception\n     *\n     * @return MountPoint|Folder\n     */\n    public function getWithContents($remotePath = '')\n    {\n        return $this->get($remotePath, []);\n    }\n\n    /**\n     * Create a remote folder.\n     *\n     * @param string $remotePath remote path\n     *\n     * @throws Exception\n     *\n     * @return array|Folder|NamespaceContract|object|ResponseInterface|string\n     */\n    public function create($remotePath = null)\n    {\n        if ($this->mode === self::MODE_MOUNT_POINT || null === $remotePath) {\n            $remotePath = $remotePath ?: $this->mountPoint;\n\n            return $this->createMountPoint($remotePath);\n        }\n        // Prepare relative path.\n        $normalizedPath = $this->normalizePathSegment($remotePath);\n\n        // Prepare API path.\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $normalizedPath, ['mkDir' => 'true']);\n\n        $response = $this->request(\n            $requestPath,\n            'post'\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param $name\n     *\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    protected function createMountPoint($name)\n    {\n        // Prepare API path.\n        $requestPath = $this->getPath(Jotta::API_UPLOAD_URL, $this->device, $name);\n\n        $response = $this->getClient()->request(\n            $requestPath,\n            'post',\n            [\n                'JMd5'  => md5(''),\n                'JSize' => 0,\n            ]\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param string $remotePath\n     *\n     * @throws Exception\n     *\n     * @return array\n     */\n    public function list($remotePath = '')\n    {\n        $directory = $this->getWithContents($remotePath);\n\n        $listing = [];\n\n        foreach ($this->applyFilters($directory->getFolders()) as $folder) {\n            $listing[$folder->getName()] = [];\n        }\n\n        foreach ($this->applyFilters($directory->getFiles()) as $file) {\n            $listing[] = $file->getName();\n        }\n\n        return $listing;\n    }\n\n    /**\n     * @param $localPath\n     * @param string $remotePath\n     * @param mixed  $overwriteMode\n     *\n     * @throws Exception\n     * @throws JottaException\n     *\n     * @return OperationReport\n     */\n    public function upload($localPath, $remotePath = '', $overwriteMode = Jotta::FILE_OVERWRITE_NEVER)\n    {\n        if (!file_exists($localPath) || !is_dir($localPath)) {\n            throw new JottaException('This is not a folder or it does not exist');\n        }\n\n        $report = new OperationReport();\n\n        $contents = [];\n        $this->getDirContents($localPath, $contents);\n\n        foreach ($contents as $path => $files) {\n            // Get path relative to script\n            $relativePath = $this->normalizePathSegment($remotePath.'/'.$this->getRelativePath($path));\n\n            $threwExceptions = $this->shouldThrowExceptions;\n            $this->withoutExceptions();\n\n            try {\n                $folder = $this->get($relativePath);\n            } catch (Exception $e) {\n                $folder = null;\n            }\n\n            if (null !== $folder) {\n                $report->folderExisting($relativePath);\n            } else {\n                $this->create($relativePath);\n                if (null !== ($folder = $this->get($relativePath))) {\n                    $report->folderCreated($relativePath);\n                } else {\n                    $report->folderTroublesome($relativePath, $files);\n                    continue;\n                }\n            }\n\n            if ($threwExceptions) {\n                $this->withExceptions();\n            }\n\n            $fileScope = $this->getClient()->file([\n                'device'      => $this->device,\n                'mount_point' => $this->mountPoint,\n                'base_path'   => $remotePath,\n            ])->withoutExceptions();\n\n            /*\n             * ADD FILES.\n             *\n             * @var \\SplFileInfo\n             */\n            foreach ($files as $file) {\n                $fileRelativePath = $this->normalizePathSegment($remotePath.'/'.$this->getRelativePath($path));\n\n                try {\n                    $fileScope->upload($file->getRealPath(), $fileRelativePath, $overwriteMode);\n                    $report->file($existed, $fileRelativePath, $overwriteMode);\n                } catch (Exception $e) {\n                    $report->fileTroublesome($fileRelativePath);\n                }\n            }\n        }\n\n        $report->stop();\n\n        return $report;\n    }\n\n    /**\n     * @param $remotePath\n     * @param array $recursive\n     * @param bool  $responseObjects\n     *\n     * @throws ParseException\n     *\n     * @return array\n     */\n    public function listRecursive($remotePath, $recursive = [], $responseObjects = false)\n    {\n        $folder = $this->getWithContents($remotePath);\n\n        foreach ($folder->getFolders() as $childFolder) {\n            if (is_array($childFolder)) {\n                $childFolder = $childFolder['value'];\n            }\n            if (!$folder->isDeleted()) {\n                if ([] !== ($subtree = $this->listRecursive($this->normalizePathSegment($remotePath).'/'.$this->normalizePathSegment($childFolder->name)))) {\n                    $recursive[$childFolder->name] = $subtree;\n                }\n            }\n        }\n\n        foreach ($folder->getFiles() as $file) {\n            if ($responseObjects) {\n                $recursive[] = $file;\n            } else {\n                $recursive[] = $file->getName();\n            }\n        }\n\n        asort($recursive);\n\n        return $recursive;\n    }\n\n    /**\n     * @param $pathFrom\n     * @param $pathTo\n     */\n    public function copy($pathFrom, $pathTo)\n    {\n    }\n\n    /**\n     * @param $pathFrom\n     * @param $pathTo\n     * @param null $mountPointTo\n     *\n     * @throws Exception\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function move($pathFrom, $pathTo, $mountPointTo = null)\n    {\n        if ($this->mode !== self::MODE_FOLDER) {\n            throw new JottaException('Not a folder mode.');\n        }\n\n        $folder = $this->get($pathFrom);\n        if (!($folder instanceof Folder)) {\n            throw new JottaException('This is not a remote folder.');\n        }\n\n        $mountPointTo = $mountPointTo ?: $this->mountPoint;\n\n        $fullPathTo = $this->getPath(null, $this->device, $mountPointTo, $pathTo);\n        if (0 !== strpos($fullPathTo, '/')) {\n            $fullPathTo = '/'.$fullPathTo;\n        }\n\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $pathFrom, [\n            'mvDir' => $fullPathTo,\n        ]);\n\n        $response = $this->request($requestPath, 'post');\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param $nameFrom\n     * @param $nameTo\n     *\n     * @throws Exception\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function rename($nameFrom, $nameTo)\n    {\n        return $this->move($nameFrom, $nameTo);\n    }\n\n    /**\n     * @param $path\n     *\n     * @throws Exception\n     * @throws JottaException\n     *\n     * @return array|NamespaceContract|object|ResponseInterface|string\n     */\n    public function delete($path = null)\n    {\n        if ($this->mode === self::MODE_MOUNT_POINT || null === $path) {\n            return $this->deleteMountPoint();\n        }\n\n        $folder = $this->get($path);\n        if ($folder->isDeleted()) {\n            throw new JottaException('Deleting Trash items not supported.');\n        }\n\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $path, [\n            'dlDir'  => 'true',\n            'method' => 'post',\n        ]);\n\n        $response = $this->request($requestPath, 'post');\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    public function deleteMountPoint()\n    {\n        $forbidden = [\n            Jotta::MOUNT_POINT_ARCHIVE,\n            Jotta::MOUNT_POINT_SHARED,\n            Jotta::MOUNT_POINT_SYNC,\n        ];\n\n        if (in_array($this->mountPoint, $forbidden, true)) {\n            throw new JottaException('The mount point '.$this->mountPoint.' cannot be deleted.');\n        }\n\n        $response = $this->request(\n            $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, null, ['rm' => 'true']),\n            'post'\n        );\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * Get the local folder contents.\n     *\n     * @param string $localPath path for the local directory\n     * @param array  $results   results array\n     */\n    protected function getDirContents($localPath, &$results = [])\n    {\n        $files = scandir($localPath);\n\n        foreach ($files as $key => $value) {\n            $path = realpath($localPath.DIRECTORY_SEPARATOR.$value);\n            if (!is_dir($path)) {\n                $results[$localPath][] = (new JFileInfo($localPath.'/'.$value));\n            } elseif ('.' !== $value && '..' !== $value) {\n                $this->getDirContents($path, $results);\n            }\n        }\n    }\n}\n"},"pathMatch":"php-jotta/src/Client/Scopes/DirectoryScope__php"}