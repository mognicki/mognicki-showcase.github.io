window.__NUXT__=function(e,t,a,n,p,s,o,c,i,l,r,h,u,d,m,g,$,y,x,P,f,E,_,k,T,C,j,R){return l.path="/",l.name="repository",l.type=n,l.children=[{path:"/ceidg-api",name:"ceidg-api",type:n,children:[{path:"/ceidg-api/src",name:"src",type:n,children:[{path:"/ceidg-api/src/Contracts",name:r,type:n,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:n,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:n,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:n,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:h,type:n,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:u,type:e,exclude:[{}],stacks:{language:d,icon:m}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:c,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:g,type:e,exclude:[{}],stacks:{language:c,icon:$}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:p,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:i,type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/ceidg-api/composer.json",name:y,type:e,exclude:[{}],stacks:{language:x,icon:P}},{path:"/ceidg-api/phpunit.xml.dist",name:f,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:n,children:[{path:"/php-jotta/src",name:"src",type:n,children:[{path:"/php-jotta/src/Client",name:"Client",type:n,children:[{path:"/php-jotta/src/Client/Contracts",name:r,type:n,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:n,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:n,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:_,name:k,type:e,exclude:[{}],stacks:{language:t,icon:a},content:T},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:C,type:n,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:n,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:h,type:n,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:n,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:C,type:n,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:n,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:n,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:u,type:e,exclude:[{}],stacks:{language:d,icon:m}},{path:"/php-jotta/.travis.yml",name:g,type:e,exclude:[{}],stacks:{language:c,icon:$}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/README.md",name:i,type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/php-jotta/composer.json",name:y,type:e,exclude:[{}],stacks:{language:x,icon:P}},{path:"/php-jotta/phpunit.xml.dist",name:f,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:n,children:[{path:"/varia/js",name:"js",type:n,children:[{path:"/varia/js/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:"javascript",icon:"logos:javascript"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:i,type:e,exclude:[{}],stacks:{language:p,icon:s}},{path:"/SOME.md",name:"SOME.md",type:e,exclude:[{}],stacks:{language:p,icon:s}}],l.exclude=[{}],l.yaml={},j.path=_,j.name=k,j.type=e,j.exclude=[{}],j.stacks={language:t,icon:a},j.content=T,{layout:"default",data:[{tree:l,pathNode:j,pathMatch:R}],fetch:[],error:o,state:{auth:{token:o,visitor:o,word:o},layout:{loading:{icon:o,name:o},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:l,pathMatch:R,pathNode:j}},serverRendered:!0,routePath:"/php-jotta/src/Client/Scopes/FileScope__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill",null,"YAML","README.md",{},"Contracts","tests",".coveralls.yml","yaml","simple-icons:coveralls",".travis.yml","logos:travis-ci","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","/php-jotta/src/Client/Scopes/FileScope.php","FileScope.php","<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Client\\Scopes;\n\nuse Exception;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Vegfund\\Jotta\\Client\\Contracts\\NamespaceContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Folder;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Jotta;\nuse Vegfund\\Jotta\\Support\\JFileInfo;\n\n/**\n * Class FileScope.\n */\nclass FileScope extends Scope\n{\n    /**\n     * @param $remotePath\n     *\n     * @throws Exception\n     * @throws JottaException\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    public function get($remotePath)\n    {\n        $response = $this->request(\n            $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $remotePath)\n        );\n\n        $result = $this->serialize($response);\n\n        if (!($result instanceof File)) {\n            if (null !== $result) {\n                throw new JottaException('This is not a remote file.');\n            }\n\n            return null;\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param $remotePath\n     * @param null $localPath\n     *\n     * @throws Exception\n     *\n     * @return bool\n     *\n     * @see https://github.com/albertony/jafs/blob/master/JottacloudFileSystem/JaFS.cs (VerifyFile)\n     */\n    public function verify($remotePath, $localPath = null)\n    {\n        if (null === $localPath) {\n            // only check the remote file\n            $file = $this->get($remotePath);\n\n            return null !== $file && null !== $file->currentRevision && $file->isValid() && (null === $localPath || null !== $localPath && md5(file_get_contents($localPath)) === $file->currentRevision->md5);\n        } else {\n            if (!file_exists($localPath) || !is_file($localPath)) {\n                throw new JottaException('File does not exist or not a file.');\n            }\n\n            $fileInfo = JFileInfo::make($localPath);\n\n            $headers = [\n                'JMd5'      => $fileInfo->getMd5(),\n                'JSize'     => $fileInfo->getSize(),\n                'JCreated'  => $fileInfo->getCTime(),\n                'JModified' => $fileInfo->getMTime(),\n            ];\n\n            $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $remotePath, ['cphash' => 'true']);\n\n            try {\n                $serialized = $this->serialize($this->request($requestPath, 'post', $headers));\n\n                return true;\n            } catch (Exception $e) {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * @param $remotePath\n     * @param $localPath\n     * @param int $overwriteMode\n     *\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract|bool||null|File\n     */\n    public function download($remotePath, $localPath, $overwriteMode = Jotta::FILE_OVERWRITE_NEVER)\n    {\n        $file = $this->get($remotePath);\n\n        if (file_exists($localPath) && is_file($localPath)) {\n            $fileinfo = JFileInfo::make($localPath);\n\n            switch ($overwriteMode) {\n                case Jotta::FILE_OVERWRITE_NEVER:\n                    return null;\n                    break;\n                case Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT:\n                    if ($file->getMd5() === $fileinfo->getMd5() && !$file->isNewerThan($localPath)) {\n                        return null;\n                    }\n                    break;\n                case Jotta::FILE_OVERWRITE_IF_NEWER:\n                    if (!$file->isNewerThan($localPath)) {\n                        return null;\n                    }\n                    break;\n                case Jotta::FILE_OVERWRITE_IF_DIFFERENT:\n                    if ($file->getMd5() === $fileinfo->getMd5()) {\n                        return null;\n                    }\n                    break;\n            }\n        }\n\n        // Prepare API path.\n        $requestPath = $this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $remotePath, ['mode' => 'bin']);\n\n        @mkdir(dirname($localPath));\n\n        $f = fopen($localPath, 'w');\n\n        return $this->request($requestPath, 'get', [], ['save_to' => $f]);\n    }\n\n    /**\n     * @param $remotePath\n     * @param $localPath\n     * @param string $size\n     *\n     * @throws JottaException\n     * @throws Exception\n     *\n     * @return bool\n     */\n    public function thumbnail($remotePath, $localPath, $size = Jotta::THUMBNAIL_SIZE_MEDIUM)\n    {\n        @mkdir(dirname($localPath));\n        $f = fopen($localPath, 'w');\n\n        $this->request($this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $remotePath, ['mode' => 'thumb', 'ts' => $size]), 'get', [], ['save_to' => $f]);\n\n        return true;\n    }\n\n    /**\n     * @param $localPath\n     * @param $remotePath\n     * @param int $overwriteMode\n     *\n     * @throws JottaException\n     * @throws Exception\n     *\n     * @return array|bool|object|ResponseInterface|string|NamespaceContract\n     */\n    public function upload($localPath, $remotePath = '', $overwriteMode = Jotta::FILE_OVERWRITE_NEVER)\n    {\n        if (!file_exists($localPath) || !is_file($localPath)) {\n            throw new JottaException('File does not exist or not a file.');\n        }\n\n        if ($remotePath !== '') {\n            try {\n                $result = $this->serialize($this->request($this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $remotePath)));\n\n                if ($result instanceof File) {\n                    // overwriting\n                    $fileinfo = JFileInfo::make($localPath);\n\n                    switch ($overwriteMode) {\n                        case Jotta::FILE_OVERWRITE_NEVER:\n                            return null;\n                            break;\n                        case Jotta::FILE_OVERWRITE_IF_NEWER_OR_DIFFERENT:\n                            if ($result->getMd5() === $fileinfo->getMd5() && $result->isNewerThan($fileinfo)) {\n                                return null;\n                            }\n                            break;\n                        case Jotta::FILE_OVERWRITE_IF_NEWER:\n                            if ($result->isNewerThan($localPath)) {\n                                return null;\n                            }\n                            break;\n                        case Jotta::FILE_OVERWRITE_IF_DIFFERENT:\n                            if ($result->getMd5() === $fileinfo->getMd5()) {\n                                return null;\n                            }\n                            break;\n                    }\n                } elseif ($result instanceof Folder || $result instanceof MountPoint) {\n                    $remotePath = implode('/', [$remotePath, basename($localPath)]);\n                }\n            } catch (Exception $e) {\n                // File doesn't exist on remote storage\n            }\n        } else {\n            $remotePath = implode('/', [$remotePath, basename($localPath)]);\n        }\n\n        return $this->makeUpload($localPath, $remotePath);\n    }\n\n    /**\n     * @param $localPath\n     * @param $remotePath\n     *\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    protected function makeUpload($localPath, $remotePath)\n    {\n        $requestPath = $this->getPath(Jotta::API_UPLOAD_URL, $this->device, $this->mountPoint, $remotePath);\n        $file = JFileInfo::make($localPath);\n\n        $this->serialize($this->request(\n            $requestPath,\n            'post',\n            [\n                'JSize' => $file->getSize(),\n                'JMd5'  => $file->getMd5(),\n            ],\n            [\n                'multipart' => [\n                    [\n                        'name'     => $file->getFilename(),\n                        'contents' => fopen($file->getRealPath(), 'r'),\n                    ],\n                ],\n            ]\n        ));\n\n        if ($this->verify($remotePath, $localPath)) {\n            return $this->get($remotePath);\n        }\n\n        throw new JottaException('File cannot be uploaded.');\n    }\n\n    /**\n     * @param $pathFrom\n     * @param $pathTo\n     * @param null $mountPointTo\n     *\n     * @throws JottaException\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    public function move($pathFrom, $pathTo, $mountPointTo = null)\n    {\n        $file = $this->get($pathFrom);\n        if (!($file instanceof File)) {\n            throw new JottaException('This is not a remote file.');\n        }\n\n        $mountPointTo = $mountPointTo ?: $this->mountPoint;\n\n        $fullPathTo = $this->getPath(null, $this->device, $mountPointTo, $pathTo);\n        if (0 !== strpos($fullPathTo, '/')) {\n            $fullPathTo = '/'.$fullPathTo.'/'.basename($pathFrom);\n        }\n        $requestPath = $this->getPath(Jotta::API_UPLOAD_URL, $this->device, $this->mountPoint, $pathFrom, [\n            'mv' => $fullPathTo,\n        ]);\n\n        $response = $this->request($requestPath, 'post');\n\n        return $this->serialize($response);\n    }\n\n    /**\n     * @param $nameFrom\n     * @param $nameTo\n     *\n     * @param null $mountPointTo\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     * @throws JottaException\n     */\n    public function rename($nameFrom, $nameTo, $mountPointTo = null)\n    {\n        return $this->move($nameFrom, $nameTo, $mountPointTo);\n    }\n\n    /**\n     * @param $path\n     *\n     * @throws JottaException\n     * @throws Exception\n     *\n     * @return array|object|ResponseInterface|string|NamespaceContract\n     */\n    public function delete($path)\n    {\n        if ($this->get($path)->isDeleted()) {\n            throw new JottaException('Deleting Trash items not supported.');\n        }\n\n        $response = $this->request($this->getPath(Jotta::API_BASE_URL, $this->device, $this->mountPoint, $path, [\n            'rm' => 'true',\n        ]), 'post');\n\n        return $this->serialize($response);\n    }\n}\n","Support",{},"php-jotta/src/Client/Scopes/FileScope__php")