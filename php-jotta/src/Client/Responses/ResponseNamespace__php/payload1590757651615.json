{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Client\\Responses;\n\nuse DateTime;\nuse Illuminate\\Support\\Str;\nuse Sabre\\Xml\\LibXMLException;\nuse Sabre\\Xml\\ParseException;\nuse Sabre\\Xml\\Reader;\nuse Sabre\\Xml\\XmlDeserializable;\nuse Vegfund\\Jotta\\Client\\Contracts\\NamespaceContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes;\n\n/**\n * Class AbstractNamespace.\n */\nabstract class ResponseNamespace implements NamespaceContract, XmlDeserializable\n{\n    /**\n     * @var array\n     */\n    protected $keyValueMap = [];\n\n    /**\n     * @var array\n     */\n    protected $enumMap = [];\n\n    /**\n     * @var array\n     */\n    protected $objectValueMap = [];\n\n    /**\n     * @var Attributes\n     */\n    public $attributes;\n\n    /**\n     * @param $name\n     *\n     * @throws JottaException\n     *\n     * @return null|mixed\n     */\n    public function __get($name)\n    {\n        if (null !== ($value = $this->getAttribute($name))) {\n            return $value;\n        }\n\n        throw new JottaException('The attribute '.$name.' does not exist.');\n    }\n\n    /**\n     * @param $name\n     *\n     * @return mixed|null\n     */\n    final public function getAttribute($name)\n    {\n        return (isset($this->attributes) && $this->attributes instanceof Attributes) ? $this->attributes->get($name) : null;\n    }\n\n    /**\n     * @param $name\n     * @param $arguments\n     *\n     * @throws JottaException\n     *\n     * @return null|mixed\n     */\n    public function __call($name, $arguments)\n    {\n        if ('get' === substr($name, 0, 3)) {\n            $name = Str::camel(substr($name, 3));\n\n            return $this->{$name};\n        }\n\n        throw new JottaException('The method '.$name.' does not exist.');\n    }\n\n    /**\n     * @param $data\n     *\n     * @throws LibXMLException\n     * @throws ParseException\n     *\n     * @return NamespaceContract\n     *\n     * @todo Attributes for each object type\n     */\n    final protected function attachFields($data)\n    {\n        $children = $data;\n\n        if ($data instanceof  Reader) {\n            $this->setAttributes(new Attributes($data->parseAttributes()));\n            $children = $data->parseInnerTree();\n        }\n\n        if (is_array($children)) {\n            $this->attachKeyValues($children);\n            $this->attachEnums($children);\n            $this->attachObjectValues($children);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param Attributes|null $attributes\n     *\n     * @todo Attributes casting\n     */\n    final protected function setAttributes(Attributes $attributes = null)\n    {\n        $this->attributes = $attributes ?: new Attributes([]);\n\n        foreach ($attributes->all() as $key => $value) {\n            if (!isset($this->{$key})) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachObjectValues($children)\n    {\n        foreach ($children as $child) {\n            $field = substr($child['name'], 2);\n            if (in_array($field, $this->objectValueMap)) {\n                $this->{$field} = $child['value'];\n            }\n        }\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachKeyValues($children)\n    {\n        $keyValues = $this->getKeyValueFields($children);\n\n        foreach ($this->getKeyValueMap() as $field) {\n            list($field, $fieldType) = [\n                array_keys($field)[0],\n                array_values($field)[0],\n            ];\n\n            if (isset($keyValues['{}'.$field])) {\n                $this->{Str::camel($field)} = $this->castPrimitives($keyValues['{}'.$field], $fieldType);\n            }\n        }\n    }\n\n    /**\n     * @return array\n     */\n    final protected function getKeyValueMap()\n    {\n        return array_map(function ($item) {\n            if (!is_array($item)) {\n                return [$item => 'string'];\n            }\n\n            return $item;\n        }, $this->keyValueMap);\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachEnums($children)\n    {\n        foreach ($children as $child) {\n            $field = substr($child['name'], 2);\n            if (in_array($field, $this->enumMap)) {\n                $this->{$field} = $child['value'];\n            }\n        }\n    }\n\n    /**\n     * @param $value\n     * @param string $type\n     *\n     * @return bool|DateTime|false|float|int|string\n     */\n    final protected function castPrimitives($value, $type = 'string')\n    {\n        switch ($type) {\n            case 'int':\n                $value = (int) $value;\n\n                break;\n            case 'float':\n                $value = (float) $value;\n\n                break;\n            case 'bool':\n                $value = (true === $value || 'true' === $value || '1' === $value || 1 === $value) && (false !== $value || 'false' !== $value || '0' !== $value || 0 !== $value);\n\n                break;\n            case 'datetime':\n                $value = DateTime::createFromFormat('Y-m-d-\\TH:i:sO', $value);\n\n                break;\n            default:\n                $value = (string) $value;\n\n                break;\n        }\n\n        return $value;\n    }\n\n    /**\n     * @param array $children\n     *\n     * @return array\n     */\n    final protected function getKeyValueFields($children)\n    {\n        $keyValueFields = [];\n\n        foreach ($children as $child) {\n            if (!\\is_object($child['value'])) {\n                $keyValueFields[$child['name']] = $child['value'];\n            }\n        }\n\n        return $keyValueFields;\n    }\n\n    /**\n     * @param $fields\n     *\n     * @return ResponseNamespace\n     */\n    final public function except($fields)\n    {\n        $fields = is_array($fields) ? $fields : [$fields];\n\n        $processed = clone $this;\n\n        foreach ($fields as $field) {\n            if (isset($processed->{$field})) {\n                unset($processed->{$field});\n            }\n        }\n\n        return $processed;\n    }\n}\n"},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"bx:bxs-file-blank"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta\\Client\\Responses;\n\nuse DateTime;\nuse Illuminate\\Support\\Str;\nuse Sabre\\Xml\\LibXMLException;\nuse Sabre\\Xml\\ParseException;\nuse Sabre\\Xml\\Reader;\nuse Sabre\\Xml\\XmlDeserializable;\nuse Vegfund\\Jotta\\Client\\Contracts\\NamespaceContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Attributes;\n\n/**\n * Class AbstractNamespace.\n */\nabstract class ResponseNamespace implements NamespaceContract, XmlDeserializable\n{\n    /**\n     * @var array\n     */\n    protected $keyValueMap = [];\n\n    /**\n     * @var array\n     */\n    protected $enumMap = [];\n\n    /**\n     * @var array\n     */\n    protected $objectValueMap = [];\n\n    /**\n     * @var Attributes\n     */\n    public $attributes;\n\n    /**\n     * @param $name\n     *\n     * @throws JottaException\n     *\n     * @return null|mixed\n     */\n    public function __get($name)\n    {\n        if (null !== ($value = $this->getAttribute($name))) {\n            return $value;\n        }\n\n        throw new JottaException('The attribute '.$name.' does not exist.');\n    }\n\n    /**\n     * @param $name\n     *\n     * @return mixed|null\n     */\n    final public function getAttribute($name)\n    {\n        return (isset($this->attributes) && $this->attributes instanceof Attributes) ? $this->attributes->get($name) : null;\n    }\n\n    /**\n     * @param $name\n     * @param $arguments\n     *\n     * @throws JottaException\n     *\n     * @return null|mixed\n     */\n    public function __call($name, $arguments)\n    {\n        if ('get' === substr($name, 0, 3)) {\n            $name = Str::camel(substr($name, 3));\n\n            return $this->{$name};\n        }\n\n        throw new JottaException('The method '.$name.' does not exist.');\n    }\n\n    /**\n     * @param $data\n     *\n     * @throws LibXMLException\n     * @throws ParseException\n     *\n     * @return NamespaceContract\n     *\n     * @todo Attributes for each object type\n     */\n    final protected function attachFields($data)\n    {\n        $children = $data;\n\n        if ($data instanceof  Reader) {\n            $this->setAttributes(new Attributes($data->parseAttributes()));\n            $children = $data->parseInnerTree();\n        }\n\n        if (is_array($children)) {\n            $this->attachKeyValues($children);\n            $this->attachEnums($children);\n            $this->attachObjectValues($children);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param Attributes|null $attributes\n     *\n     * @todo Attributes casting\n     */\n    final protected function setAttributes(Attributes $attributes = null)\n    {\n        $this->attributes = $attributes ?: new Attributes([]);\n\n        foreach ($attributes->all() as $key => $value) {\n            if (!isset($this->{$key})) {\n                $this->{$key} = $value;\n            }\n        }\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachObjectValues($children)\n    {\n        foreach ($children as $child) {\n            $field = substr($child['name'], 2);\n            if (in_array($field, $this->objectValueMap)) {\n                $this->{$field} = $child['value'];\n            }\n        }\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachKeyValues($children)\n    {\n        $keyValues = $this->getKeyValueFields($children);\n\n        foreach ($this->getKeyValueMap() as $field) {\n            list($field, $fieldType) = [\n                array_keys($field)[0],\n                array_values($field)[0],\n            ];\n\n            if (isset($keyValues['{}'.$field])) {\n                $this->{Str::camel($field)} = $this->castPrimitives($keyValues['{}'.$field], $fieldType);\n            }\n        }\n    }\n\n    /**\n     * @return array\n     */\n    final protected function getKeyValueMap()\n    {\n        return array_map(function ($item) {\n            if (!is_array($item)) {\n                return [$item => 'string'];\n            }\n\n            return $item;\n        }, $this->keyValueMap);\n    }\n\n    /**\n     * @param array $children\n     */\n    final protected function attachEnums($children)\n    {\n        foreach ($children as $child) {\n            $field = substr($child['name'], 2);\n            if (in_array($field, $this->enumMap)) {\n                $this->{$field} = $child['value'];\n            }\n        }\n    }\n\n    /**\n     * @param $value\n     * @param string $type\n     *\n     * @return bool|DateTime|false|float|int|string\n     */\n    final protected function castPrimitives($value, $type = 'string')\n    {\n        switch ($type) {\n            case 'int':\n                $value = (int) $value;\n\n                break;\n            case 'float':\n                $value = (float) $value;\n\n                break;\n            case 'bool':\n                $value = (true === $value || 'true' === $value || '1' === $value || 1 === $value) && (false !== $value || 'false' !== $value || '0' !== $value || 0 !== $value);\n\n                break;\n            case 'datetime':\n                $value = DateTime::createFromFormat('Y-m-d-\\TH:i:sO', $value);\n\n                break;\n            default:\n                $value = (string) $value;\n\n                break;\n        }\n\n        return $value;\n    }\n\n    /**\n     * @param array $children\n     *\n     * @return array\n     */\n    final protected function getKeyValueFields($children)\n    {\n        $keyValueFields = [];\n\n        foreach ($children as $child) {\n            if (!\\is_object($child['value'])) {\n                $keyValueFields[$child['name']] = $child['value'];\n            }\n        }\n\n        return $keyValueFields;\n    }\n\n    /**\n     * @param $fields\n     *\n     * @return ResponseNamespace\n     */\n    final public function except($fields)\n    {\n        $fields = is_array($fields) ? $fields : [$fields];\n\n        $processed = clone $this;\n\n        foreach ($fields as $field) {\n            if (isset($processed->{$field})) {\n                unset($processed->{$field});\n            }\n        }\n\n        return $processed;\n    }\n}\n"},"pathMatch":"php-jotta/src/Client/Responses/ResponseNamespace__php"}