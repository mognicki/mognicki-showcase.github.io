{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta;\n\nuse Exception;\nuse League\\Flysystem\\Adapter\\AbstractAdapter;\nuse League\\Flysystem\\Config;\nuse Sabre\\Xml\\ParseException;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Traits\\PathTrait;\n\n/**\n * Class JottaAdapter.\n */\nclass JottaAdapter extends AbstractAdapter\n{\n    use PathTrait;\n\n    /**\n     * @var JottaClient\n     */\n    protected $client;\n\n    /**\n     * JottaAdapter constructor.\n     * @param JottaClient $client\n     */\n    public function __construct(JottaClient $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * Write a new file.\n     *\n     * @param string $path\n     * @param string $contents\n     * @param Config $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function write($path, $contents, Config $config)\n    {\n        // TODO: Implement write() method.\n    }\n\n    /**\n     * Write a new file using a stream.\n     *\n     * @param string   $path\n     * @param resource $resource\n     * @param Config   $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function writeStream($path, $resource, Config $config)\n    {\n        // TODO: Implement writeStream() method.\n    }\n\n    /**\n     * Update a file.\n     *\n     * @param string $path\n     * @param string $contents\n     * @param Config $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function update($path, $contents, Config $config)\n    {\n        // TODO: Implement update() method.\n    }\n\n    /**\n     * Update a file using a stream.\n     *\n     * @param string   $path\n     * @param resource $resource\n     * @param Config   $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function updateStream($path, $resource, Config $config)\n    {\n        // TODO: Implement updateStream() method.\n    }\n\n    /**\n     * Rename a file.\n     *\n     * @param string $path\n     * @param string $newpath\n     *\n     * @return bool\n     */\n    public function rename($path, $newpath)\n    {\n        $mountPointFrom = $this->getMountPointFromPath($path);\n        $mountPointTo = $this->getMountPointFromPath($newpath);\n        $pathFrom = $this->stripMountPointFromPath($path);\n        $pathTo = $this->stripMountPointFromPath($newpath);\n\n        try {\n            $this->client->file()->setMountPoint($mountPointFrom)->rename($pathFrom, $pathTo, $mountPointTo);\n            return true;\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Copy a file.\n     *\n     * @param string $path\n     * @param string $newpath\n     *\n     * @return bool\n     */\n    public function copy($path, $newpath)\n    {\n        // TODO: Implement copy() method.\n    }\n\n    /**\n     * Delete a file.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public function delete($path)\n    {\n        // TODO: Implement delete() method.\n    }\n\n    /**\n     * Delete a directory.\n     *\n     * @param string $dirname\n     *\n     * @return bool\n     */\n    public function deleteDir($dirname)\n    {\n        // TODO: Implement deleteDir() method.\n    }\n\n    /**\n     * Create a directory.\n     *\n     * @param string $dirname directory name\n     *\n     * @return array|false\n     */\n    public function createDir($dirname, Config $config)\n    {\n        $mountPoint = $this->getMountPointFromPath($dirname);\n        $path = $this->stripMountPointFromPath($dirname);\n\n        try {\n            $folder = $this->client->directory()->setMountPoint($mountPoint)->create($path);\n            return ['path' => $dirname, 'type' => 'dir'];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Set the visibility for a file.\n     *\n     * @param string $path\n     * @param string $visibility\n     *\n     * @return array|false file meta data\n     */\n    public function setVisibility($path, $visibility)\n    {\n        // TODO: Implement setVisibility() method.\n    }\n\n    /**\n     * Check whether a file exists.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public function has($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($path);\n        $path = $this->stripMountPointFromPath($path);\n\n        try {\n            return null !== $this->client->file()->setMountPoint($mountPoint)->verify($path);\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Read a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function read($path)\n    {\n        // TODO: Implement read() method.\n    }\n\n    /**\n     * Read a file as a stream.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function readStream($path)\n    {\n        // TODO: Implement readStream() method.\n    }\n\n    /**\n     * List contents of a directory.\n     *\n     * @param string $directory\n     * @param bool $recursive\n     *\n     * @return array\n     * @throws JottaException\n     * @throws ParseException\n     * @throws Exception\n     */\n    public function listContents($directory = '', $recursive = false)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        if($path === '') {\n            $scope = $this->client->mountPoint()->setMountPoint($mountPoint);\n        } else {\n            $scope = $this->client->folder()->setMountPoint($mountPoint);\n        }\n\n        if ($recursive) {\n            return $scope->listRecursive($path);\n        } else {\n            return $scope->list($path);\n        }\n    }\n\n    /**\n     * Get all the meta data of a file or directory.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getMetadata($path)\n    {\n        // TODO: Implement getMetadata() method.\n    }\n\n    /**\n     * Get the size of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getSize($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['size' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getSize()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the mimetype of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getMimetype($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['mimetype' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getMime()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the last modified time of a file as a timestamp.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getTimestamp($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['timestamp' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getModified()->toTimestamp()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the visibility of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getVisibility($path)\n    {\n        // TODO: Implement getVisibility() method.\n    }\n}\n"},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"bx:bxs-file-blank"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta;\n\nuse Exception;\nuse League\\Flysystem\\Adapter\\AbstractAdapter;\nuse League\\Flysystem\\Config;\nuse Sabre\\Xml\\ParseException;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Traits\\PathTrait;\n\n/**\n * Class JottaAdapter.\n */\nclass JottaAdapter extends AbstractAdapter\n{\n    use PathTrait;\n\n    /**\n     * @var JottaClient\n     */\n    protected $client;\n\n    /**\n     * JottaAdapter constructor.\n     * @param JottaClient $client\n     */\n    public function __construct(JottaClient $client)\n    {\n        $this->client = $client;\n    }\n\n    /**\n     * Write a new file.\n     *\n     * @param string $path\n     * @param string $contents\n     * @param Config $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function write($path, $contents, Config $config)\n    {\n        // TODO: Implement write() method.\n    }\n\n    /**\n     * Write a new file using a stream.\n     *\n     * @param string   $path\n     * @param resource $resource\n     * @param Config   $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function writeStream($path, $resource, Config $config)\n    {\n        // TODO: Implement writeStream() method.\n    }\n\n    /**\n     * Update a file.\n     *\n     * @param string $path\n     * @param string $contents\n     * @param Config $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function update($path, $contents, Config $config)\n    {\n        // TODO: Implement update() method.\n    }\n\n    /**\n     * Update a file using a stream.\n     *\n     * @param string   $path\n     * @param resource $resource\n     * @param Config   $config   Config object\n     *\n     * @return array|false false on failure file meta data on success\n     */\n    public function updateStream($path, $resource, Config $config)\n    {\n        // TODO: Implement updateStream() method.\n    }\n\n    /**\n     * Rename a file.\n     *\n     * @param string $path\n     * @param string $newpath\n     *\n     * @return bool\n     */\n    public function rename($path, $newpath)\n    {\n        $mountPointFrom = $this->getMountPointFromPath($path);\n        $mountPointTo = $this->getMountPointFromPath($newpath);\n        $pathFrom = $this->stripMountPointFromPath($path);\n        $pathTo = $this->stripMountPointFromPath($newpath);\n\n        try {\n            $this->client->file()->setMountPoint($mountPointFrom)->rename($pathFrom, $pathTo, $mountPointTo);\n            return true;\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Copy a file.\n     *\n     * @param string $path\n     * @param string $newpath\n     *\n     * @return bool\n     */\n    public function copy($path, $newpath)\n    {\n        // TODO: Implement copy() method.\n    }\n\n    /**\n     * Delete a file.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public function delete($path)\n    {\n        // TODO: Implement delete() method.\n    }\n\n    /**\n     * Delete a directory.\n     *\n     * @param string $dirname\n     *\n     * @return bool\n     */\n    public function deleteDir($dirname)\n    {\n        // TODO: Implement deleteDir() method.\n    }\n\n    /**\n     * Create a directory.\n     *\n     * @param string $dirname directory name\n     *\n     * @return array|false\n     */\n    public function createDir($dirname, Config $config)\n    {\n        $mountPoint = $this->getMountPointFromPath($dirname);\n        $path = $this->stripMountPointFromPath($dirname);\n\n        try {\n            $folder = $this->client->directory()->setMountPoint($mountPoint)->create($path);\n            return ['path' => $dirname, 'type' => 'dir'];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Set the visibility for a file.\n     *\n     * @param string $path\n     * @param string $visibility\n     *\n     * @return array|false file meta data\n     */\n    public function setVisibility($path, $visibility)\n    {\n        // TODO: Implement setVisibility() method.\n    }\n\n    /**\n     * Check whether a file exists.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public function has($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($path);\n        $path = $this->stripMountPointFromPath($path);\n\n        try {\n            return null !== $this->client->file()->setMountPoint($mountPoint)->verify($path);\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Read a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function read($path)\n    {\n        // TODO: Implement read() method.\n    }\n\n    /**\n     * Read a file as a stream.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function readStream($path)\n    {\n        // TODO: Implement readStream() method.\n    }\n\n    /**\n     * List contents of a directory.\n     *\n     * @param string $directory\n     * @param bool $recursive\n     *\n     * @return array\n     * @throws JottaException\n     * @throws ParseException\n     * @throws Exception\n     */\n    public function listContents($directory = '', $recursive = false)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        if($path === '') {\n            $scope = $this->client->mountPoint()->setMountPoint($mountPoint);\n        } else {\n            $scope = $this->client->folder()->setMountPoint($mountPoint);\n        }\n\n        if ($recursive) {\n            return $scope->listRecursive($path);\n        } else {\n            return $scope->list($path);\n        }\n    }\n\n    /**\n     * Get all the meta data of a file or directory.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getMetadata($path)\n    {\n        // TODO: Implement getMetadata() method.\n    }\n\n    /**\n     * Get the size of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getSize($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['size' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getSize()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the mimetype of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getMimetype($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['mimetype' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getMime()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the last modified time of a file as a timestamp.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getTimestamp($path)\n    {\n        $mountPoint = $this->getMountPointFromPath($directory);\n        $path = $this->stripMountPointFromPath($directory);\n\n        try {\n            return ['timestamp' => $this->client->file()->setMountPoint($mountPoint)->get($path)->getModified()->toTimestamp()];\n        } catch (JottaException $e) {} catch (Exception $e) {}\n\n        return false;\n    }\n\n    /**\n     * Get the visibility of a file.\n     *\n     * @param string $path\n     *\n     * @return array|false\n     */\n    public function getVisibility($path)\n    {\n        // TODO: Implement getVisibility() method.\n    }\n}\n"},"pathMatch":"php-jotta/src/JottaAdapter__php"}