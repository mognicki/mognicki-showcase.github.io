{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta;\n\nuse Exception;\nuse GrahamCampbell\\GuzzleFactory\\GuzzleFactory;\nuse GuzzleHttp\\Client as GuzzleClient;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Vegfund\\Jotta\\Client\\Contracts\\ScopeContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Scopes\\AccountScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DeviceScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\FileScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\n\n/**\n * Class JottaClient.\n *\n * @see https://github.com/paaland/node-jfs/blob/master/src/jfsuploader.js\n * @see https://www.jottacloud.com/jfs/user/Jotta/Archive/truking?mvDir=/user/Jotta/Archive/newtruking2\n */\nclass JottaClient\n{\n    /**\n     * @var string Username\n     */\n    protected $username;\n\n    /**\n     * @var string Password\n     */\n    protected $password;\n\n    /**\n     * @var GuzzleClient Guzzle client\n     */\n    protected $httpClient;\n\n    /**\n     * Client constructor.\n     *\n     * @param string            $username jottacloud username\n     * @param string            $password jottacloud password\n     * @param null|GuzzleClient $client   guzzleHttp client\n     */\n    public function __construct($username, $password, GuzzleClient $client = null)\n    {\n        $this->username = $username;\n        $this->password = $password;\n\n        $this->httpClient = $client ?? new GuzzleClient([\n            'handler' => GuzzleFactory::handler(),\n        ]);\n    }\n\n    /**\n     * Get the GuzzleHttp client.\n     *\n     * @return GuzzleClient\n     */\n    public function getClient()\n    {\n        return $this->httpClient;\n    }\n\n    /**\n     * Get the username.\n     *\n     * @return string\n     */\n    public function getUsername()\n    {\n        return $this->username;\n    }\n\n    /**\n     * Get the Account scope.\n     *\n     * @param array $options options array\n     *\n     *@throws JottaException\n     *\n     * @return AccountScope|Scope\n     */\n    public function account($options = [])\n    {\n        return $this->getScope(AccountScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DeviceScope|Scope\n     */\n    public function device($options = [])\n    {\n        return $this->getScope(DeviceScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return FileScope|Scope\n     */\n    public function file($options = [])\n    {\n        return $this->getScope(FileScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope|Scope\n     */\n    public function folder($options = [])\n    {\n        return $this->directory($options)->setMode(DirectoryScope::MODE_FOLDER);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope\n     */\n    public function mountPoint($options = [])\n    {\n        return $this->directory($options)->setMode(DirectoryScope::MODE_MOUNT_POINT);\n    }\n\n    /**\n     * @param array $options\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope|Scope\n     */\n    public function directory($options = [])\n    {\n        return $this->getScope(DirectoryScope::class, $options);\n    }\n\n    /**\n     * Perform an HTTP request.\n     *\n     * @param string $path          API endpoint path\n     * @param string $method        HTTP method\n     * @param array  $headers       request headers\n     * @param mixed  $clientOptions guzzleHttp options array\n     * @param mixed  $async         asynchronous request flag\n     *\n     * @throws Exception\n     *\n     * @return ResponseInterface\n     */\n    public function request($path, $method = 'get', $headers = [], $clientOptions = [], $async = false)\n    {\n        $options = array_merge([\n            'headers' => $this->getHeaders($headers),\n        ], $clientOptions);\n\n        $requestMethod = $async ? 'requestAsync' : 'request';\n\n        try {\n            $response = $this->httpClient->{$requestMethod}($method, $path, $options);\n        } catch (ClientException $exception) {\n            $this->handleException($exception);\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param string $name    scope name\n     * @param mixed  $options scope options array\n     *\n     * @throws JottaException\n     *\n     * @return null|Scope|ScopeContract\n     */\n    public function getScope($name, $options = [])\n    {\n        if (!class_exists($name) || !is_a($name, Scope::class, true)) {\n            throw new JottaException('Scope '.$name.' does not exist or not a ScopeContract');\n        }\n\n        $scope = (new $name($this));\n\n        if (isset($options['device'])) {\n            $scope = $scope->setDevice($options['device']);\n        }\n        if (isset($options['mount_point'])) {\n            $scope = $scope->setMountPoint($options['mount_point']);\n        }\n        if (isset($options['base_path'])) {\n            $scope = $scope->setBasePath($options['base_path']);\n        }\n\n        return $scope;\n    }\n\n    /**\n     * @param ClientException|Exception|RequestException|ServerException $exception exception to handle\n     *\n     * @throws Exception\n     */\n    protected function handleException($exception)\n    {\n        switch (\\get_class($exception)) {\n            case ClientException::class:\n                $body = (string) $exception->getResponse()->getBody();\n                $domDocument = (new \\DOMDocument('1.0', 'UTF-8'));\n                $domDocument->loadXML($body);\n                $code = $domDocument->getElementsByTagName('code')->item(0)->nodeValue;\n                $message = $domDocument->getElementsByTagName('message')->item(0)->nodeValue;\n\n                throw new Exception($message, $code);\n                break;\n            default:\n                throw $exception;\n                break;\n        }\n    }\n\n    /**\n     * Merge HTTP headers.\n     *\n     * @param array $headers headers to be merged\n     *\n     * @return array\n     */\n    protected function getHeaders($headers = [])\n    {\n        return array_merge([\n            'Authorization' => 'Basic '.base64_encode($this->username.':'.$this->password),\n        ], $headers);\n    }\n}\n"}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"bx:bxs-file-blank"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of the PHP client for unofficial Jottacloud API, with a built-in Flysystem adapter.\n *\n * @author Marek Kapusta <fundacja@vegvisir.org.pl>\n */\n\nnamespace Vegfund\\Jotta;\n\nuse Exception;\nuse GrahamCampbell\\GuzzleFactory\\GuzzleFactory;\nuse GuzzleHttp\\Client as GuzzleClient;\nuse GuzzleHttp\\Exception\\ClientException;\nuse GuzzleHttp\\Exception\\RequestException;\nuse GuzzleHttp\\Exception\\ServerException;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Vegfund\\Jotta\\Client\\Contracts\\ScopeContract;\nuse Vegfund\\Jotta\\Client\\Exceptions\\JottaException;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\Device;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\File;\nuse Vegfund\\Jotta\\Client\\Responses\\Namespaces\\MountPoint;\nuse Vegfund\\Jotta\\Client\\Scopes\\AccountScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DeviceScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\DirectoryScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\FileScope;\nuse Vegfund\\Jotta\\Client\\Scopes\\Scope;\n\n/**\n * Class JottaClient.\n *\n * @see https://github.com/paaland/node-jfs/blob/master/src/jfsuploader.js\n * @see https://www.jottacloud.com/jfs/user/Jotta/Archive/truking?mvDir=/user/Jotta/Archive/newtruking2\n */\nclass JottaClient\n{\n    /**\n     * @var string Username\n     */\n    protected $username;\n\n    /**\n     * @var string Password\n     */\n    protected $password;\n\n    /**\n     * @var GuzzleClient Guzzle client\n     */\n    protected $httpClient;\n\n    /**\n     * Client constructor.\n     *\n     * @param string            $username jottacloud username\n     * @param string            $password jottacloud password\n     * @param null|GuzzleClient $client   guzzleHttp client\n     */\n    public function __construct($username, $password, GuzzleClient $client = null)\n    {\n        $this->username = $username;\n        $this->password = $password;\n\n        $this->httpClient = $client ?? new GuzzleClient([\n            'handler' => GuzzleFactory::handler(),\n        ]);\n    }\n\n    /**\n     * Get the GuzzleHttp client.\n     *\n     * @return GuzzleClient\n     */\n    public function getClient()\n    {\n        return $this->httpClient;\n    }\n\n    /**\n     * Get the username.\n     *\n     * @return string\n     */\n    public function getUsername()\n    {\n        return $this->username;\n    }\n\n    /**\n     * Get the Account scope.\n     *\n     * @param array $options options array\n     *\n     *@throws JottaException\n     *\n     * @return AccountScope|Scope\n     */\n    public function account($options = [])\n    {\n        return $this->getScope(AccountScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DeviceScope|Scope\n     */\n    public function device($options = [])\n    {\n        return $this->getScope(DeviceScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return FileScope|Scope\n     */\n    public function file($options = [])\n    {\n        return $this->getScope(FileScope::class, $options);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope|Scope\n     */\n    public function folder($options = [])\n    {\n        return $this->directory($options)->setMode(DirectoryScope::MODE_FOLDER);\n    }\n\n    /**\n     * @param array $options options array\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope\n     */\n    public function mountPoint($options = [])\n    {\n        return $this->directory($options)->setMode(DirectoryScope::MODE_MOUNT_POINT);\n    }\n\n    /**\n     * @param array $options\n     *\n     * @throws JottaException\n     *\n     * @return DirectoryScope|Scope\n     */\n    public function directory($options = [])\n    {\n        return $this->getScope(DirectoryScope::class, $options);\n    }\n\n    /**\n     * Perform an HTTP request.\n     *\n     * @param string $path          API endpoint path\n     * @param string $method        HTTP method\n     * @param array  $headers       request headers\n     * @param mixed  $clientOptions guzzleHttp options array\n     * @param mixed  $async         asynchronous request flag\n     *\n     * @throws Exception\n     *\n     * @return ResponseInterface\n     */\n    public function request($path, $method = 'get', $headers = [], $clientOptions = [], $async = false)\n    {\n        $options = array_merge([\n            'headers' => $this->getHeaders($headers),\n        ], $clientOptions);\n\n        $requestMethod = $async ? 'requestAsync' : 'request';\n\n        try {\n            $response = $this->httpClient->{$requestMethod}($method, $path, $options);\n        } catch (ClientException $exception) {\n            $this->handleException($exception);\n        }\n\n        return $response;\n    }\n\n    /**\n     * @param string $name    scope name\n     * @param mixed  $options scope options array\n     *\n     * @throws JottaException\n     *\n     * @return null|Scope|ScopeContract\n     */\n    public function getScope($name, $options = [])\n    {\n        if (!class_exists($name) || !is_a($name, Scope::class, true)) {\n            throw new JottaException('Scope '.$name.' does not exist or not a ScopeContract');\n        }\n\n        $scope = (new $name($this));\n\n        if (isset($options['device'])) {\n            $scope = $scope->setDevice($options['device']);\n        }\n        if (isset($options['mount_point'])) {\n            $scope = $scope->setMountPoint($options['mount_point']);\n        }\n        if (isset($options['base_path'])) {\n            $scope = $scope->setBasePath($options['base_path']);\n        }\n\n        return $scope;\n    }\n\n    /**\n     * @param ClientException|Exception|RequestException|ServerException $exception exception to handle\n     *\n     * @throws Exception\n     */\n    protected function handleException($exception)\n    {\n        switch (\\get_class($exception)) {\n            case ClientException::class:\n                $body = (string) $exception->getResponse()->getBody();\n                $domDocument = (new \\DOMDocument('1.0', 'UTF-8'));\n                $domDocument->loadXML($body);\n                $code = $domDocument->getElementsByTagName('code')->item(0)->nodeValue;\n                $message = $domDocument->getElementsByTagName('message')->item(0)->nodeValue;\n\n                throw new Exception($message, $code);\n                break;\n            default:\n                throw $exception;\n                break;\n        }\n    }\n\n    /**\n     * Merge HTTP headers.\n     *\n     * @param array $headers headers to be merged\n     *\n     * @return array\n     */\n    protected function getHeaders($headers = [])\n    {\n        return array_merge([\n            'Authorization' => 'Basic '.base64_encode($this->username.':'.$this->password),\n        ], $headers);\n    }\n}\n"},"pathMatch":"php-jotta/src/JottaClient__php"}