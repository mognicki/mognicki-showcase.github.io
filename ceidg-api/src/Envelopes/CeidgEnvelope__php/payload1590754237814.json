{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Envelopes;\n\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Validators\\BaseValidator;\nuse Exception;\n\nclass CeidgEnvelope implements CeidgEnvelopeContract\n{\n    /**\n     * CeidgApi instance.\n     *\n     * @var CeidgEnvelopeContract\n     */\n    protected $ceidgApi;\n\n    /**\n     * Allowed params array (overriden by extending classes).\n     *\n     * @var array\n     */\n    protected $allowedParams = [];\n\n    /**\n     * Query params, sent within SOAP envelope.\n     *\n     * @var array\n     */\n    protected $params = [];\n\n    /**\n     * SOAP function name.\n     *\n     * @var string\n     */\n    protected $callFunctionName;\n\n    /**\n     * Class constructor.\n     *\n     * @param CeidgApiContract $ceidgApi\n     */\n    public function __construct(CeidgApiContract $ceidgApi)\n    {\n        $this->ceidgApi = $ceidgApi;\n    }\n\n    /**\n     * Magic __call method used to set query params.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    public function __call($name, $value): CeidgEnvelopeContract\n    {\n        if (0 !== strpos(ucfirst($name), 'Set')) {\n            return $this->filterParams($name);\n        }\n\n        return $this->setParam(str_replace('Set', '', ucfirst($name)), $value);\n    }\n\n    /**\n     * Return query params with or without auth token. Auth token would be\n     * returned when $merged param is true.\n     *\n     * @param bool $merged\n     *\n     * @return array\n     */\n    public function getParams($merged = false): array\n    {\n        return $merged ? $this->ceidgApi->makeParams($this->params) : $this->params;\n    }\n\n    /**\n     * Send SOAP envelope and (optionally) parse it immediately\n     * Return string with raw XML response or parsed array/object.\n     *\n     * @param bool $parse\n     *\n     * @throws Exception\n     *\n     * @return array|object|string\n     */\n    public function send($parse = true)\n    {\n        $params = $this->ceidgApi->makeParams($this->params);\n\n        $client = $this->ceidgApi->getClient();\n\n        try {\n            $result = $client->__call($this->callFunctionName, ['body' => $params]);\n        } catch (Exception $e) {\n            throw $e;\n        }\n\n        $this->params = [];\n\n        if (!$parse) {\n            return $result;\n        }\n\n        return $this->ceidgApi->getParser($this->callFunctionName)->parse($result);\n    }\n\n    /**\n     * Validate value against param name.\n     * Return false on entirely negative validation, or validated content\n     * if some values could be left.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return array|bool|string\n     */\n    public function validate($name, $value)\n    {\n        return BaseValidator::getValidator($name)->validate($value);\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $validationResult\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function filterParams($name, $validationResult = false): CeidgEnvelopeContract\n    {\n        if ($this->isParamEmpty($name) || false === $validationResult) {\n            try {\n                unset($this->params[$name]);\n            } catch (Exception $e) {\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function setParam($name, $value): CeidgEnvelopeContract\n    {\n        if (\\in_array($name, array_keys($this->allowedParams), true)) {\n            $validated = 'single' === $this->allowedParams[$name]\n                ? $this->validate($name, $this->processSingleParam($value))\n                : $this->validate($name, $this->processListParam($value));\n\n            if (false !== $validated) {\n                $this->params[$name] = $validated;\n            }\n        }\n\n        return $this->filterParams($name, false !== $validated);\n    }\n\n    /**\n     * Check whether query param by the name $name is empty, either a zero-element\n     * array or empty string.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    protected function isParamEmpty($name): bool\n    {\n        // Param is an array with zero elements\n        if (\\is_array($this->params[$name]) && 0 === \\count($this->params[$name])) {\n            return true;\n        }\n\n        // Param is an empty string\n        if (!\\is_array($this->params[$name]) && '' === $this->params[$name]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Process list param from __call method's $value and return it as array.\n     *\n     * @param mixed $value\n     *\n     * @return array\n     */\n    protected function processListParam($value): array\n    {\n        return \\is_array($value[0]) ? $value[0] : (!isset($value[1]) ? [$value[0]] : $value);\n    }\n\n    /**\n     * Process single param from __call method's value and return it as string.\n     * Method retrieves only first argument if more than one were given.\n     *\n     * @param mixed $value\n     *\n     * @return string\n     */\n    protected function processSingleParam($value): string\n    {\n        return (string) (\\is_array($value[0]) ? $value[0][0] : $value[0]);\n    }\n}\n"},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/SOME.md","name":"SOME.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Envelopes;\n\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Validators\\BaseValidator;\nuse Exception;\n\nclass CeidgEnvelope implements CeidgEnvelopeContract\n{\n    /**\n     * CeidgApi instance.\n     *\n     * @var CeidgEnvelopeContract\n     */\n    protected $ceidgApi;\n\n    /**\n     * Allowed params array (overriden by extending classes).\n     *\n     * @var array\n     */\n    protected $allowedParams = [];\n\n    /**\n     * Query params, sent within SOAP envelope.\n     *\n     * @var array\n     */\n    protected $params = [];\n\n    /**\n     * SOAP function name.\n     *\n     * @var string\n     */\n    protected $callFunctionName;\n\n    /**\n     * Class constructor.\n     *\n     * @param CeidgApiContract $ceidgApi\n     */\n    public function __construct(CeidgApiContract $ceidgApi)\n    {\n        $this->ceidgApi = $ceidgApi;\n    }\n\n    /**\n     * Magic __call method used to set query params.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    public function __call($name, $value): CeidgEnvelopeContract\n    {\n        if (0 !== strpos(ucfirst($name), 'Set')) {\n            return $this->filterParams($name);\n        }\n\n        return $this->setParam(str_replace('Set', '', ucfirst($name)), $value);\n    }\n\n    /**\n     * Return query params with or without auth token. Auth token would be\n     * returned when $merged param is true.\n     *\n     * @param bool $merged\n     *\n     * @return array\n     */\n    public function getParams($merged = false): array\n    {\n        return $merged ? $this->ceidgApi->makeParams($this->params) : $this->params;\n    }\n\n    /**\n     * Send SOAP envelope and (optionally) parse it immediately\n     * Return string with raw XML response or parsed array/object.\n     *\n     * @param bool $parse\n     *\n     * @throws Exception\n     *\n     * @return array|object|string\n     */\n    public function send($parse = true)\n    {\n        $params = $this->ceidgApi->makeParams($this->params);\n\n        $client = $this->ceidgApi->getClient();\n\n        try {\n            $result = $client->__call($this->callFunctionName, ['body' => $params]);\n        } catch (Exception $e) {\n            throw $e;\n        }\n\n        $this->params = [];\n\n        if (!$parse) {\n            return $result;\n        }\n\n        return $this->ceidgApi->getParser($this->callFunctionName)->parse($result);\n    }\n\n    /**\n     * Validate value against param name.\n     * Return false on entirely negative validation, or validated content\n     * if some values could be left.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return array|bool|string\n     */\n    public function validate($name, $value)\n    {\n        return BaseValidator::getValidator($name)->validate($value);\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $validationResult\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function filterParams($name, $validationResult = false): CeidgEnvelopeContract\n    {\n        if ($this->isParamEmpty($name) || false === $validationResult) {\n            try {\n                unset($this->params[$name]);\n            } catch (Exception $e) {\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function setParam($name, $value): CeidgEnvelopeContract\n    {\n        if (\\in_array($name, array_keys($this->allowedParams), true)) {\n            $validated = 'single' === $this->allowedParams[$name]\n                ? $this->validate($name, $this->processSingleParam($value))\n                : $this->validate($name, $this->processListParam($value));\n\n            if (false !== $validated) {\n                $this->params[$name] = $validated;\n            }\n        }\n\n        return $this->filterParams($name, false !== $validated);\n    }\n\n    /**\n     * Check whether query param by the name $name is empty, either a zero-element\n     * array or empty string.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    protected function isParamEmpty($name): bool\n    {\n        // Param is an array with zero elements\n        if (\\is_array($this->params[$name]) && 0 === \\count($this->params[$name])) {\n            return true;\n        }\n\n        // Param is an empty string\n        if (!\\is_array($this->params[$name]) && '' === $this->params[$name]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Process list param from __call method's $value and return it as array.\n     *\n     * @param mixed $value\n     *\n     * @return array\n     */\n    protected function processListParam($value): array\n    {\n        return \\is_array($value[0]) ? $value[0] : (!isset($value[1]) ? [$value[0]] : $value);\n    }\n\n    /**\n     * Process single param from __call method's value and return it as string.\n     * Method retrieves only first argument if more than one were given.\n     *\n     * @param mixed $value\n     *\n     * @return string\n     */\n    protected function processSingleParam($value): string\n    {\n        return (string) (\\is_array($value[0]) ? $value[0][0] : $value[0]);\n    }\n}\n"},"pathMatch":"ceidg-api/src/Envelopes/CeidgEnvelope__php"}