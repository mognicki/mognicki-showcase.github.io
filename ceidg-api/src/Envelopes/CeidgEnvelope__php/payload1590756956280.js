window.__NUXT__=function(e,a,t,p,n,s,c,i,r,o,l,h,d,u,m,g,y,x,C,$,k,v,_,j,E,T,S,P){return o.path="/",o.name="repository",o.type=p,o.children=[{path:"/ceidg-api",name:"ceidg-api",type:p,children:[{path:"/ceidg-api/src",name:"src",type:p,children:[{path:"/ceidg-api/src/Contracts",name:l,type:p,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:p,children:[{path:h,name:d,type:e,exclude:[{}],stacks:{language:a,icon:t},content:u},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:p,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:p,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:m,type:p,children:[{path:"/ceidg-api/tests/CeidgTest.php",name:"CeidgTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:y,icon:x}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:i,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:C,type:e,exclude:[{}],stacks:{language:i,icon:$}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:n,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/ceidg-api/composer.json",name:k,type:e,exclude:[{}],stacks:{language:v,icon:_}},{path:"/ceidg-api/phpunit.xml.dist",name:j,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:p,children:[{path:"/php-jotta/src",name:"src",type:p,children:[{path:"/php-jotta/src/Client",name:"Client",type:p,children:[{path:"/php-jotta/src/Client/Contracts",name:l,type:p,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:p,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:p,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:p,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:T,type:p,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:p,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:m,type:p,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:p,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:T,type:p,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:p,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:p,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:p,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:p,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:a,icon:t}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:g,type:e,exclude:[{}],stacks:{language:y,icon:x}},{path:"/php-jotta/.travis.yml",name:C,type:e,exclude:[{}],stacks:{language:i,icon:$}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/php-jotta/composer.json",name:k,type:e,exclude:[{}],stacks:{language:v,icon:_}},{path:"/php-jotta/phpunit.xml.dist",name:j,type:e,exclude:[{}],stacks:{language:"xml",icon:E}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:p,children:[{path:"/varia/js",name:"js",type:p,children:[{path:"/varia/js/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:"javascript",icon:"logos:javascript"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:r,type:e,exclude:[{}],stacks:{language:n,icon:s}},{path:"/SOME.md",name:"SOME.md",type:e,exclude:[{}],stacks:{language:n,icon:s}}],o.exclude=[{}],o.yaml={},S.path=h,S.name=d,S.type=e,S.exclude=[{}],S.stacks={language:a,icon:t},S.content=u,{layout:"default",data:[{tree:o,pathNode:S,pathMatch:P}],fetch:[],error:c,state:{auth:{token:c,visitor:c,word:c},layout:{loading:{icon:c,name:c},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:a}}}},tree:{path:{active:"",expanded:[""]},tree:o,pathMatch:P,pathNode:S}},serverRendered:!0,routePath:"/ceidg-api/src/Envelopes/CeidgEnvelope__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill",null,"YAML","README.md",{},"Contracts","/ceidg-api/src/Envelopes/CeidgEnvelope.php","CeidgEnvelope.php","<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Envelopes;\n\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Validators\\BaseValidator;\nuse Exception;\n\nclass CeidgEnvelope implements CeidgEnvelopeContract\n{\n    /**\n     * CeidgApi instance.\n     *\n     * @var CeidgEnvelopeContract\n     */\n    protected $ceidgApi;\n\n    /**\n     * Allowed params array (overriden by extending classes).\n     *\n     * @var array\n     */\n    protected $allowedParams = [];\n\n    /**\n     * Query params, sent within SOAP envelope.\n     *\n     * @var array\n     */\n    protected $params = [];\n\n    /**\n     * SOAP function name.\n     *\n     * @var string\n     */\n    protected $callFunctionName;\n\n    /**\n     * Class constructor.\n     *\n     * @param CeidgApiContract $ceidgApi\n     */\n    public function __construct(CeidgApiContract $ceidgApi)\n    {\n        $this->ceidgApi = $ceidgApi;\n    }\n\n    /**\n     * Magic __call method used to set query params.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    public function __call($name, $value): CeidgEnvelopeContract\n    {\n        if (0 !== strpos(ucfirst($name), 'Set')) {\n            return $this->filterParams($name);\n        }\n\n        return $this->setParam(str_replace('Set', '', ucfirst($name)), $value);\n    }\n\n    /**\n     * Return query params with or without auth token. Auth token would be\n     * returned when $merged param is true.\n     *\n     * @param bool $merged\n     *\n     * @return array\n     */\n    public function getParams($merged = false): array\n    {\n        return $merged ? $this->ceidgApi->makeParams($this->params) : $this->params;\n    }\n\n    /**\n     * Send SOAP envelope and (optionally) parse it immediately\n     * Return string with raw XML response or parsed array/object.\n     *\n     * @param bool $parse\n     *\n     * @throws Exception\n     *\n     * @return array|object|string\n     */\n    public function send($parse = true)\n    {\n        $params = $this->ceidgApi->makeParams($this->params);\n\n        $client = $this->ceidgApi->getClient();\n\n        try {\n            $result = $client->__call($this->callFunctionName, ['body' => $params]);\n        } catch (Exception $e) {\n            throw $e;\n        }\n\n        $this->params = [];\n\n        if (!$parse) {\n            return $result;\n        }\n\n        return $this->ceidgApi->getParser($this->callFunctionName)->parse($result);\n    }\n\n    /**\n     * Validate value against param name.\n     * Return false on entirely negative validation, or validated content\n     * if some values could be left.\n     *\n     * @param string $name\n     * @param mixed  $value\n     *\n     * @return array|bool|string\n     */\n    public function validate($name, $value)\n    {\n        return BaseValidator::getValidator($name)->validate($value);\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $validationResult\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function filterParams($name, $validationResult = false): CeidgEnvelopeContract\n    {\n        if ($this->isParamEmpty($name) || false === $validationResult) {\n            try {\n                unset($this->params[$name]);\n            } catch (Exception $e) {\n            }\n        }\n\n        return $this;\n    }\n\n    /**\n     * Filter empty params: zero-element arrays, or empty strings.\n     *\n     * @param string $name\n     * @param bool   $validated\n     * @param mixed  $value\n     *\n     * @return CeidgEnvelopeContract\n     */\n    protected function setParam($name, $value): CeidgEnvelopeContract\n    {\n        if (\\in_array($name, array_keys($this->allowedParams), true)) {\n            $validated = 'single' === $this->allowedParams[$name]\n                ? $this->validate($name, $this->processSingleParam($value))\n                : $this->validate($name, $this->processListParam($value));\n\n            if (false !== $validated) {\n                $this->params[$name] = $validated;\n            }\n        }\n\n        return $this->filterParams($name, false !== $validated);\n    }\n\n    /**\n     * Check whether query param by the name $name is empty, either a zero-element\n     * array or empty string.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    protected function isParamEmpty($name): bool\n    {\n        // Param is an array with zero elements\n        if (\\is_array($this->params[$name]) && 0 === \\count($this->params[$name])) {\n            return true;\n        }\n\n        // Param is an empty string\n        if (!\\is_array($this->params[$name]) && '' === $this->params[$name]) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Process list param from __call method's $value and return it as array.\n     *\n     * @param mixed $value\n     *\n     * @return array\n     */\n    protected function processListParam($value): array\n    {\n        return \\is_array($value[0]) ? $value[0] : (!isset($value[1]) ? [$value[0]] : $value);\n    }\n\n    /**\n     * Process single param from __call method's value and return it as string.\n     * Method retrieves only first argument if more than one were given.\n     *\n     * @param mixed $value\n     *\n     * @return string\n     */\n    protected function processSingleParam($value): string\n    {\n        return (string) (\\is_array($value[0]) ? $value[0][0] : $value[0]);\n    }\n}\n","tests",".coveralls.yml","yaml","simple-icons:coveralls",".travis.yml","logos:travis-ci","composer.json","json","logos:composer","phpunit.xml.dist","mdi:xml","Support",{},"ceidg-api/src/Envelopes/CeidgEnvelope__php")