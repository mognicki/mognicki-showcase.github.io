window.__NUXT__=function(e,t,a,n,s,i,p,c,o,r,g,l,h,d,u,m,y,$,x,k,v,C,D,_,M,P,S,E,T,j,A,I,N,f,G){return $.path="/",$.name="repository",$.type=n,$.children=[{path:"/ceidg-api",name:"ceidg-api",type:n,children:[{path:"/ceidg-api/src",name:g,type:n,children:[{path:"/ceidg-api/src/Contracts",name:x,type:n,children:[{path:"/ceidg-api/src/Contracts/CeidgApiContract.php",name:"CeidgApiContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php",name:"CeidgEnvelopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/ValidatorContract.php",name:"ValidatorContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Contracts/XmlParserContract.php",name:"XmlParserContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Envelopes",name:"Envelopes",type:n,children:[{path:"/ceidg-api/src/Envelopes/CeidgEnvelope.php",name:"CeidgEnvelope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetId.php",name:"GetId.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData.php",name:"GetMigrationData.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Envelopes/GetMigrationData201901.php",name:"GetMigrationData201901.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Parsers",name:"Parsers",type:n,children:[{path:"/ceidg-api/src/Parsers/BaseParser.php",name:"BaseParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/IdParser.php",name:"IdParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Parsers/MigrationDataParser.php",name:"MigrationDataParser.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/Validators",name:"Validators",type:n,children:[{path:"/ceidg-api/src/Validators/BaseValidator.php",name:"BaseValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/EmptyValidator.php",name:"EmptyValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIPValidator.php",name:"NIPValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/NIP_SCValidator.php",name:"NIP_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PKDValidator.php",name:"PKDValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/PostcodeValidator.php",name:"PostcodeValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGONValidator.php",name:"REGONValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/REGON_SCValidator.php",name:"REGON_SCValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/src/Validators/StatusValidator.php",name:"StatusValidator.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/src/CeidgApi.php",name:"CeidgApi.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/ceidg-api/tests",name:k,type:n,children:[{path:v,name:C,type:e,exclude:[{}],stacks:{language:t,icon:a},content:D}],exclude:[{}],yaml:{}},{path:"/ceidg-api/.coveralls.yml",name:_,type:e,exclude:[{}],stacks:{language:d,icon:M}},{path:"/ceidg-api/.php_cs.dist",name:".php_cs.dist",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/ceidg-api/.styleci.yml",name:".styleci.yml",type:e,exclude:[{}],stacks:{language:u,icon:"logos:styleci"}},{path:"/ceidg-api/.travis.yml",name:P,type:e,exclude:[{}],stacks:{language:u,icon:S}},{path:"/ceidg-api/LICENSE",name:"LICENSE",type:e,exclude:[{}],stacks:{language:s,icon:"bx:bxs-file-blank"}},{path:"/ceidg-api/README.md",name:m,type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/ceidg-api/composer.json",name:l,type:e,exclude:[{}],stacks:{language:o,icon:h}},{path:"/ceidg-api/phpunit.xml.dist",name:E,type:e,exclude:[{}],stacks:{language:"xml",icon:T}}],exclude:[{}],yaml:{}},{path:"/fivem",name:"fivem",type:n,children:[{path:"/fivem/src",name:g,type:n,children:[{path:"/fivem/src/FiveM.php",name:"FiveM.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/fivem/src/FiveMFacade.php",name:"FiveMFacade.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/fivem/src/FiveMServiceProvider.php",name:"FiveMServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/fivem/composer.json",name:l,type:e,exclude:[{}],stacks:{language:o,icon:h}}],exclude:[{}],yaml:{}},{path:"/mighty-text",name:"mighty-text",type:n,children:[{path:"/mighty-text/config",name:"config",type:n,children:[{path:"/mighty-text/config/mightytext.php",name:"mightytext.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src",name:g,type:n,children:[{path:"/mighty-text/src/Commands",name:"Commands",type:n,children:[{path:"/mighty-text/src/Commands/MightyTextSend.php",name:"MightyTextSend.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/mighty-text/src/MightyText.php",name:"MightyText.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/mighty-text/src/MightyTextServiceProvider.php",name:"MightyTextServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/mighty-text/composer.json",name:l,type:e,exclude:[{}],stacks:{language:o,icon:h}}],exclude:[{}],yaml:{}},{path:"/php-jotta",name:"php-jotta",type:n,children:[{path:"/php-jotta/docs",name:"docs",type:n,children:[{path:"/php-jotta/docs/003_Getting_started",name:"003_Getting_started",type:n,children:[{path:"/php-jotta/docs/003_Getting_started/001_Quickstart.md",name:"001_Quickstart.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/003_Getting_started/003_Installation.md",name:"003_Installation.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/003_Getting_started/007_Jottacloud_username.md",name:"007_Jottacloud_username.md",type:e,exclude:[{}],stacks:{language:s,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage",name:"004_Usage",type:n,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations",name:"003_API_operations",type:n,children:[{path:"/php-jotta/docs/004_Usage/003_API_operations/003_Introduction.md",name:"003_Introduction.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/004_Usage/003_API_operations/005_Account.md",name:"005_Account.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/004_Usage/003_API_operations/007_Device.md",name:"007_Device.md",type:e,exclude:[{}],stacks:{language:s,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/004_Usage/000_Overview.md",name:"000_Overview.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/004_Usage/005_Configuration.md",name:"005_Configuration.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/004_Usage/007_Constants.md",name:"007_Constants.md",type:e,exclude:[{}],stacks:{language:s,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/006_Contributions",name:"006_Contributions",type:n,children:[{path:"/php-jotta/docs/006_Contributions/000_Contributions.md",name:"000_Contributions.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/006_Contributions/001_Testing.md",name:"001_Testing.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/006_Contributions/002_Security.md",name:"002_Security.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/006_Contributions/999_Coverage.md",name:"999_Coverage.md",type:e,exclude:[{}],stacks:{language:s,icon:i}}],exclude:[{}],yaml:{}},{path:"/php-jotta/docs/000_index.md",name:"000_index.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/001_Introduction.md",name:"001_Introduction.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/002_Features.md",name:"002_Features.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/007_Changelog.md",name:"007_Changelog.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/008_About_us.md",name:"008_About_us.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/docs/config.json",name:"config.json",type:e,exclude:[{}],stacks:{language:o,icon:"mdi:code-json"}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src",name:g,type:n,children:[{path:"/php-jotta/src/Client",name:"Client",type:n,children:[{path:"/php-jotta/src/Client/Contracts",name:x,type:n,children:[{path:"/php-jotta/src/Client/Contracts/NamespaceContract.php",name:"NamespaceContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Contracts/ScopeContract.php",name:"ScopeContract.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Exceptions",name:"Exceptions",type:n,children:[{path:"/php-jotta/src/Client/Exceptions/JottaException.php",name:"JottaException.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses",name:"Responses",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces",name:"Namespaces",type:n,children:[{path:"/php-jotta/src/Client/Responses/Namespaces/Attributes.php",name:"Attributes.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Device.php",name:"Device.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/File.php",name:"File.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Folder.php",name:"Folder.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Metadata.php",name:"Metadata.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php",name:"MountPoint.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/Revision.php",name:"Revision.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/Namespaces/User.php",name:"User.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Responses/ElementMapper.php",name:"ElementMapper.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/ResponseNamespace.php",name:"ResponseNamespace.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Responses/XmlResponseSerializer.php",name:"XmlResponseSerializer.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Client/Scopes",name:"Scopes",type:n,children:[{path:"/php-jotta/src/Client/Scopes/AccountScope.php",name:"AccountScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DeviceScope.php",name:"DeviceScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/DirectoryScope.php",name:"DirectoryScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/FileScope.php",name:"FileScope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Client/Scopes/Scope.php",name:"Scope.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Support",name:j,type:n,children:[{path:"/php-jotta/src/Support/JFileInfo.php",name:"JFileInfo.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Support/OperationReport.php",name:"OperationReport.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Traits",name:"Traits",type:n,children:[{path:"/php-jotta/src/Traits/DirectoryConfigTrait.php",name:"DirectoryConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/PathTrait.php",name:"PathTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/Traits/ScopeConfigTrait.php",name:"ScopeConfigTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/src/Jotta.php",name:"Jotta.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaAdapter.php",name:"JottaAdapter.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/src/JottaClient.php",name:"JottaClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests",name:k,type:n,children:[{path:"/php-jotta/tests/Mock",name:"Mock",type:n,children:[{path:"/php-jotta/tests/Mock/JottaApiV1Mock.php",name:"JottaApiV1Mock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Mock/ResponseBodyMock.php",name:"ResponseBodyMock.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Support",name:j,type:n,children:[{path:"/php-jotta/tests/Support/AssertExceptions.php",name:"AssertExceptions.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/DirectoryScopeExtended.php",name:"DirectoryScopeExtended.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Support/JottaTestTrait.php",name:"JottaTestTrait.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit",name:"Unit",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture",name:"_001_Architecture",type:n,children:[{path:"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php",name:"Test001_ArchitectureTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php",name:"Test003_XmlSerializerTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php",name:"Test005_XmlNamespacesTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php",name:"Test006_UploadReportTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_003_Scopes",name:"_003_Scopes",type:n,children:[{path:"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php",name:"Test001_AccountTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php",name:"Test003_DeviceTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php",name:"Test011_DirectoryTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php",name:"Test013_FileTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php",name:"Test013a_FileDownloadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php",name:"Test013b_FileUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php",name:"Test015b_FolderRecursiveUploadTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/Unit/_005_Exceptions",name:"_005_Exceptions",type:n,children:[{path:"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php",name:"Test001_ExceptionsTest.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/coverage",name:"coverage",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/temp",name:"temp",type:n,children:[],exclude:[{}],yaml:{}},{path:"/php-jotta/tests/JottaTestCase.php",name:"JottaTestCase.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}},{path:"/php-jotta/.coveralls.yml",name:_,type:e,exclude:[{}],stacks:{language:d,icon:M}},{path:"/php-jotta/.travis.yml",name:P,type:e,exclude:[{}],stacks:{language:u,icon:S}},{path:"/php-jotta/CODE_OF_CONDUCT.md",name:"CODE_OF_CONDUCT.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/LICENSE.md",name:"LICENSE.md",type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/README.md",name:m,type:e,exclude:[{}],stacks:{language:s,icon:i}},{path:"/php-jotta/composer.json",name:l,type:e,exclude:[{}],stacks:{language:o,icon:h}},{path:"/php-jotta/phpunit.xml.dist",name:E,type:e,exclude:[{}],stacks:{language:"xml",icon:T}}],exclude:[{}],yaml:{}},{path:"/sightengine",name:"sightengine",type:n,children:[{path:"/sightengine/src",name:g,type:n,children:[{path:"/sightengine/src/Check.php",name:"Check.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/sightengine/src/SightengineClient.php",name:"SightengineClient.php",type:e,exclude:[{}],stacks:{language:t,icon:a}},{path:"/sightengine/src/SightengineServiceProvider.php",name:"SightengineServiceProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:y}}],exclude:[{}],yaml:{}},{path:"/sightengine/composer.json",name:l,type:e,exclude:[{}],stacks:{language:o,icon:h}}],exclude:[{}],yaml:{}},{path:"/varia",name:"varia",type:n,children:[{path:"/varia/bash",name:"bash",type:n,children:[{path:"/varia/bash/my-portfolio",name:"my-portfolio",type:n,children:[{path:"/varia/bash/my-portfolio/up.sh",name:"up.sh",type:e,exclude:[{}],stacks:{language:"shell",icon:"simple-icons:gnubash"}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/docker",name:"docker",type:n,children:[{path:"/varia/docker/ffmpeg",name:"ffmpeg",type:n,children:[{path:"/varia/docker/ffmpeg/Dockerfile",name:"Dockerfile",type:e,exclude:[{}],stacks:{language:"dockerfile",icon:A}}],exclude:[{}],yaml:{}},{path:"/varia/docker/nginx-proxy-letsencrypt",name:"nginx-proxy-letsencrypt",type:n,children:[{path:"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml",name:"docker-compose.yml",type:e,exclude:[{}],stacks:{language:d,icon:A}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/js",name:"js",type:n,children:[{path:"/varia/js/threejs-playground",name:"threejs-playground",type:n,children:[{path:"/varia/js/threejs-playground/three.js",name:"three.js",type:e,exclude:[{}],stacks:{language:I,icon:N}}],exclude:[{}],yaml:{}},{path:"/varia/js/tpay-notification",name:"tpay-notification",type:n,children:[{path:"/varia/js/tpay-notification/tnotification.js",name:"tnotification.js",type:e,exclude:[{}],stacks:{language:I,icon:N}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/php",name:t,type:n,children:[{path:"/varia/php/european-bank-calculation",name:"european-bank-calculation",type:n,children:[{path:"/varia/php/european-bank-calculation/EuropeanBankProvider.php",name:"EuropeanBankProvider.php",type:e,exclude:[{}],stacks:{language:t,icon:a}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue",name:p,type:n,children:[{path:"/varia/vue/calendar",name:"calendar",type:n,children:[{path:"/varia/vue/calendar/event-list",name:"event-list",type:n,children:[{path:"/varia/vue/calendar/event-list/EventListItem.vue",name:"EventListItem.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/calendar/EventContent.vue",name:"EventContent.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/EventList.vue",name:"EventList.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/MonthStrips.vue",name:"MonthStrips.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/RomanMonths.vue",name:"RomanMonths.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/Timeline.vue",name:"Timeline.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/calendar/YearEvents.vue",name:"YearEvents.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree",name:"directory-tree",type:n,children:[{path:"/varia/vue/directory-tree/tree",name:"tree",type:n,children:[{path:"/varia/vue/directory-tree/tree/node",name:"node",type:n,children:[{path:"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue",name:"TreeNodeExpander.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}},{path:"/varia/vue/directory-tree/tree/node/TreeNodeName.vue",name:"TreeNodeName.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}},{path:"/varia/vue/directory-tree/tree/TreeNode.vue",name:"TreeNode.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/varia/vue/piechart",name:"piechart",type:n,children:[{path:"/varia/vue/piechart/PieChart.vue",name:"PieChart.vue",type:e,exclude:[{}],stacks:{language:p,icon:c}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}}],exclude:[{}],yaml:{}},{path:"/README.md",name:m,type:e,exclude:[{}],stacks:{language:s,icon:i}}],$.exclude=[{}],$.yaml={},f.path=v,f.name=C,f.type=e,f.exclude=[{}],f.stacks={language:t,icon:a},f.content=D,{layout:"default",data:[{tree:$,pathNode:f,pathMatch:G}],fetch:[],error:r,state:{auth:{token:r,visitor:r,word:r},layout:{loading:{icon:r,name:r},tree:!0},stacks:{stacks:{php:{hex:"#ff0000",icon:{show:!0,name:t}}}},tree:{path:{active:"",expanded:[""]},tree:$,pathMatch:G,pathNode:f}},serverRendered:!0,routePath:"/ceidg-api/tests/CeidgTest__php"}}("file","php","logos:php","dir","markdown","ri:markdown-fill","vue","logos:vue","json",null,"src","composer.json","logos:composer","yaml","YAML","README.md","logos:laravel",{},"Contracts","tests","/ceidg-api/tests/CeidgTest.php","CeidgTest.php","<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Tests;\n\nuse CeidgApi\\CeidgApi;\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Envelopes\\CeidgEnvelope;\nuse CeidgApi\\Envelopes\\GetId;\nuse CeidgApi\\Envelopes\\GetMigrationData;\nuse PHPUnit\\Framework\\TestCase;\nuse SoapClient;\n\nfinal class CeidgTest extends TestCase\n{\n    protected $authToken;\n    protected $dotenvLoaded = false;\n\n    protected function setEnv()\n    {\n        $this->authToken = getenv('CEIDG_AUTH_TOKEN') !== null ? getenv('CEIDG_AUTH_TOKEN') : $CEIDG_AUTH_TOKEN;\n    }\n\n    public function testDotenvLoaded()\n    {\n        $this->setEnv();\n        $this->assertNotNull($this->authToken);\n    }\n\n    public function testConstruct()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertObjectHasAttribute('productionUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('sandboxUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('client', $ceidgApi);\n        $this->assertObjectHasAttribute('apiKey', $ceidgApi);\n        $this->assertInstanceOf(CeidgApi::class, $ceidgApi);\n        $this->assertInstanceOf(CeidgApiContract::class, $ceidgApi);\n    }\n\n    public function testGetClient()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(SoapClient::class, $ceidgApi->getClient());\n    }\n\n    public function testGetId()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->getId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getId());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetId());\n    }\n\n    public function testGetMigrationData()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData201901());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData201901());\n    }\n\n    public function testGetIdParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getId = (new CeidgApi($this->authToken))->getId();\n\n        foreach ($params as $key => $value) {\n            $getId->{'set'.$key}($value);\n            $queryParams = $getId->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getId->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getId->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getId->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataParamsWithoutListParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        foreach ($params as $key => $value) {\n            $getMigrationData->{'set'.$key}($value);\n            $queryParams = $getMigrationData->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getMigrationData->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getMigrationData->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getMigrationData->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataNipParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789']);\n\n        $getMigrationData->setNIP('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n\n        $getMigrationData->setNIP('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132430459']);\n\n        $getMigrationData->setNIP(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n    }\n\n    public function testGetMigrationDataNip_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP_SC('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789']);\n\n        $getMigrationData->setNIP_SC('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP_SC('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n\n        $getMigrationData->setNIP_SC('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n    }\n\n    public function testGetMigrationDataRegonParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750']);\n\n        $getMigrationData->setREGON('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n\n        $getMigrationData->setREGON('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['012693590']);\n\n        $getMigrationData->setREGON(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n    }\n\n    public function testGetMigrationDataRegon_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON_SC('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750']);\n\n        $getMigrationData->setREGON_SC('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON_SC(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON_SC('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n\n        $getMigrationData->setREGON_SC('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['012693590']);\n\n        $getMigrationData->setREGON_SC(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n    }\n\n    public function testGetMigrationDataPostcodeParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPostcode('04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03-075', '04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '04-023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        // Sorting out faulty postcodes\n        $getMigrationData->setPostcode('04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03075   ', '04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n\n        $getMigrationData->setPostcode([' 03075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n    }\n\n    public function testGetMigrationDataPKDParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPKD('631', '6311Z', '6312');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['631', '6311Z', '6312']);\n\n        // Sorting out faulty PKDs\n        $getMigrationData->setPKD('63.11.Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z']);\n\n        $getMigrationData->setPKD('63 11 Z', '63.91Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z', '6391Z']);\n\n        $getMigrationData->setPKD(['63 11 ZZ', '63...91Z', '63/99/Z']);\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6391Z', '6399Z']);\n    }\n\n    public function testGetMigrationDataStatusParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setStatus(1, '2', '3 ', 4, 5, 6, '7', '8', 9, 10);\n        $this->assertSame($getMigrationData->getParams()['Status'], [1, 2, 3, 4, 9]);\n    }\n\n    public function testGetIdVSM()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459')->send();\n\n        $this->assertIsNotArray($vsm);\n        $this->assertSame('1465011', $vsm->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm->DanePodstawowe->Imie);\n    }\n\n    public function testGetIdTwoCompanies()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459', '1132632105')->send();\n\n        $this->assertIsArray($vsm);\n        $this->assertSame('1465011', $vsm[0]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[0]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[0]->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm[0]->DanePodstawowe->Imie);\n        $this->assertSame('1465011', $vsm[1]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[1]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[1]->DaneDodatkowe->Status);\n        $this->assertSame('MAREK', $vsm[1]->DanePodstawowe->Imie);\n    }\n}\n",".coveralls.yml","simple-icons:coveralls",".travis.yml","logos:travis-ci","phpunit.xml.dist","mdi:xml","Support","logos:docker-icon","javascript","logos:javascript",{},"ceidg-api/tests/CeidgTest__php")