{"tree":{"path":"/","name":"repository","type":"dir","children":[{"path":"/ceidg-api","name":"ceidg-api","type":"dir","children":[{"path":"/ceidg-api/src","name":"src","type":"dir","children":[{"path":"/ceidg-api/src/Contracts","name":"Contracts","type":"dir","children":[{"path":"/ceidg-api/src/Contracts/CeidgApiContract.php","name":"CeidgApiContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/CeidgEnvelopeContract.php","name":"CeidgEnvelopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/ValidatorContract.php","name":"ValidatorContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Contracts/XmlParserContract.php","name":"XmlParserContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Envelopes","name":"Envelopes","type":"dir","children":[{"path":"/ceidg-api/src/Envelopes/CeidgEnvelope.php","name":"CeidgEnvelope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetId.php","name":"GetId.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData.php","name":"GetMigrationData.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Envelopes/GetMigrationData201901.php","name":"GetMigrationData201901.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Parsers","name":"Parsers","type":"dir","children":[{"path":"/ceidg-api/src/Parsers/BaseParser.php","name":"BaseParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/IdParser.php","name":"IdParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Parsers/MigrationDataParser.php","name":"MigrationDataParser.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/Validators","name":"Validators","type":"dir","children":[{"path":"/ceidg-api/src/Validators/BaseValidator.php","name":"BaseValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/EmptyValidator.php","name":"EmptyValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIPValidator.php","name":"NIPValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/NIP_SCValidator.php","name":"NIP_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PKDValidator.php","name":"PKDValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/PostcodeValidator.php","name":"PostcodeValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGONValidator.php","name":"REGONValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/REGON_SCValidator.php","name":"REGON_SCValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/src/Validators/StatusValidator.php","name":"StatusValidator.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/src/CeidgApi.php","name":"CeidgApi.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/tests","name":"tests","type":"dir","children":[{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Tests;\n\nuse CeidgApi\\CeidgApi;\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Envelopes\\CeidgEnvelope;\nuse CeidgApi\\Envelopes\\GetId;\nuse CeidgApi\\Envelopes\\GetMigrationData;\nuse PHPUnit\\Framework\\TestCase;\nuse SoapClient;\n\nfinal class CeidgTest extends TestCase\n{\n    protected $authToken;\n    protected $dotenvLoaded = false;\n\n    protected function setEnv()\n    {\n        $this->authToken = getenv('CEIDG_AUTH_TOKEN') !== null ? getenv('CEIDG_AUTH_TOKEN') : $CEIDG_AUTH_TOKEN;\n    }\n\n    public function testDotenvLoaded()\n    {\n        $this->setEnv();\n        $this->assertNotNull($this->authToken);\n    }\n\n    public function testConstruct()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertObjectHasAttribute('productionUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('sandboxUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('client', $ceidgApi);\n        $this->assertObjectHasAttribute('apiKey', $ceidgApi);\n        $this->assertInstanceOf(CeidgApi::class, $ceidgApi);\n        $this->assertInstanceOf(CeidgApiContract::class, $ceidgApi);\n    }\n\n    public function testGetClient()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(SoapClient::class, $ceidgApi->getClient());\n    }\n\n    public function testGetId()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->getId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getId());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetId());\n    }\n\n    public function testGetMigrationData()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData201901());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData201901());\n    }\n\n    public function testGetIdParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getId = (new CeidgApi($this->authToken))->getId();\n\n        foreach ($params as $key => $value) {\n            $getId->{'set'.$key}($value);\n            $queryParams = $getId->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getId->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getId->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getId->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataParamsWithoutListParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        foreach ($params as $key => $value) {\n            $getMigrationData->{'set'.$key}($value);\n            $queryParams = $getMigrationData->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getMigrationData->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getMigrationData->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getMigrationData->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataNipParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789']);\n\n        $getMigrationData->setNIP('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n\n        $getMigrationData->setNIP('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132430459']);\n\n        $getMigrationData->setNIP(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n    }\n\n    public function testGetMigrationDataNip_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP_SC('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789']);\n\n        $getMigrationData->setNIP_SC('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP_SC('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n\n        $getMigrationData->setNIP_SC('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n    }\n\n    public function testGetMigrationDataRegonParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750']);\n\n        $getMigrationData->setREGON('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n\n        $getMigrationData->setREGON('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['012693590']);\n\n        $getMigrationData->setREGON(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n    }\n\n    public function testGetMigrationDataRegon_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON_SC('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750']);\n\n        $getMigrationData->setREGON_SC('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON_SC(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON_SC('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n\n        $getMigrationData->setREGON_SC('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['012693590']);\n\n        $getMigrationData->setREGON_SC(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n    }\n\n    public function testGetMigrationDataPostcodeParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPostcode('04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03-075', '04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '04-023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        // Sorting out faulty postcodes\n        $getMigrationData->setPostcode('04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03075   ', '04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n\n        $getMigrationData->setPostcode([' 03075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n    }\n\n    public function testGetMigrationDataPKDParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPKD('631', '6311Z', '6312');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['631', '6311Z', '6312']);\n\n        // Sorting out faulty PKDs\n        $getMigrationData->setPKD('63.11.Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z']);\n\n        $getMigrationData->setPKD('63 11 Z', '63.91Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z', '6391Z']);\n\n        $getMigrationData->setPKD(['63 11 ZZ', '63...91Z', '63/99/Z']);\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6391Z', '6399Z']);\n    }\n\n    public function testGetMigrationDataStatusParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setStatus(1, '2', '3 ', 4, 5, 6, '7', '8', 9, 10);\n        $this->assertSame($getMigrationData->getParams()['Status'], [1, 2, 3, 4, 9]);\n    }\n\n    public function testGetIdVSM()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459')->send();\n\n        $this->assertIsNotArray($vsm);\n        $this->assertSame('1465011', $vsm->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm->DanePodstawowe->Imie);\n    }\n\n    public function testGetIdTwoCompanies()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459', '1132632105')->send();\n\n        $this->assertIsArray($vsm);\n        $this->assertSame('1465011', $vsm[0]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[0]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[0]->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm[0]->DanePodstawowe->Imie);\n        $this->assertSame('1465011', $vsm[1]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[1]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[1]->DaneDodatkowe->Status);\n        $this->assertSame('MAREK', $vsm[1]->DanePodstawowe->Imie);\n    }\n}\n"}],"exclude":[{}],"yaml":{}},{"path":"/ceidg-api/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/ceidg-api/.php_cs.dist","name":".php_cs.dist","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/ceidg-api/.styleci.yml","name":".styleci.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:styleci"}},{"path":"/ceidg-api/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/ceidg-api/LICENSE","name":"LICENSE","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"bx:bxs-file-blank"}},{"path":"/ceidg-api/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/ceidg-api/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/ceidg-api/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/fivem","name":"fivem","type":"dir","children":[{"path":"/fivem/src","name":"src","type":"dir","children":[{"path":"/fivem/src/FiveM.php","name":"FiveM.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/fivem/src/FiveMFacade.php","name":"FiveMFacade.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/fivem/src/FiveMServiceProvider.php","name":"FiveMServiceProvider.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:laravel"}}],"exclude":[{}],"yaml":{}},{"path":"/fivem/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}}],"exclude":[{}],"yaml":{}},{"path":"/mighty-text","name":"mighty-text","type":"dir","children":[{"path":"/mighty-text/config","name":"config","type":"dir","children":[{"path":"/mighty-text/config/mightytext.php","name":"mightytext.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/mighty-text/src","name":"src","type":"dir","children":[{"path":"/mighty-text/src/Commands","name":"Commands","type":"dir","children":[{"path":"/mighty-text/src/Commands/MightyTextSend.php","name":"MightyTextSend.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/mighty-text/src/MightyText.php","name":"MightyText.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/mighty-text/src/MightyTextServiceProvider.php","name":"MightyTextServiceProvider.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:laravel"}}],"exclude":[{}],"yaml":{}},{"path":"/mighty-text/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta","name":"php-jotta","type":"dir","children":[{"path":"/php-jotta/docs","name":"docs","type":"dir","children":[{"path":"/php-jotta/docs/003_Getting_started","name":"003_Getting_started","type":"dir","children":[{"path":"/php-jotta/docs/003_Getting_started/001_Quickstart.md","name":"001_Quickstart.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/003_Getting_started/003_Installation.md","name":"003_Installation.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/003_Getting_started/007_Jottacloud_username.md","name":"007_Jottacloud_username.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/docs/004_Usage","name":"004_Usage","type":"dir","children":[{"path":"/php-jotta/docs/004_Usage/003_API_operations","name":"003_API_operations","type":"dir","children":[{"path":"/php-jotta/docs/004_Usage/003_API_operations/003_Introduction.md","name":"003_Introduction.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/004_Usage/003_API_operations/005_Account.md","name":"005_Account.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/004_Usage/003_API_operations/007_Device.md","name":"007_Device.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/docs/004_Usage/000_Overview.md","name":"000_Overview.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/004_Usage/005_Configuration.md","name":"005_Configuration.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/004_Usage/007_Constants.md","name":"007_Constants.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/docs/006_Contributions","name":"006_Contributions","type":"dir","children":[{"path":"/php-jotta/docs/006_Contributions/000_Contributions.md","name":"000_Contributions.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/006_Contributions/001_Testing.md","name":"001_Testing.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/006_Contributions/002_Security.md","name":"002_Security.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/006_Contributions/999_Coverage.md","name":"999_Coverage.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/docs/000_index.md","name":"000_index.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/001_Introduction.md","name":"001_Introduction.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/002_Features.md","name":"002_Features.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/007_Changelog.md","name":"007_Changelog.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/008_About_us.md","name":"008_About_us.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/docs/config.json","name":"config.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"mdi:code-json"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src","name":"src","type":"dir","children":[{"path":"/php-jotta/src/Client","name":"Client","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts","name":"Contracts","type":"dir","children":[{"path":"/php-jotta/src/Client/Contracts/NamespaceContract.php","name":"NamespaceContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Contracts/ScopeContract.php","name":"ScopeContract.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Exceptions","name":"Exceptions","type":"dir","children":[{"path":"/php-jotta/src/Client/Exceptions/JottaException.php","name":"JottaException.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses","name":"Responses","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces","name":"Namespaces","type":"dir","children":[{"path":"/php-jotta/src/Client/Responses/Namespaces/Attributes.php","name":"Attributes.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Device.php","name":"Device.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/File.php","name":"File.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Folder.php","name":"Folder.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Metadata.php","name":"Metadata.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/MountPoint.php","name":"MountPoint.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/Revision.php","name":"Revision.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/Namespaces/User.php","name":"User.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Responses/ElementMapper.php","name":"ElementMapper.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/ResponseNamespace.php","name":"ResponseNamespace.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Responses/XmlResponseSerializer.php","name":"XmlResponseSerializer.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Client/Scopes","name":"Scopes","type":"dir","children":[{"path":"/php-jotta/src/Client/Scopes/AccountScope.php","name":"AccountScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DeviceScope.php","name":"DeviceScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/DirectoryScope.php","name":"DirectoryScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/FileScope.php","name":"FileScope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Client/Scopes/Scope.php","name":"Scope.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/src/Support/JFileInfo.php","name":"JFileInfo.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Support/OperationReport.php","name":"OperationReport.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Traits","name":"Traits","type":"dir","children":[{"path":"/php-jotta/src/Traits/DirectoryConfigTrait.php","name":"DirectoryConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/PathTrait.php","name":"PathTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/Traits/ScopeConfigTrait.php","name":"ScopeConfigTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/src/Jotta.php","name":"Jotta.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaAdapter.php","name":"JottaAdapter.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/src/JottaClient.php","name":"JottaClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests","name":"tests","type":"dir","children":[{"path":"/php-jotta/tests/Mock","name":"Mock","type":"dir","children":[{"path":"/php-jotta/tests/Mock/JottaApiV1Mock.php","name":"JottaApiV1Mock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Mock/ResponseBodyMock.php","name":"ResponseBodyMock.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Support","name":"Support","type":"dir","children":[{"path":"/php-jotta/tests/Support/AssertExceptions.php","name":"AssertExceptions.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/DirectoryScopeExtended.php","name":"DirectoryScopeExtended.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Support/JottaTestTrait.php","name":"JottaTestTrait.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit","name":"Unit","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture","name":"_001_Architecture","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_001_Architecture/Test001_ArchitectureTest.php","name":"Test001_ArchitectureTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test003_XmlSerializerTest.php","name":"Test003_XmlSerializerTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test005_XmlNamespacesTest.php","name":"Test005_XmlNamespacesTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_001_Architecture/Test006_UploadReportTest.php","name":"Test006_UploadReportTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_003_Scopes","name":"_003_Scopes","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_003_Scopes/Test001_AccountTest.php","name":"Test001_AccountTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test003_DeviceTest.php","name":"Test003_DeviceTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test011_DirectoryTest.php","name":"Test011_DirectoryTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013_FileTest.php","name":"Test013_FileTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013a_FileDownloadTest.php","name":"Test013a_FileDownloadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test013b_FileUploadTest.php","name":"Test013b_FileUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/php-jotta/tests/Unit/_003_Scopes/Test015b_FolderRecursiveUploadTest.php","name":"Test015b_FolderRecursiveUploadTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/Unit/_005_Exceptions","name":"_005_Exceptions","type":"dir","children":[{"path":"/php-jotta/tests/Unit/_005_Exceptions/Test001_ExceptionsTest.php","name":"Test001_ExceptionsTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/coverage","name":"coverage","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/temp","name":"temp","type":"dir","children":[],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/tests/JottaTestCase.php","name":"JottaTestCase.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}},{"path":"/php-jotta/.coveralls.yml","name":".coveralls.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"simple-icons:coveralls"}},{"path":"/php-jotta/.travis.yml","name":".travis.yml","type":"file","exclude":[{}],"stacks":{"language":"YAML","icon":"logos:travis-ci"}},{"path":"/php-jotta/CODE_OF_CONDUCT.md","name":"CODE_OF_CONDUCT.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/LICENSE.md","name":"LICENSE.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}},{"path":"/php-jotta/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}},{"path":"/php-jotta/phpunit.xml.dist","name":"phpunit.xml.dist","type":"file","exclude":[{}],"stacks":{"language":"xml","icon":"mdi:xml"}}],"exclude":[{}],"yaml":{}},{"path":"/sightengine","name":"sightengine","type":"dir","children":[{"path":"/sightengine/src","name":"src","type":"dir","children":[{"path":"/sightengine/src/Check.php","name":"Check.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/sightengine/src/SightengineClient.php","name":"SightengineClient.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}},{"path":"/sightengine/src/SightengineServiceProvider.php","name":"SightengineServiceProvider.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:laravel"}}],"exclude":[{}],"yaml":{}},{"path":"/sightengine/composer.json","name":"composer.json","type":"file","exclude":[{}],"stacks":{"language":"json","icon":"logos:composer"}}],"exclude":[{}],"yaml":{}},{"path":"/varia","name":"varia","type":"dir","children":[{"path":"/varia/bash","name":"bash","type":"dir","children":[{"path":"/varia/bash/my-portfolio","name":"my-portfolio","type":"dir","children":[{"path":"/varia/bash/my-portfolio/up.sh","name":"up.sh","type":"file","exclude":[{}],"stacks":{"language":"shell","icon":"simple-icons:gnubash"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker","name":"docker","type":"dir","children":[{"path":"/varia/docker/ffmpeg","name":"ffmpeg","type":"dir","children":[{"path":"/varia/docker/ffmpeg/Dockerfile","name":"Dockerfile","type":"file","exclude":[{}],"stacks":{"language":"dockerfile","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/docker/nginx-proxy-letsencrypt","name":"nginx-proxy-letsencrypt","type":"dir","children":[{"path":"/varia/docker/nginx-proxy-letsencrypt/docker-compose.yml","name":"docker-compose.yml","type":"file","exclude":[{}],"stacks":{"language":"yaml","icon":"logos:docker-icon"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js","name":"js","type":"dir","children":[{"path":"/varia/js/threejs-playground","name":"threejs-playground","type":"dir","children":[{"path":"/varia/js/threejs-playground/three.js","name":"three.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/js/tpay-notification","name":"tpay-notification","type":"dir","children":[{"path":"/varia/js/tpay-notification/tnotification.js","name":"tnotification.js","type":"file","exclude":[{}],"stacks":{"language":"javascript","icon":"logos:javascript"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/php","name":"php","type":"dir","children":[{"path":"/varia/php/european-bank-calculation","name":"european-bank-calculation","type":"dir","children":[{"path":"/varia/php/european-bank-calculation/EuropeanBankProvider.php","name":"EuropeanBankProvider.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue","name":"vue","type":"dir","children":[{"path":"/varia/vue/calendar","name":"calendar","type":"dir","children":[{"path":"/varia/vue/calendar/event-list","name":"event-list","type":"dir","children":[{"path":"/varia/vue/calendar/event-list/EventListItem.vue","name":"EventListItem.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/calendar/EventContent.vue","name":"EventContent.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/EventList.vue","name":"EventList.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/MonthStrips.vue","name":"MonthStrips.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/RomanMonths.vue","name":"RomanMonths.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/Timeline.vue","name":"Timeline.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/calendar/YearEvents.vue","name":"YearEvents.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree","name":"directory-tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree","name":"tree","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node","name":"node","type":"dir","children":[{"path":"/varia/vue/directory-tree/tree/node/TreeNodeExpander.vue","name":"TreeNodeExpander.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}},{"path":"/varia/vue/directory-tree/tree/node/TreeNodeName.vue","name":"TreeNodeName.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/directory-tree/tree/TreeNode.vue","name":"TreeNode.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/varia/vue/piechart","name":"piechart","type":"dir","children":[{"path":"/varia/vue/piechart/PieChart.vue","name":"PieChart.vue","type":"file","exclude":[{}],"stacks":{"language":"vue","icon":"logos:vue"}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}}],"exclude":[{}],"yaml":{}},{"path":"/README.md","name":"README.md","type":"file","exclude":[{}],"stacks":{"language":"markdown","icon":"ri:markdown-fill"}}],"exclude":[{}],"yaml":{}},"pathNode":{"path":"/ceidg-api/tests/CeidgTest.php","name":"CeidgTest.php","type":"file","exclude":[{}],"stacks":{"language":"php","icon":"logos:php"},"content":"<?php\n\n/*\n * This file is a part of sigrun/ceidg-api package, a PHP library for to deal\n * with the CEIDG (https://datastore.ceidg.gov.pl) SOAP webservice.\n *\n * @author Marek Kapusta-Ognicki <marek@sigrun.eu>\n * @author Sigrun Sp. z o.o. <sigrun@sigrun.eu>\n * @copy (C)2019 Sigrun Sp. z o.o. All rights reserved.\n */\n\nnamespace CeidgApi\\Tests;\n\nuse CeidgApi\\CeidgApi;\nuse CeidgApi\\Contracts\\CeidgApiContract;\nuse CeidgApi\\Contracts\\CeidgEnvelopeContract;\nuse CeidgApi\\Envelopes\\CeidgEnvelope;\nuse CeidgApi\\Envelopes\\GetId;\nuse CeidgApi\\Envelopes\\GetMigrationData;\nuse PHPUnit\\Framework\\TestCase;\nuse SoapClient;\n\nfinal class CeidgTest extends TestCase\n{\n    protected $authToken;\n    protected $dotenvLoaded = false;\n\n    protected function setEnv()\n    {\n        $this->authToken = getenv('CEIDG_AUTH_TOKEN') !== null ? getenv('CEIDG_AUTH_TOKEN') : $CEIDG_AUTH_TOKEN;\n    }\n\n    public function testDotenvLoaded()\n    {\n        $this->setEnv();\n        $this->assertNotNull($this->authToken);\n    }\n\n    public function testConstruct()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertObjectHasAttribute('productionUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('sandboxUrl', $ceidgApi);\n        $this->assertObjectHasAttribute('client', $ceidgApi);\n        $this->assertObjectHasAttribute('apiKey', $ceidgApi);\n        $this->assertInstanceOf(CeidgApi::class, $ceidgApi);\n        $this->assertInstanceOf(CeidgApiContract::class, $ceidgApi);\n    }\n\n    public function testGetClient()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(SoapClient::class, $ceidgApi->getClient());\n    }\n\n    public function testGetId()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->getId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getId());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(GetId::class, $ceidgApi->GetId());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetId());\n    }\n\n    public function testGetMigrationData()\n    {\n        $this->setEnv();\n        $ceidgApi = new CeidgApi($this->authToken);\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->getMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->getMigrationData201901());\n\n        $this->assertInstanceOf(CeidgEnvelope::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(GetMigrationData::class, $ceidgApi->GetMigrationData201901());\n        $this->assertInstanceOf(CeidgEnvelopeContract::class, $ceidgApi->GetMigrationData201901());\n    }\n\n    public function testGetIdParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getId = (new CeidgApi($this->authToken))->getId();\n\n        foreach ($params as $key => $value) {\n            $getId->{'set'.$key}($value);\n            $queryParams = $getId->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getId->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getId->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getId->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataParamsWithoutListParams()\n    {\n        $this->setEnv();\n\n        $params = [\n            'DateFrom'          => date('Y-m-d'),\n            'DateTo'            => date('Y-m-d'),\n            'MigrationDateFrom' => date('Y-m-d'),\n            'MigrationDateTo'   => date('Y-m-d'),\n        ];\n\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        foreach ($params as $key => $value) {\n            $getMigrationData->{'set'.$key}($value);\n            $queryParams = $getMigrationData->getParams();\n            $this->assertSame($queryParams[$key], $params[$key]);\n        }\n\n        $queryParams = $getMigrationData->getParams(true);\n        $this->assertSame($this->authToken, $queryParams['AuthToken']);\n\n        $queryParams = $getMigrationData->getParams(false);\n        $this->assertFalse(isset($queryParams['AuthToken']));\n\n        $queryParams = $getMigrationData->getParams();\n        $this->assertFalse(isset($queryParams['AuthToken']));\n    }\n\n    public function testGetMigrationDataNipParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789']);\n\n        $getMigrationData->setNIP('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n\n        $getMigrationData->setNIP('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP'], ['1132430459']);\n\n        $getMigrationData->setNIP(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP']));\n    }\n\n    public function testGetMigrationDataNip_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setNIP_SC('1132008789');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789']);\n\n        $getMigrationData->setNIP_SC('1132008789', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008789', '1132430459']);\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132008789', '1132430459']);\n\n        // Sorting out faulty NIP numbers\n        $getMigrationData->setNIP_SC('1132430455');\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n\n        $getMigrationData->setNIP_SC('1132008785', '1132430459');\n        $this->assertSame($getMigrationData->getParams()['NIP_SC'], ['1132430459']);\n\n        $getMigrationData->setNIP_SC(['1132008785', '1132430453']);\n        $this->assertFalse(isset($getMigrationData->getParams()['NIP_SC']));\n    }\n\n    public function testGetMigrationDataRegonParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750']);\n\n        $getMigrationData->setREGON('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n\n        $getMigrationData->setREGON('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON'], ['012693590']);\n\n        $getMigrationData->setREGON(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON']));\n    }\n\n    public function testGetMigrationDataRegon_SCParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setREGON_SC('141702750');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750']);\n\n        $getMigrationData->setREGON_SC('141702750', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        $getMigrationData->setREGON_SC(['141702750', '012693590']);\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['141702750', '012693590']);\n\n        // Sorting out faulty REGON numbers\n        $getMigrationData->setREGON_SC('141702755');\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n\n        $getMigrationData->setREGON_SC('141702755', '012693590');\n        $this->assertSame($getMigrationData->getParams()['REGON_SC'], ['012693590']);\n\n        $getMigrationData->setREGON_SC(['141702755', '012693550']);\n        $this->assertFalse(isset($getMigrationData->getParams()['REGON_SC']));\n    }\n\n    public function testGetMigrationDataPostcodeParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPostcode('04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03-075', '04-023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '04-023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        // Sorting out faulty postcodes\n        $getMigrationData->setPostcode('04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['04-023']);\n\n        $getMigrationData->setPostcode('03075   ', '04023');\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075', '04-023']);\n\n        $getMigrationData->setPostcode(['03-075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n\n        $getMigrationData->setPostcode([' 03075', '040023']);\n        $this->assertSame($getMigrationData->getParams()['Postcode'], ['03-075']);\n    }\n\n    public function testGetMigrationDataPKDParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setPKD('631', '6311Z', '6312');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['631', '6311Z', '6312']);\n\n        // Sorting out faulty PKDs\n        $getMigrationData->setPKD('63.11.Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z']);\n\n        $getMigrationData->setPKD('63 11 Z', '63.91Z');\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6311Z', '6391Z']);\n\n        $getMigrationData->setPKD(['63 11 ZZ', '63...91Z', '63/99/Z']);\n        $this->assertSame($getMigrationData->getParams()['PKD'], ['6391Z', '6399Z']);\n    }\n\n    public function testGetMigrationDataStatusParam()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $getMigrationData = (new CeidgApi($this->authToken))->getMigrationData();\n\n        $getMigrationData->setStatus(1, '2', '3 ', 4, 5, 6, '7', '8', 9, 10);\n        $this->assertSame($getMigrationData->getParams()['Status'], [1, 2, 3, 4, 9]);\n    }\n\n    public function testGetIdVSM()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459')->send();\n\n        $this->assertIsNotArray($vsm);\n        $this->assertSame('1465011', $vsm->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm->DanePodstawowe->Imie);\n    }\n\n    public function testGetIdTwoCompanies()\n    {\n        $this->setEnv();\n\n        /**\n         * Initial tests - everything should be ok.\n         */\n        $vsm = (new CeidgApi($this->authToken))->getMigrationData()->setNIP('1132430459', '1132632105')->send();\n\n        $this->assertIsArray($vsm);\n        $this->assertSame('1465011', $vsm[0]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[0]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[0]->DaneDodatkowe->Status);\n        $this->assertSame('Włodzimierz', $vsm[0]->DanePodstawowe->Imie);\n        $this->assertSame('1465011', $vsm[1]->DaneAdresowe->AdresGlownegoMiejscaWykonywaniaDzialalnosci->TERC);\n        $this->assertSame('-', $vsm[1]->DaneDodatkowe->MalzenskaWspolnoscMajatkowa);\n        $this->assertSame('Wykreślony', $vsm[1]->DaneDodatkowe->Status);\n        $this->assertSame('MAREK', $vsm[1]->DanePodstawowe->Imie);\n    }\n}\n"},"pathMatch":"ceidg-api/tests/CeidgTest__php"}